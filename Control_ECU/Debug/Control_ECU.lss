
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000373e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  0000373e  000037d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800186  00800186  000038f8  2**0
                  ALLOC
  3 .stab         00003888  00000000  00000000  000038f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003430  00000000  00000000  00007180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000cd4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f762  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__vector_4>
      14:	0c 94 17 13 	jmp	0x262e	; 0x262e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__vector_7>
      20:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__vector_8>
      24:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__vector_9>
      28:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__vector_10>
      2c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8b 1a 	call	0x3516	; 0x3516 <main>
      8a:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
 * @param[in]  Config_Ptr Type UART_ConfigType
 * @param[out] none
 * @return none
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <UART_init+0xe>
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <UART_init+0x10>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
#if (RECIEVER_MODE == INTERRUPT_MODE)
	SET_BIT(UCSRB,RXCIE);
#endif

/* Setting the Speed Mode */
if (Config_Ptr->SpeedMode == DOUBLE_SPEED)
     e46:	eb 81       	ldd	r30, Y+3	; 0x03
     e48:	fc 81       	ldd	r31, Y+4	; 0x04
     e4a:	86 81       	ldd	r24, Z+6	; 0x06
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	41 f4       	brne	.+16     	; 0xe60 <UART_init+0x32>
{
	SET_BIT(UCSRA,U2X);
     e50:	ab e2       	ldi	r26, 0x2B	; 43
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	eb e2       	ldi	r30, 0x2B	; 43
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	82 60       	ori	r24, 0x02	; 2
     e5c:	8c 93       	st	X, r24
     e5e:	07 c0       	rjmp	.+14     	; 0xe6e <UART_init+0x40>
}
else
{
	CLR_BIT(UCSRA,U2X);
     e60:	ab e2       	ldi	r26, 0x2B	; 43
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	8c 93       	st	X, r24
}

/* Setting the Clock Polarity */
if (Config_Ptr->ClockPolarityType == FALLING_XCK_EDGE)
     e6e:	eb 81       	ldd	r30, Y+3	; 0x03
     e70:	fc 81       	ldd	r31, Y+4	; 0x04
     e72:	85 81       	ldd	r24, Z+5	; 0x05
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	41 f4       	brne	.+16     	; 0xe88 <UART_init+0x5a>
{
	SET_BIT(UCSRC,UCPOL);
     e78:	a0 e4       	ldi	r26, 0x40	; 64
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e0 e4       	ldi	r30, 0x40	; 64
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	8c 93       	st	X, r24
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <UART_init+0x68>
}
else
{
	CLR_BIT(UCSRC,UCPOL);
     e88:	a0 e4       	ldi	r26, 0x40	; 64
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8e 7f       	andi	r24, 0xFE	; 254
     e94:	8c 93       	st	X, r24
}

/* Choosing the Write in UCSRC Register */
SET_BIT(UCSRC,URSEL);
     e96:	a0 e4       	ldi	r26, 0x40	; 64
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e0 e4       	ldi	r30, 0x40	; 64
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 68       	ori	r24, 0x80	; 128
     ea2:	8c 93       	st	X, r24

/* Choosing the Data Bits Size */
UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->DataSizeType)<<1);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	28 2f       	mov	r18, r24
     eb0:	29 7f       	andi	r18, 0xF9	; 249
     eb2:	eb 81       	ldd	r30, Y+3	; 0x03
     eb4:	fc 81       	ldd	r31, Y+4	; 0x04
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	82 2b       	or	r24, r18
     ec2:	8c 93       	st	X, r24

/* Choosing the Stop Bit Size */
UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->StopType)<<3);
     ec4:	a0 e4       	ldi	r26, 0x40	; 64
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e0 e4       	ldi	r30, 0x40	; 64
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	28 2f       	mov	r18, r24
     ed0:	27 7f       	andi	r18, 0xF7	; 247
     ed2:	eb 81       	ldd	r30, Y+3	; 0x03
     ed4:	fc 81       	ldd	r31, Y+4	; 0x04
     ed6:	84 81       	ldd	r24, Z+4	; 0x04
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	82 2b       	or	r24, r18
     eea:	8c 93       	st	X, r24

/* Choosing the Parity Bit Mode */
UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->ParityType)<<4);
     eec:	a0 e4       	ldi	r26, 0x40	; 64
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e0 e4       	ldi	r30, 0x40	; 64
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	28 2f       	mov	r18, r24
     ef8:	2f 7c       	andi	r18, 0xCF	; 207
     efa:	eb 81       	ldd	r30, Y+3	; 0x03
     efc:	fc 81       	ldd	r31, Y+4	; 0x04
     efe:	83 81       	ldd	r24, Z+3	; 0x03
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	82 95       	swap	r24
     f06:	92 95       	swap	r25
     f08:	90 7f       	andi	r25, 0xF0	; 240
     f0a:	98 27       	eor	r25, r24
     f0c:	80 7f       	andi	r24, 0xF0	; 240
     f0e:	98 27       	eor	r25, r24
     f10:	82 2b       	or	r24, r18
     f12:	8c 93       	st	X, r24

/* Enabling the Receiver and Transmitter */
SET_BIT(UCSRB,RXEN);
     f14:	aa e2       	ldi	r26, 0x2A	; 42
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e2       	ldi	r30, 0x2A	; 42
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 61       	ori	r24, 0x10	; 16
     f20:	8c 93       	st	X, r24
SET_BIT(UCSRB,TXEN);
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	88 60       	ori	r24, 0x08	; 8
     f2e:	8c 93       	st	X, r24

/* Setting the Baud Rate */
uint16 Rate = (uint16)((((F_CPU * (Config_Ptr->SpeedMode)) / ((Config_Ptr->BaudRate) * 16UL))) - 1);
     f30:	eb 81       	ldd	r30, Y+3	; 0x03
     f32:	fc 81       	ldd	r31, Y+4	; 0x04
     f34:	86 81       	ldd	r24, Z+6	; 0x06
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	32 e1       	ldi	r19, 0x12	; 18
     f42:	4a e7       	ldi	r20, 0x7A	; 122
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 25 1b 	call	0x364a	; 0x364a <__mulsi3>
     f4e:	7b 01       	movw	r14, r22
     f50:	8c 01       	movw	r16, r24
     f52:	eb 81       	ldd	r30, Y+3	; 0x03
     f54:	fc 81       	ldd	r31, Y+4	; 0x04
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	cc 01       	movw	r24, r24
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	aa 1f       	adc	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	aa 1f       	adc	r26, r26
     f76:	bb 1f       	adc	r27, r27
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	aa 1f       	adc	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	9c 01       	movw	r18, r24
     f82:	ad 01       	movw	r20, r26
     f84:	c8 01       	movw	r24, r16
     f86:	b7 01       	movw	r22, r14
     f88:	0e 94 44 1b 	call	0x3688	; 0x3688 <__udivmodsi4>
     f8c:	da 01       	movw	r26, r20
     f8e:	c9 01       	movw	r24, r18
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01

CLR_BIT(UCSRC,URSEL);
     f96:	a0 e4       	ldi	r26, 0x40	; 64
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e0 e4       	ldi	r30, 0x40	; 64
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 77       	andi	r24, 0x7F	; 127
     fa2:	8c 93       	st	X, r24
UBRRH = Rate>>8;
     fa4:	e0 e4       	ldi	r30, 0x40	; 64
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	89 2f       	mov	r24, r25
     fae:	99 27       	eor	r25, r25
     fb0:	80 83       	st	Z, r24
UBRRL = Rate;
     fb2:	e9 e2       	ldi	r30, 0x29	; 41
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	80 83       	st	Z, r24
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	08 95       	ret

00000fd0 <UART_sendByte>:
 * @param[in]  data Type uint8
 * @param[out] none
 * @return none
 */
void UART_sendByte(uint8 data)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
#if (TRANSMITTER_MODE == POLLING_MODE)
while(BIT_IS_CLEAR(UCSRA,UDRE));
     fdc:	eb e2       	ldi	r30, 0x2B	; 43
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 72       	andi	r24, 0x20	; 32
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	b9 f3       	breq	.-18     	; 0xfdc <UART_sendByte+0xc>
#endif
UDR=data;
     fee:	ec e2       	ldi	r30, 0x2C	; 44
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	80 83       	st	Z, r24
}
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <UART_recieveByte>:
 * @param[out] none
 * @return uint8
 */
#if (RECIEVER_MODE == POLLING_MODE)
uint8 UART_recieveByte(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1006:	eb e2       	ldi	r30, 0x2B	; 43
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	dc f7       	brge	.-10     	; 0x1006 <UART_recieveByte+0x8>
	return UDR;
    1010:	ec e2       	ldi	r30, 0x2C	; 44
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <UART_sendString>:
 * @param[in]  Str Type uint8
 * @param[out] none
 * @return none
 */
void UART_sendString(const uint8 *Str)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <UART_sendString+0x6>
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9b 83       	std	Y+3, r25	; 0x03
    102a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    102c:	19 82       	std	Y+1, r1	; 0x01
    102e:	0e c0       	rjmp	.+28     	; 0x104c <UART_sendString+0x30>
while(Str[i]!='\0')
{
	UART_sendByte(Str[i]);
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	fc 01       	movw	r30, r24
    103c:	e2 0f       	add	r30, r18
    103e:	f3 1f       	adc	r31, r19
    1040:	80 81       	ld	r24, Z
    1042:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
	i++;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	8f 5f       	subi	r24, 0xFF	; 255
    104a:	89 83       	std	Y+1, r24	; 0x01
 * @return none
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i=0;
while(Str[i]!='\0')
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	fc 01       	movw	r30, r24
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	80 81       	ld	r24, Z
    105e:	88 23       	and	r24, r24
    1060:	39 f7       	brne	.-50     	; 0x1030 <UART_sendString+0x14>
{
	UART_sendByte(Str[i]);
	i++;
}
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <UART_recieveString>:
 * @param[out] Str Type Ptr to uint8
 * @return none
 */
#if (RECIEVER_MODE == POLLING_MODE)
void UART_recieveString(uint8 *Str)
{
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <UART_recieveString+0xa>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9b 83       	std	Y+3, r25	; 0x03
    1080:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1082:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the whole string until the '#' */
do
{
	Str[i] = UART_recieveByte();
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	8c 01       	movw	r16, r24
    1090:	02 0f       	add	r16, r18
    1092:	13 1f       	adc	r17, r19
    1094:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    1098:	f8 01       	movw	r30, r16
    109a:	80 83       	st	Z, r24
	i++;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	89 83       	std	Y+1, r24	; 0x01

}while(Str[i-1] != '#');
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9c 01       	movw	r18, r24
    10aa:	21 50       	subi	r18, 0x01	; 1
    10ac:	30 40       	sbci	r19, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	fc 01       	movw	r30, r24
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	80 81       	ld	r24, Z
    10ba:	83 32       	cpi	r24, 0x23	; 35
    10bc:	19 f7       	brne	.-58     	; 0x1084 <UART_recieveString+0x16>
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i-1] = '\0';
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9c 01       	movw	r18, r24
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	30 40       	sbci	r19, 0x00	; 0
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	fc 01       	movw	r30, r24
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	10 82       	st	Z, r1
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <TWI_init>:

/* ===================================================================================================
									  Function Definition
   ===================================================================================================*/
void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <TWI_init+0x6>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01

    TWBR = Config_Ptr->bit_rate;
    10f4:	a0 e2       	ldi	r26, 0x20	; 32
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e9 81       	ldd	r30, Y+1	; 0x01
    10fa:	fa 81       	ldd	r31, Y+2	; 0x02
    10fc:	81 81       	ldd	r24, Z+1	; 0x01
    10fe:	8c 93       	st	X, r24
	TWSR = (TWSR & 0xFC) | (Config_Ptr->prescaler);
    1100:	a1 e2       	ldi	r26, 0x21	; 33
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e1 e2       	ldi	r30, 0x21	; 33
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	98 2f       	mov	r25, r24
    110c:	9c 7f       	andi	r25, 0xFC	; 252
    110e:	e9 81       	ldd	r30, Y+1	; 0x01
    1110:	fa 81       	ldd	r31, Y+2	; 0x02
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	89 2b       	or	r24, r25
    1116:	8c 93       	st	X, r24

	TWAR = (TWAR & 0x01) | ( (Config_Ptr->address ) << TWA0);
    1118:	a2 e2       	ldi	r26, 0x22	; 34
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e2 e2       	ldi	r30, 0x22	; 34
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	28 2f       	mov	r18, r24
    1124:	21 70       	andi	r18, 0x01	; 1
    1126:	e9 81       	ldd	r30, Y+1	; 0x01
    1128:	fa 81       	ldd	r31, Y+2	; 0x02
    112a:	80 81       	ld	r24, Z
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	82 2b       	or	r24, r18
    1136:	8c 93       	st	X, r24

    /* enable TWI */
    TWCR = (1<<TWEN);
    1138:	e6 e5       	ldi	r30, 0x56	; 86
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	80 83       	st	Z, r24
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <TWI_start>:

void TWI_start(void)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1152:	e6 e5       	ldi	r30, 0x56	; 86
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	84 ea       	ldi	r24, 0xA4	; 164
    1158:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    115a:	e6 e5       	ldi	r30, 0x56	; 86
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 23       	and	r24, r24
    1162:	dc f7       	brge	.-10     	; 0x115a <TWI_start+0x10>
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <TWI_stop>:

void TWI_stop(void)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1172:	e6 e5       	ldi	r30, 0x56	; 86
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	84 e9       	ldi	r24, 0x94	; 148
    1178:	80 83       	st	Z, r24
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    118c:	e3 e2       	ldi	r30, 0x23	; 35
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1194:	e6 e5       	ldi	r30, 0x56	; 86
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	84 e8       	ldi	r24, 0x84	; 132
    119a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    119c:	e6 e5       	ldi	r30, 0x56	; 86
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	88 23       	and	r24, r24
    11a4:	dc f7       	brge	.-10     	; 0x119c <TWI_writeByte+0x1c>
}
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	84 ec       	ldi	r24, 0xC4	; 196
    11bc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11be:	e6 e5       	ldi	r30, 0x56	; 86
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	88 23       	and	r24, r24
    11c6:	dc f7       	brge	.-10     	; 0x11be <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    11c8:	e3 e2       	ldi	r30, 0x23	; 35
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    11dc:	e6 e5       	ldi	r30, 0x56	; 86
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	84 e8       	ldi	r24, 0x84	; 132
    11e2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11e4:	e6 e5       	ldi	r30, 0x56	; 86
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	88 23       	and	r24, r24
    11ec:	dc f7       	brge	.-10     	; 0x11e4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    11ee:	e3 e2       	ldi	r30, 0x23	; 35
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	0f 92       	push	r0
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1204:	e1 e2       	ldi	r30, 0x21	; 33
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	88 7f       	andi	r24, 0xF8	; 248
    120c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <TIMER_init>:
 * @param[in]  Config_Ptr Type TIMER_ConfigType
 * @param[out] none
 * @return none
 */
void TIMER_init(const TIMER_ConfigType *Config_Ptr)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	2c 97       	sbiw	r28, 0x0c	; 12
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;i<NUMBER_OF_USED_TIMERS;i++)
    1230:	1a 82       	std	Y+2, r1	; 0x02
    1232:	19 82       	std	Y+1, r1	; 0x01
    1234:	84 c6       	rjmp	.+3336   	; 0x1f3e <TIMER_init+0xd26>
	{
	switch(Config_Ptr->Units[i].TimerNum)
    1236:	eb 81       	ldd	r30, Y+3	; 0x03
    1238:	fc 81       	ldd	r31, Y+4	; 0x04
    123a:	40 81       	ld	r20, Z
    123c:	51 81       	ldd	r21, Z+1	; 0x01
    123e:	29 81       	ldd	r18, Y+1	; 0x01
    1240:	3a 81       	ldd	r19, Y+2	; 0x02
    1242:	c9 01       	movw	r24, r18
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	fa 01       	movw	r30, r20
    1256:	e8 0f       	add	r30, r24
    1258:	f9 1f       	adc	r31, r25
    125a:	80 81       	ld	r24, Z
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3c 87       	std	Y+12, r19	; 0x0c
    1262:	2b 87       	std	Y+11, r18	; 0x0b
    1264:	8b 85       	ldd	r24, Y+11	; 0x0b
    1266:	9c 85       	ldd	r25, Y+12	; 0x0c
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	09 f4       	brne	.+2      	; 0x1270 <TIMER_init+0x58>
    126e:	57 c1       	rjmp	.+686    	; 0x151e <TIMER_init+0x306>
    1270:	2b 85       	ldd	r18, Y+11	; 0x0b
    1272:	3c 85       	ldd	r19, Y+12	; 0x0c
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <TIMER_init+0x64>
    127a:	7b c5       	rjmp	.+2806   	; 0x1d72 <TIMER_init+0xb5a>
    127c:	8b 85       	ldd	r24, Y+11	; 0x0b
    127e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	09 f0       	breq	.+2      	; 0x1286 <TIMER_init+0x6e>
    1284:	57 c6       	rjmp	.+3246   	; 0x1f34 <TIMER_init+0xd1c>
	{
	case TIMER0:
	TCCR0 |= Config_Ptr->Units[i].Prescaler;
    1286:	a3 e5       	ldi	r26, 0x53	; 83
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e3 e5       	ldi	r30, 0x53	; 83
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	60 81       	ld	r22, Z
    1290:	eb 81       	ldd	r30, Y+3	; 0x03
    1292:	fc 81       	ldd	r31, Y+4	; 0x04
    1294:	40 81       	ld	r20, Z
    1296:	51 81       	ldd	r21, Z+1	; 0x01
    1298:	29 81       	ldd	r18, Y+1	; 0x01
    129a:	3a 81       	ldd	r19, Y+2	; 0x02
    129c:	c9 01       	movw	r24, r18
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	82 0f       	add	r24, r18
    12ac:	93 1f       	adc	r25, r19
    12ae:	fa 01       	movw	r30, r20
    12b0:	e8 0f       	add	r30, r24
    12b2:	f9 1f       	adc	r31, r25
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
    12b6:	86 2b       	or	r24, r22
    12b8:	8c 93       	st	X, r24
	switch(Config_Ptr->Units[i].Mode)
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	40 81       	ld	r20, Z
    12c0:	51 81       	ldd	r21, Z+1	; 0x01
    12c2:	29 81       	ldd	r18, Y+1	; 0x01
    12c4:	3a 81       	ldd	r19, Y+2	; 0x02
    12c6:	c9 01       	movw	r24, r18
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	fa 01       	movw	r30, r20
    12da:	e8 0f       	add	r30, r24
    12dc:	f9 1f       	adc	r31, r25
    12de:	84 81       	ldd	r24, Z+4	; 0x04
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	3a 87       	std	Y+10, r19	; 0x0a
    12e6:	29 87       	std	Y+9, r18	; 0x09
    12e8:	89 85       	ldd	r24, Y+9	; 0x09
    12ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <TIMER_init+0xdc>
    12f2:	01 c1       	rjmp	.+514    	; 0x14f6 <TIMER_init+0x2de>
    12f4:	29 85       	ldd	r18, Y+9	; 0x09
    12f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	2c f4       	brge	.+10     	; 0x1308 <TIMER_init+0xf0>
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	69 f0       	breq	.+26     	; 0x1320 <TIMER_init+0x108>
    1306:	16 c6       	rjmp	.+3116   	; 0x1f34 <TIMER_init+0xd1c>
    1308:	29 85       	ldd	r18, Y+9	; 0x09
    130a:	3a 85       	ldd	r19, Y+10	; 0x0a
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	e1 f1       	breq	.+120    	; 0x138a <TIMER_init+0x172>
    1312:	89 85       	ldd	r24, Y+9	; 0x09
    1314:	9a 85       	ldd	r25, Y+10	; 0x0a
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <TIMER_init+0x106>
    131c:	a6 c0       	rjmp	.+332    	; 0x146a <TIMER_init+0x252>
    131e:	0a c6       	rjmp	.+3092   	; 0x1f34 <TIMER_init+0xd1c>
	{
	case TIMER0_OVF:
	/* Choose the Normal Mode  */
	CLR_BIT(TCCR0, WGM00);
    1320:	a3 e5       	ldi	r26, 0x53	; 83
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e3 e5       	ldi	r30, 0x53	; 83
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8f 7b       	andi	r24, 0xBF	; 191
    132c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    132e:	a3 e5       	ldi	r26, 0x53	; 83
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e3 e5       	ldi	r30, 0x53	; 83
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	87 7f       	andi	r24, 0xF7	; 247
    133a:	8c 93       	st	X, r24

	TCNT0 = Config_Ptr->Units[i].Initial_value;
    133c:	a2 e5       	ldi	r26, 0x52	; 82
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	eb 81       	ldd	r30, Y+3	; 0x03
    1342:	fc 81       	ldd	r31, Y+4	; 0x04
    1344:	40 81       	ld	r20, Z
    1346:	51 81       	ldd	r21, Z+1	; 0x01
    1348:	29 81       	ldd	r18, Y+1	; 0x01
    134a:	3a 81       	ldd	r19, Y+2	; 0x02
    134c:	c9 01       	movw	r24, r18
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	82 0f       	add	r24, r18
    135c:	93 1f       	adc	r25, r19
    135e:	fa 01       	movw	r30, r20
    1360:	e8 0f       	add	r30, r24
    1362:	f9 1f       	adc	r31, r25
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	8c 93       	st	X, r24

	/* Enabling the Overflow Interrupt Enable */
	TIMSK = (TIMSK & 0xFC) | (1 << TOIE0);
    136a:	a9 e5       	ldi	r26, 0x59	; 89
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e9 e5       	ldi	r30, 0x59	; 89
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8c 7f       	andi	r24, 0xFC	; 252
    1376:	81 60       	ori	r24, 0x01	; 1
    1378:	8c 93       	st	X, r24
	/* Enabling the FOCO As i Choose Non Pwm Mode */
	SET_BIT(TCCR0, FOC0);
    137a:	a3 e5       	ldi	r26, 0x53	; 83
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e3 e5       	ldi	r30, 0x53	; 83
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	80 68       	ori	r24, 0x80	; 128
    1386:	8c 93       	st	X, r24
    1388:	d5 c5       	rjmp	.+2986   	; 0x1f34 <TIMER_init+0xd1c>
	break;

	case  TIMER0_CTC:
	/* Choose the Compare Match Mode */
	CLR_BIT(TCCR0, WGM00);
    138a:	a3 e5       	ldi	r26, 0x53	; 83
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e3 e5       	ldi	r30, 0x53	; 83
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 7b       	andi	r24, 0xBF	; 191
    1396:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1398:	a3 e5       	ldi	r26, 0x53	; 83
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e3 e5       	ldi	r30, 0x53	; 83
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	88 60       	ori	r24, 0x08	; 8
    13a4:	8c 93       	st	X, r24

	TCNT0 = Config_Ptr->Units[i].Initial_value;
    13a6:	a2 e5       	ldi	r26, 0x52	; 82
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	eb 81       	ldd	r30, Y+3	; 0x03
    13ac:	fc 81       	ldd	r31, Y+4	; 0x04
    13ae:	40 81       	ld	r20, Z
    13b0:	51 81       	ldd	r21, Z+1	; 0x01
    13b2:	29 81       	ldd	r18, Y+1	; 0x01
    13b4:	3a 81       	ldd	r19, Y+2	; 0x02
    13b6:	c9 01       	movw	r24, r18
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	82 0f       	add	r24, r18
    13c6:	93 1f       	adc	r25, r19
    13c8:	fa 01       	movw	r30, r20
    13ca:	e8 0f       	add	r30, r24
    13cc:	f9 1f       	adc	r31, r25
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	8c 93       	st	X, r24
	OCR0  = Config_Ptr->Units[i].Compare_value;
    13d4:	ac e5       	ldi	r26, 0x5C	; 92
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	eb 81       	ldd	r30, Y+3	; 0x03
    13da:	fc 81       	ldd	r31, Y+4	; 0x04
    13dc:	40 81       	ld	r20, Z
    13de:	51 81       	ldd	r21, Z+1	; 0x01
    13e0:	29 81       	ldd	r18, Y+1	; 0x01
    13e2:	3a 81       	ldd	r19, Y+2	; 0x02
    13e4:	c9 01       	movw	r24, r18
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	fa 01       	movw	r30, r20
    13f8:	e8 0f       	add	r30, r24
    13fa:	f9 1f       	adc	r31, r25
    13fc:	87 81       	ldd	r24, Z+7	; 0x07
    13fe:	90 85       	ldd	r25, Z+8	; 0x08
    1400:	8c 93       	st	X, r24

	/* Choose the OCO State in CTC */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Units[i].CtcMode)<<COM00) ;
    1402:	a3 e5       	ldi	r26, 0x53	; 83
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e3 e5       	ldi	r30, 0x53	; 83
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	68 2f       	mov	r22, r24
    140e:	6f 7c       	andi	r22, 0xCF	; 207
    1410:	eb 81       	ldd	r30, Y+3	; 0x03
    1412:	fc 81       	ldd	r31, Y+4	; 0x04
    1414:	40 81       	ld	r20, Z
    1416:	51 81       	ldd	r21, Z+1	; 0x01
    1418:	29 81       	ldd	r18, Y+1	; 0x01
    141a:	3a 81       	ldd	r19, Y+2	; 0x02
    141c:	c9 01       	movw	r24, r18
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	82 0f       	add	r24, r18
    142c:	93 1f       	adc	r25, r19
    142e:	fa 01       	movw	r30, r20
    1430:	e8 0f       	add	r30, r24
    1432:	f9 1f       	adc	r31, r25
    1434:	86 81       	ldd	r24, Z+6	; 0x06
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	82 95       	swap	r24
    143c:	92 95       	swap	r25
    143e:	90 7f       	andi	r25, 0xF0	; 240
    1440:	98 27       	eor	r25, r24
    1442:	80 7f       	andi	r24, 0xF0	; 240
    1444:	98 27       	eor	r25, r24
    1446:	86 2b       	or	r24, r22
    1448:	8c 93       	st	X, r24

	/* Enabling the CTC Interrupt Enable */
	TIMSK = (TIMSK & 0xFC) | (1 << OCIE0);
    144a:	a9 e5       	ldi	r26, 0x59	; 89
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e9 e5       	ldi	r30, 0x59	; 89
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8c 7f       	andi	r24, 0xFC	; 252
    1456:	82 60       	ori	r24, 0x02	; 2
    1458:	8c 93       	st	X, r24
	/* Enabling the FOCO As To Choose Non Pwm Mode */
	SET_BIT(TCCR0, FOC0);
    145a:	a3 e5       	ldi	r26, 0x53	; 83
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e3 e5       	ldi	r30, 0x53	; 83
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 68       	ori	r24, 0x80	; 128
    1466:	8c 93       	st	X, r24
    1468:	65 c5       	rjmp	.+2762   	; 0x1f34 <TIMER_init+0xd1c>
	break;

	case  TIMER0_FAST_PWM:
	/* Choose the FAST PWM */
	SET_BIT(TCCR0, WGM00);
    146a:	a3 e5       	ldi	r26, 0x53	; 83
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e3 e5       	ldi	r30, 0x53	; 83
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 64       	ori	r24, 0x40	; 64
    1476:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1478:	a3 e5       	ldi	r26, 0x53	; 83
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e3 e5       	ldi	r30, 0x53	; 83
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	88 60       	ori	r24, 0x08	; 8
    1484:	8c 93       	st	X, r24

	/* Choose the Fast Pwm Working Mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Units[i].PwmMode)<<COM00) ;
    1486:	a3 e5       	ldi	r26, 0x53	; 83
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e3 e5       	ldi	r30, 0x53	; 83
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	68 2f       	mov	r22, r24
    1492:	6f 7c       	andi	r22, 0xCF	; 207
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	40 81       	ld	r20, Z
    149a:	51 81       	ldd	r21, Z+1	; 0x01
    149c:	29 81       	ldd	r18, Y+1	; 0x01
    149e:	3a 81       	ldd	r19, Y+2	; 0x02
    14a0:	c9 01       	movw	r24, r18
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	fa 01       	movw	r30, r20
    14b4:	e8 0f       	add	r30, r24
    14b6:	f9 1f       	adc	r31, r25
    14b8:	85 81       	ldd	r24, Z+5	; 0x05
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	82 95       	swap	r24
    14c0:	92 95       	swap	r25
    14c2:	90 7f       	andi	r25, 0xF0	; 240
    14c4:	98 27       	eor	r25, r24
    14c6:	80 7f       	andi	r24, 0xF0	; 240
    14c8:	98 27       	eor	r25, r24
    14ca:	86 2b       	or	r24, r22
    14cc:	8c 93       	st	X, r24

	/* Disabling the CTC , Overflow Interrupt Enable */
	TIMSK = (TIMSK & 0xFC);
    14ce:	a9 e5       	ldi	r26, 0x59	; 89
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e9 e5       	ldi	r30, 0x59	; 89
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8c 7f       	andi	r24, 0xFC	; 252
    14da:	8c 93       	st	X, r24

	/* Disabling the FOCO As To Choose a Pwm Mode */
	CLR_BIT(TCCR0, FOC0);
    14dc:	a3 e5       	ldi	r26, 0x53	; 83
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e3 e5       	ldi	r30, 0x53	; 83
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 77       	andi	r24, 0x7F	; 127
    14e8:	8c 93       	st	X, r24

	/* Defining OC0 Pin As an Output */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	63 e0       	ldi	r22, 0x03	; 3
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
    14f4:	1f c5       	rjmp	.+2622   	; 0x1f34 <TIMER_init+0xd1c>
	break;

	case TIMER0_PHASE_PWM:
	/* Choose the PHASE PWM Mode */
	SET_BIT(TCCR0, WGM00);
    14f6:	a3 e5       	ldi	r26, 0x53	; 83
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e3 e5       	ldi	r30, 0x53	; 83
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 64       	ori	r24, 0x40	; 64
    1502:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    1504:	a3 e5       	ldi	r26, 0x53	; 83
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e3 e5       	ldi	r30, 0x53	; 83
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	87 7f       	andi	r24, 0xF7	; 247
    1510:	8c 93       	st	X, r24

	/* Defining OC0 Pin As an Output */
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_OUTPUT);
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	63 e0       	ldi	r22, 0x03	; 3
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
    151c:	0b c5       	rjmp	.+2582   	; 0x1f34 <TIMER_init+0xd1c>
	}

	break;
	case TIMER1:

		TCCR1B |= Config_Ptr->Units[i].Prescaler;
    151e:	ae e4       	ldi	r26, 0x4E	; 78
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	ee e4       	ldi	r30, 0x4E	; 78
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	60 81       	ld	r22, Z
    1528:	eb 81       	ldd	r30, Y+3	; 0x03
    152a:	fc 81       	ldd	r31, Y+4	; 0x04
    152c:	40 81       	ld	r20, Z
    152e:	51 81       	ldd	r21, Z+1	; 0x01
    1530:	29 81       	ldd	r18, Y+1	; 0x01
    1532:	3a 81       	ldd	r19, Y+2	; 0x02
    1534:	c9 01       	movw	r24, r18
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	82 0f       	add	r24, r18
    1544:	93 1f       	adc	r25, r19
    1546:	fa 01       	movw	r30, r20
    1548:	e8 0f       	add	r30, r24
    154a:	f9 1f       	adc	r31, r25
    154c:	81 81       	ldd	r24, Z+1	; 0x01
    154e:	86 2b       	or	r24, r22
    1550:	8c 93       	st	X, r24
		Timer1_Mode = Config_Ptr->Units[i].Mode;
    1552:	eb 81       	ldd	r30, Y+3	; 0x03
    1554:	fc 81       	ldd	r31, Y+4	; 0x04
    1556:	40 81       	ld	r20, Z
    1558:	51 81       	ldd	r21, Z+1	; 0x01
    155a:	29 81       	ldd	r18, Y+1	; 0x01
    155c:	3a 81       	ldd	r19, Y+2	; 0x02
    155e:	c9 01       	movw	r24, r18
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	82 0f       	add	r24, r18
    156e:	93 1f       	adc	r25, r19
    1570:	fa 01       	movw	r30, r20
    1572:	e8 0f       	add	r30, r24
    1574:	f9 1f       	adc	r31, r25
    1576:	84 81       	ldd	r24, Z+4	; 0x04
    1578:	80 93 9d 01 	sts	0x019D, r24

		switch(Config_Ptr->Units[i].Mode)
    157c:	eb 81       	ldd	r30, Y+3	; 0x03
    157e:	fc 81       	ldd	r31, Y+4	; 0x04
    1580:	40 81       	ld	r20, Z
    1582:	51 81       	ldd	r21, Z+1	; 0x01
    1584:	29 81       	ldd	r18, Y+1	; 0x01
    1586:	3a 81       	ldd	r19, Y+2	; 0x02
    1588:	c9 01       	movw	r24, r18
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	82 0f       	add	r24, r18
    1598:	93 1f       	adc	r25, r19
    159a:	fa 01       	movw	r30, r20
    159c:	e8 0f       	add	r30, r24
    159e:	f9 1f       	adc	r31, r25
    15a0:	84 81       	ldd	r24, Z+4	; 0x04
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	38 87       	std	Y+8, r19	; 0x08
    15a8:	2f 83       	std	Y+7, r18	; 0x07
    15aa:	8f 81       	ldd	r24, Y+7	; 0x07
    15ac:	98 85       	ldd	r25, Y+8	; 0x08
    15ae:	86 30       	cpi	r24, 0x06	; 6
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <TIMER_init+0x39e>
    15b4:	93 c1       	rjmp	.+806    	; 0x18dc <TIMER_init+0x6c4>
    15b6:	2f 81       	ldd	r18, Y+7	; 0x07
    15b8:	38 85       	ldd	r19, Y+8	; 0x08
    15ba:	27 30       	cpi	r18, 0x07	; 7
    15bc:	31 05       	cpc	r19, r1
    15be:	8c f4       	brge	.+34     	; 0x15e2 <TIMER_init+0x3ca>
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	84 30       	cpi	r24, 0x04	; 4
    15c6:	91 05       	cpc	r25, r1
    15c8:	09 f4       	brne	.+2      	; 0x15cc <TIMER_init+0x3b4>
    15ca:	76 c0       	rjmp	.+236    	; 0x16b8 <TIMER_init+0x4a0>
    15cc:	2f 81       	ldd	r18, Y+7	; 0x07
    15ce:	38 85       	ldd	r19, Y+8	; 0x08
    15d0:	25 30       	cpi	r18, 0x05	; 5
    15d2:	31 05       	cpc	r19, r1
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <TIMER_init+0x3c0>
    15d6:	18 c1       	rjmp	.+560    	; 0x1808 <TIMER_init+0x5f0>
    15d8:	8f 81       	ldd	r24, Y+7	; 0x07
    15da:	98 85       	ldd	r25, Y+8	; 0x08
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	01 f1       	breq	.+64     	; 0x1620 <TIMER_init+0x408>
    15e0:	a9 c4       	rjmp	.+2386   	; 0x1f34 <TIMER_init+0xd1c>
    15e2:	2f 81       	ldd	r18, Y+7	; 0x07
    15e4:	38 85       	ldd	r19, Y+8	; 0x08
    15e6:	2c 30       	cpi	r18, 0x0C	; 12
    15e8:	31 05       	cpc	r19, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <TIMER_init+0x3d6>
    15ec:	4b c2       	rjmp	.+1174   	; 0x1a84 <TIMER_init+0x86c>
    15ee:	8f 81       	ldd	r24, Y+7	; 0x07
    15f0:	98 85       	ldd	r25, Y+8	; 0x08
    15f2:	8d 30       	cpi	r24, 0x0D	; 13
    15f4:	91 05       	cpc	r25, r1
    15f6:	3c f4       	brge	.+14     	; 0x1606 <TIMER_init+0x3ee>
    15f8:	2f 81       	ldd	r18, Y+7	; 0x07
    15fa:	38 85       	ldd	r19, Y+8	; 0x08
    15fc:	27 30       	cpi	r18, 0x07	; 7
    15fe:	31 05       	cpc	r19, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <TIMER_init+0x3ec>
    1602:	d6 c1       	rjmp	.+940    	; 0x19b0 <TIMER_init+0x798>
    1604:	97 c4       	rjmp	.+2350   	; 0x1f34 <TIMER_init+0xd1c>
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	98 85       	ldd	r25, Y+8	; 0x08
    160a:	8e 30       	cpi	r24, 0x0E	; 14
    160c:	91 05       	cpc	r25, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <TIMER_init+0x3fa>
    1610:	e1 c2       	rjmp	.+1474   	; 0x1bd4 <TIMER_init+0x9bc>
    1612:	2f 81       	ldd	r18, Y+7	; 0x07
    1614:	38 85       	ldd	r19, Y+8	; 0x08
    1616:	2f 30       	cpi	r18, 0x0F	; 15
    1618:	31 05       	cpc	r19, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <TIMER_init+0x406>
    161c:	40 c3       	rjmp	.+1664   	; 0x1c9e <TIMER_init+0xa86>
    161e:	8a c4       	rjmp	.+2324   	; 0x1f34 <TIMER_init+0xd1c>
		{
		case TIMER1_OVF:
		/* Choose the Mode */
		CLR_BIT(TCCR1A, WGM10);
    1620:	af e4       	ldi	r26, 0x4F	; 79
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	ef e4       	ldi	r30, 0x4F	; 79
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8e 7f       	andi	r24, 0xFE	; 254
    162c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    162e:	af e4       	ldi	r26, 0x4F	; 79
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e4       	ldi	r30, 0x4F	; 79
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8d 7f       	andi	r24, 0xFD	; 253
    163a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM12);
    163c:	ae e4       	ldi	r26, 0x4E	; 78
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ee e4       	ldi	r30, 0x4E	; 78
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	87 7f       	andi	r24, 0xF7	; 247
    1648:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    164a:	ae e4       	ldi	r26, 0x4E	; 78
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ee e4       	ldi	r30, 0x4E	; 78
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8f 7e       	andi	r24, 0xEF	; 239
    1656:	8c 93       	st	X, r24

		TCNT1 = Config_Ptr->Units[i].Initial_value;
    1658:	ac e4       	ldi	r26, 0x4C	; 76
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	eb 81       	ldd	r30, Y+3	; 0x03
    165e:	fc 81       	ldd	r31, Y+4	; 0x04
    1660:	40 81       	ld	r20, Z
    1662:	51 81       	ldd	r21, Z+1	; 0x01
    1664:	29 81       	ldd	r18, Y+1	; 0x01
    1666:	3a 81       	ldd	r19, Y+2	; 0x02
    1668:	c9 01       	movw	r24, r18
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	82 0f       	add	r24, r18
    1678:	93 1f       	adc	r25, r19
    167a:	fa 01       	movw	r30, r20
    167c:	e8 0f       	add	r30, r24
    167e:	f9 1f       	adc	r31, r25
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	11 96       	adiw	r26, 0x01	; 1
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    168a:	af e4       	ldi	r26, 0x4F	; 79
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ef e4       	ldi	r30, 0x4F	; 79
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 60       	ori	r24, 0x08	; 8
    1696:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    1698:	af e4       	ldi	r26, 0x4F	; 79
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ef e4       	ldi	r30, 0x4F	; 79
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	84 60       	ori	r24, 0x04	; 4
    16a4:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << TOIE1);
    16a6:	a9 e5       	ldi	r26, 0x59	; 89
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e9 e5       	ldi	r30, 0x59	; 89
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	83 7e       	andi	r24, 0xE3	; 227
    16b2:	84 60       	ori	r24, 0x04	; 4
    16b4:	8c 93       	st	X, r24
    16b6:	3e c4       	rjmp	.+2172   	; 0x1f34 <TIMER_init+0xd1c>

		break;
		case  TIMER1_CTC_OCR:
		/* Choose the CTC Mode With OCR */
		CLR_BIT(TCCR1A, WGM10);
    16b8:	af e4       	ldi	r26, 0x4F	; 79
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ef e4       	ldi	r30, 0x4F	; 79
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8e 7f       	andi	r24, 0xFE	; 254
    16c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    16c6:	af e4       	ldi	r26, 0x4F	; 79
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ef e4       	ldi	r30, 0x4F	; 79
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8d 7f       	andi	r24, 0xFD	; 253
    16d2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    16d4:	ae e4       	ldi	r26, 0x4E	; 78
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ee e4       	ldi	r30, 0x4E	; 78
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 60       	ori	r24, 0x08	; 8
    16e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    16e2:	ae e4       	ldi	r26, 0x4E	; 78
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ee e4       	ldi	r30, 0x4E	; 78
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8f 7e       	andi	r24, 0xEF	; 239
    16ee:	8c 93       	st	X, r24

		TCNT1 = Config_Ptr->Units[i].Initial_value;
    16f0:	ac e4       	ldi	r26, 0x4C	; 76
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	eb 81       	ldd	r30, Y+3	; 0x03
    16f6:	fc 81       	ldd	r31, Y+4	; 0x04
    16f8:	40 81       	ld	r20, Z
    16fa:	51 81       	ldd	r21, Z+1	; 0x01
    16fc:	29 81       	ldd	r18, Y+1	; 0x01
    16fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1700:	c9 01       	movw	r24, r18
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	82 0f       	add	r24, r18
    1710:	93 1f       	adc	r25, r19
    1712:	fa 01       	movw	r30, r20
    1714:	e8 0f       	add	r30, r24
    1716:	f9 1f       	adc	r31, r25
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	9c 93       	st	X, r25
    1720:	8e 93       	st	-X, r24
		OCR1A = Config_Ptr->Units[i].Compare_value;
    1722:	aa e4       	ldi	r26, 0x4A	; 74
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	eb 81       	ldd	r30, Y+3	; 0x03
    1728:	fc 81       	ldd	r31, Y+4	; 0x04
    172a:	40 81       	ld	r20, Z
    172c:	51 81       	ldd	r21, Z+1	; 0x01
    172e:	29 81       	ldd	r18, Y+1	; 0x01
    1730:	3a 81       	ldd	r19, Y+2	; 0x02
    1732:	c9 01       	movw	r24, r18
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	82 0f       	add	r24, r18
    1742:	93 1f       	adc	r25, r19
    1744:	fa 01       	movw	r30, r20
    1746:	e8 0f       	add	r30, r24
    1748:	f9 1f       	adc	r31, r25
    174a:	87 81       	ldd	r24, Z+7	; 0x07
    174c:	90 85       	ldd	r25, Z+8	; 0x08
    174e:	11 96       	adiw	r26, 0x01	; 1
    1750:	9c 93       	st	X, r25
    1752:	8e 93       	st	-X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    1754:	af e4       	ldi	r26, 0x4F	; 79
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ef e4       	ldi	r30, 0x4F	; 79
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	88 60       	ori	r24, 0x08	; 8
    1760:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    1762:	af e4       	ldi	r26, 0x4F	; 79
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	ef e4       	ldi	r30, 0x4F	; 79
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	84 60       	ori	r24, 0x04	; 4
    176e:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << OCIE1A);
    1770:	a9 e5       	ldi	r26, 0x59	; 89
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e9 e5       	ldi	r30, 0x59	; 89
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	83 7e       	andi	r24, 0xE3	; 227
    177c:	80 61       	ori	r24, 0x10	; 16
    177e:	8c 93       	st	X, r24

		/* Choose the OC1A , OC1B State in CTC */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].CtcMode)<<COM1B0) | ((Config_Ptr->Units[i].CtcMode)<<COM1A0);
    1780:	af e4       	ldi	r26, 0x4F	; 79
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e3 e5       	ldi	r30, 0x53	; 83
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	68 2f       	mov	r22, r24
    178c:	6f 70       	andi	r22, 0x0F	; 15
    178e:	eb 81       	ldd	r30, Y+3	; 0x03
    1790:	fc 81       	ldd	r31, Y+4	; 0x04
    1792:	40 81       	ld	r20, Z
    1794:	51 81       	ldd	r21, Z+1	; 0x01
    1796:	29 81       	ldd	r18, Y+1	; 0x01
    1798:	3a 81       	ldd	r19, Y+2	; 0x02
    179a:	c9 01       	movw	r24, r18
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	82 0f       	add	r24, r18
    17aa:	93 1f       	adc	r25, r19
    17ac:	fa 01       	movw	r30, r20
    17ae:	e8 0f       	add	r30, r24
    17b0:	f9 1f       	adc	r31, r25
    17b2:	86 81       	ldd	r24, Z+6	; 0x06
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	82 95       	swap	r24
    17ba:	92 95       	swap	r25
    17bc:	90 7f       	andi	r25, 0xF0	; 240
    17be:	98 27       	eor	r25, r24
    17c0:	80 7f       	andi	r24, 0xF0	; 240
    17c2:	98 27       	eor	r25, r24
    17c4:	68 2b       	or	r22, r24
    17c6:	eb 81       	ldd	r30, Y+3	; 0x03
    17c8:	fc 81       	ldd	r31, Y+4	; 0x04
    17ca:	40 81       	ld	r20, Z
    17cc:	51 81       	ldd	r21, Z+1	; 0x01
    17ce:	29 81       	ldd	r18, Y+1	; 0x01
    17d0:	3a 81       	ldd	r19, Y+2	; 0x02
    17d2:	c9 01       	movw	r24, r18
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	82 0f       	add	r24, r18
    17e2:	93 1f       	adc	r25, r19
    17e4:	fa 01       	movw	r30, r20
    17e6:	e8 0f       	add	r30, r24
    17e8:	f9 1f       	adc	r31, r25
    17ea:	86 81       	ldd	r24, Z+6	; 0x06
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	00 24       	eor	r0, r0
    17f2:	96 95       	lsr	r25
    17f4:	87 95       	ror	r24
    17f6:	07 94       	ror	r0
    17f8:	96 95       	lsr	r25
    17fa:	87 95       	ror	r24
    17fc:	07 94       	ror	r0
    17fe:	98 2f       	mov	r25, r24
    1800:	80 2d       	mov	r24, r0
    1802:	86 2b       	or	r24, r22
    1804:	8c 93       	st	X, r24
    1806:	96 c3       	rjmp	.+1836   	; 0x1f34 <TIMER_init+0xd1c>
		break;

		case   TIMER1_FAST_PWM_8BIT :
		/* Choose the Fast Pwm With 8bit Range */
		SET_BIT(TCCR1A, WGM10);
    1808:	af e4       	ldi	r26, 0x4F	; 79
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ef e4       	ldi	r30, 0x4F	; 79
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	81 60       	ori	r24, 0x01	; 1
    1814:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    1816:	af e4       	ldi	r26, 0x4F	; 79
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ef e4       	ldi	r30, 0x4F	; 79
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	8d 7f       	andi	r24, 0xFD	; 253
    1822:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    1824:	ae e4       	ldi	r26, 0x4E	; 78
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ee e4       	ldi	r30, 0x4E	; 78
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	88 60       	ori	r24, 0x08	; 8
    1830:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    1832:	ae e4       	ldi	r26, 0x4E	; 78
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ee e4       	ldi	r30, 0x4E	; 78
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8f 7e       	andi	r24, 0xEF	; 239
    183e:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    1840:	af e4       	ldi	r26, 0x4F	; 79
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e3 e5       	ldi	r30, 0x53	; 83
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	68 2f       	mov	r22, r24
    184c:	6f 70       	andi	r22, 0x0F	; 15
    184e:	eb 81       	ldd	r30, Y+3	; 0x03
    1850:	fc 81       	ldd	r31, Y+4	; 0x04
    1852:	40 81       	ld	r20, Z
    1854:	51 81       	ldd	r21, Z+1	; 0x01
    1856:	29 81       	ldd	r18, Y+1	; 0x01
    1858:	3a 81       	ldd	r19, Y+2	; 0x02
    185a:	c9 01       	movw	r24, r18
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	82 0f       	add	r24, r18
    186a:	93 1f       	adc	r25, r19
    186c:	fa 01       	movw	r30, r20
    186e:	e8 0f       	add	r30, r24
    1870:	f9 1f       	adc	r31, r25
    1872:	85 81       	ldd	r24, Z+5	; 0x05
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	82 95       	swap	r24
    187a:	92 95       	swap	r25
    187c:	90 7f       	andi	r25, 0xF0	; 240
    187e:	98 27       	eor	r25, r24
    1880:	80 7f       	andi	r24, 0xF0	; 240
    1882:	98 27       	eor	r25, r24
    1884:	68 2b       	or	r22, r24
    1886:	eb 81       	ldd	r30, Y+3	; 0x03
    1888:	fc 81       	ldd	r31, Y+4	; 0x04
    188a:	40 81       	ld	r20, Z
    188c:	51 81       	ldd	r21, Z+1	; 0x01
    188e:	29 81       	ldd	r18, Y+1	; 0x01
    1890:	3a 81       	ldd	r19, Y+2	; 0x02
    1892:	c9 01       	movw	r24, r18
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
    18a4:	fa 01       	movw	r30, r20
    18a6:	e8 0f       	add	r30, r24
    18a8:	f9 1f       	adc	r31, r25
    18aa:	85 81       	ldd	r24, Z+5	; 0x05
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	00 24       	eor	r0, r0
    18b2:	96 95       	lsr	r25
    18b4:	87 95       	ror	r24
    18b6:	07 94       	ror	r0
    18b8:	96 95       	lsr	r25
    18ba:	87 95       	ror	r24
    18bc:	07 94       	ror	r0
    18be:	98 2f       	mov	r25, r24
    18c0:	80 2d       	mov	r24, r0
    18c2:	86 2b       	or	r24, r22
    18c4:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	64 e0       	ldi	r22, 0x04	; 4
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	65 e0       	ldi	r22, 0x05	; 5
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
    18da:	2c c3       	rjmp	.+1624   	; 0x1f34 <TIMER_init+0xd1c>
		break;

		case    TIMER1_FAST_PWM_9BIT :
		/* Choose the Fast Pwm With 9bit Range */
		CLR_BIT(TCCR1A, WGM10);
    18dc:	af e4       	ldi	r26, 0x4F	; 79
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ef e4       	ldi	r30, 0x4F	; 79
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8e 7f       	andi	r24, 0xFE	; 254
    18e8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    18ea:	af e4       	ldi	r26, 0x4F	; 79
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ef e4       	ldi	r30, 0x4F	; 79
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	82 60       	ori	r24, 0x02	; 2
    18f6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    18f8:	ae e4       	ldi	r26, 0x4E	; 78
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ee e4       	ldi	r30, 0x4E	; 78
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	88 60       	ori	r24, 0x08	; 8
    1904:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    1906:	ae e4       	ldi	r26, 0x4E	; 78
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ee e4       	ldi	r30, 0x4E	; 78
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8f 7e       	andi	r24, 0xEF	; 239
    1912:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    1914:	af e4       	ldi	r26, 0x4F	; 79
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e3 e5       	ldi	r30, 0x53	; 83
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	68 2f       	mov	r22, r24
    1920:	6f 70       	andi	r22, 0x0F	; 15
    1922:	eb 81       	ldd	r30, Y+3	; 0x03
    1924:	fc 81       	ldd	r31, Y+4	; 0x04
    1926:	40 81       	ld	r20, Z
    1928:	51 81       	ldd	r21, Z+1	; 0x01
    192a:	29 81       	ldd	r18, Y+1	; 0x01
    192c:	3a 81       	ldd	r19, Y+2	; 0x02
    192e:	c9 01       	movw	r24, r18
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	82 0f       	add	r24, r18
    193e:	93 1f       	adc	r25, r19
    1940:	fa 01       	movw	r30, r20
    1942:	e8 0f       	add	r30, r24
    1944:	f9 1f       	adc	r31, r25
    1946:	85 81       	ldd	r24, Z+5	; 0x05
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	82 95       	swap	r24
    194e:	92 95       	swap	r25
    1950:	90 7f       	andi	r25, 0xF0	; 240
    1952:	98 27       	eor	r25, r24
    1954:	80 7f       	andi	r24, 0xF0	; 240
    1956:	98 27       	eor	r25, r24
    1958:	68 2b       	or	r22, r24
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	40 81       	ld	r20, Z
    1960:	51 81       	ldd	r21, Z+1	; 0x01
    1962:	29 81       	ldd	r18, Y+1	; 0x01
    1964:	3a 81       	ldd	r19, Y+2	; 0x02
    1966:	c9 01       	movw	r24, r18
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	82 0f       	add	r24, r18
    1976:	93 1f       	adc	r25, r19
    1978:	fa 01       	movw	r30, r20
    197a:	e8 0f       	add	r30, r24
    197c:	f9 1f       	adc	r31, r25
    197e:	85 81       	ldd	r24, Z+5	; 0x05
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	00 24       	eor	r0, r0
    1986:	96 95       	lsr	r25
    1988:	87 95       	ror	r24
    198a:	07 94       	ror	r0
    198c:	96 95       	lsr	r25
    198e:	87 95       	ror	r24
    1990:	07 94       	ror	r0
    1992:	98 2f       	mov	r25, r24
    1994:	80 2d       	mov	r24, r0
    1996:	86 2b       	or	r24, r22
    1998:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	64 e0       	ldi	r22, 0x04	; 4
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	65 e0       	ldi	r22, 0x05	; 5
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
    19ae:	c2 c2       	rjmp	.+1412   	; 0x1f34 <TIMER_init+0xd1c>
		break;

		case    TIMER1_FAST_PWM_10BIT :
		/* Choose the Fast Pwm With 10bit Range */
		SET_BIT(TCCR1A, WGM10);
    19b0:	af e4       	ldi	r26, 0x4F	; 79
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ef e4       	ldi	r30, 0x4F	; 79
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	81 60       	ori	r24, 0x01	; 1
    19bc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    19be:	af e4       	ldi	r26, 0x4F	; 79
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	ef e4       	ldi	r30, 0x4F	; 79
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	82 60       	ori	r24, 0x02	; 2
    19ca:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    19cc:	ae e4       	ldi	r26, 0x4E	; 78
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ee e4       	ldi	r30, 0x4E	; 78
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	88 60       	ori	r24, 0x08	; 8
    19d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    19da:	ae e4       	ldi	r26, 0x4E	; 78
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ee e4       	ldi	r30, 0x4E	; 78
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7e       	andi	r24, 0xEF	; 239
    19e6:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    19e8:	af e4       	ldi	r26, 0x4F	; 79
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e3 e5       	ldi	r30, 0x53	; 83
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	68 2f       	mov	r22, r24
    19f4:	6f 70       	andi	r22, 0x0F	; 15
    19f6:	eb 81       	ldd	r30, Y+3	; 0x03
    19f8:	fc 81       	ldd	r31, Y+4	; 0x04
    19fa:	40 81       	ld	r20, Z
    19fc:	51 81       	ldd	r21, Z+1	; 0x01
    19fe:	29 81       	ldd	r18, Y+1	; 0x01
    1a00:	3a 81       	ldd	r19, Y+2	; 0x02
    1a02:	c9 01       	movw	r24, r18
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	82 0f       	add	r24, r18
    1a12:	93 1f       	adc	r25, r19
    1a14:	fa 01       	movw	r30, r20
    1a16:	e8 0f       	add	r30, r24
    1a18:	f9 1f       	adc	r31, r25
    1a1a:	85 81       	ldd	r24, Z+5	; 0x05
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	82 95       	swap	r24
    1a22:	92 95       	swap	r25
    1a24:	90 7f       	andi	r25, 0xF0	; 240
    1a26:	98 27       	eor	r25, r24
    1a28:	80 7f       	andi	r24, 0xF0	; 240
    1a2a:	98 27       	eor	r25, r24
    1a2c:	68 2b       	or	r22, r24
    1a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a30:	fc 81       	ldd	r31, Y+4	; 0x04
    1a32:	40 81       	ld	r20, Z
    1a34:	51 81       	ldd	r21, Z+1	; 0x01
    1a36:	29 81       	ldd	r18, Y+1	; 0x01
    1a38:	3a 81       	ldd	r19, Y+2	; 0x02
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	fa 01       	movw	r30, r20
    1a4e:	e8 0f       	add	r30, r24
    1a50:	f9 1f       	adc	r31, r25
    1a52:	85 81       	ldd	r24, Z+5	; 0x05
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	00 24       	eor	r0, r0
    1a5a:	96 95       	lsr	r25
    1a5c:	87 95       	ror	r24
    1a5e:	07 94       	ror	r0
    1a60:	96 95       	lsr	r25
    1a62:	87 95       	ror	r24
    1a64:	07 94       	ror	r0
    1a66:	98 2f       	mov	r25, r24
    1a68:	80 2d       	mov	r24, r0
    1a6a:	86 2b       	or	r24, r22
    1a6c:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	64 e0       	ldi	r22, 0x04	; 4
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	65 e0       	ldi	r22, 0x05	; 5
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
    1a82:	58 c2       	rjmp	.+1200   	; 0x1f34 <TIMER_init+0xd1c>
		break;

		case    TIMER1_CTC_ICR :
		/* Choose the CTC Mode With ICR */
		CLR_BIT(TCCR1A, WGM10);
    1a84:	af e4       	ldi	r26, 0x4F	; 79
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ef e4       	ldi	r30, 0x4F	; 79
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8e 7f       	andi	r24, 0xFE	; 254
    1a90:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    1a92:	af e4       	ldi	r26, 0x4F	; 79
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef e4       	ldi	r30, 0x4F	; 79
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8d 7f       	andi	r24, 0xFD	; 253
    1a9e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    1aa0:	ae e4       	ldi	r26, 0x4E	; 78
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	ee e4       	ldi	r30, 0x4E	; 78
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 60       	ori	r24, 0x08	; 8
    1aac:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    1aae:	ae e4       	ldi	r26, 0x4E	; 78
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	ee e4       	ldi	r30, 0x4E	; 78
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	80 61       	ori	r24, 0x10	; 16
    1aba:	8c 93       	st	X, r24

		TCNT1 = Config_Ptr->Units[i].Initial_value;
    1abc:	ac e4       	ldi	r26, 0x4C	; 76
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ac4:	40 81       	ld	r20, Z
    1ac6:	51 81       	ldd	r21, Z+1	; 0x01
    1ac8:	29 81       	ldd	r18, Y+1	; 0x01
    1aca:	3a 81       	ldd	r19, Y+2	; 0x02
    1acc:	c9 01       	movw	r24, r18
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	82 0f       	add	r24, r18
    1adc:	93 1f       	adc	r25, r19
    1ade:	fa 01       	movw	r30, r20
    1ae0:	e8 0f       	add	r30, r24
    1ae2:	f9 1f       	adc	r31, r25
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	9c 93       	st	X, r25
    1aec:	8e 93       	st	-X, r24
		ICR1 = Config_Ptr->Units[i].Compare_value;
    1aee:	a6 e4       	ldi	r26, 0x46	; 70
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	eb 81       	ldd	r30, Y+3	; 0x03
    1af4:	fc 81       	ldd	r31, Y+4	; 0x04
    1af6:	40 81       	ld	r20, Z
    1af8:	51 81       	ldd	r21, Z+1	; 0x01
    1afa:	29 81       	ldd	r18, Y+1	; 0x01
    1afc:	3a 81       	ldd	r19, Y+2	; 0x02
    1afe:	c9 01       	movw	r24, r18
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	82 0f       	add	r24, r18
    1b0e:	93 1f       	adc	r25, r19
    1b10:	fa 01       	movw	r30, r20
    1b12:	e8 0f       	add	r30, r24
    1b14:	f9 1f       	adc	r31, r25
    1b16:	87 81       	ldd	r24, Z+7	; 0x07
    1b18:	90 85       	ldd	r25, Z+8	; 0x08
    1b1a:	11 96       	adiw	r26, 0x01	; 1
    1b1c:	9c 93       	st	X, r25
    1b1e:	8e 93       	st	-X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    1b20:	af e4       	ldi	r26, 0x4F	; 79
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	ef e4       	ldi	r30, 0x4F	; 79
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 60       	ori	r24, 0x08	; 8
    1b2c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    1b2e:	af e4       	ldi	r26, 0x4F	; 79
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ef e4       	ldi	r30, 0x4F	; 79
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	84 60       	ori	r24, 0x04	; 4
    1b3a:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << OCIE1A);
    1b3c:	a9 e5       	ldi	r26, 0x59	; 89
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e9 e5       	ldi	r30, 0x59	; 89
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	83 7e       	andi	r24, 0xE3	; 227
    1b48:	80 61       	ori	r24, 0x10	; 16
    1b4a:	8c 93       	st	X, r24

		/* Choose the OC1A , OC1B State in CTC */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].CtcMode)<<COM1B0) | ((Config_Ptr->Units[i].CtcMode)<<COM1A0);
    1b4c:	af e4       	ldi	r26, 0x4F	; 79
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e3 e5       	ldi	r30, 0x53	; 83
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	68 2f       	mov	r22, r24
    1b58:	6f 70       	andi	r22, 0x0F	; 15
    1b5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b5e:	40 81       	ld	r20, Z
    1b60:	51 81       	ldd	r21, Z+1	; 0x01
    1b62:	29 81       	ldd	r18, Y+1	; 0x01
    1b64:	3a 81       	ldd	r19, Y+2	; 0x02
    1b66:	c9 01       	movw	r24, r18
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	fa 01       	movw	r30, r20
    1b7a:	e8 0f       	add	r30, r24
    1b7c:	f9 1f       	adc	r31, r25
    1b7e:	86 81       	ldd	r24, Z+6	; 0x06
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	82 95       	swap	r24
    1b86:	92 95       	swap	r25
    1b88:	90 7f       	andi	r25, 0xF0	; 240
    1b8a:	98 27       	eor	r25, r24
    1b8c:	80 7f       	andi	r24, 0xF0	; 240
    1b8e:	98 27       	eor	r25, r24
    1b90:	68 2b       	or	r22, r24
    1b92:	eb 81       	ldd	r30, Y+3	; 0x03
    1b94:	fc 81       	ldd	r31, Y+4	; 0x04
    1b96:	40 81       	ld	r20, Z
    1b98:	51 81       	ldd	r21, Z+1	; 0x01
    1b9a:	29 81       	ldd	r18, Y+1	; 0x01
    1b9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9e:	c9 01       	movw	r24, r18
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	82 0f       	add	r24, r18
    1bae:	93 1f       	adc	r25, r19
    1bb0:	fa 01       	movw	r30, r20
    1bb2:	e8 0f       	add	r30, r24
    1bb4:	f9 1f       	adc	r31, r25
    1bb6:	86 81       	ldd	r24, Z+6	; 0x06
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	00 24       	eor	r0, r0
    1bbe:	96 95       	lsr	r25
    1bc0:	87 95       	ror	r24
    1bc2:	07 94       	ror	r0
    1bc4:	96 95       	lsr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	07 94       	ror	r0
    1bca:	98 2f       	mov	r25, r24
    1bcc:	80 2d       	mov	r24, r0
    1bce:	86 2b       	or	r24, r22
    1bd0:	8c 93       	st	X, r24
    1bd2:	b0 c1       	rjmp	.+864    	; 0x1f34 <TIMER_init+0xd1c>
		break;

		case    TIMER1_FAST_PWM_ICR	 :
		/* Choose the Fast Pwm With ICR REG */
		CLR_BIT(TCCR1A, WGM10);
    1bd4:	af e4       	ldi	r26, 0x4F	; 79
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ef e4       	ldi	r30, 0x4F	; 79
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	8e 7f       	andi	r24, 0xFE	; 254
    1be0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    1be2:	af e4       	ldi	r26, 0x4F	; 79
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	ef e4       	ldi	r30, 0x4F	; 79
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	82 60       	ori	r24, 0x02	; 2
    1bee:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    1bf0:	ae e4       	ldi	r26, 0x4E	; 78
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ee e4       	ldi	r30, 0x4E	; 78
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 60       	ori	r24, 0x08	; 8
    1bfc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    1bfe:	ae e4       	ldi	r26, 0x4E	; 78
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	ee e4       	ldi	r30, 0x4E	; 78
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	80 61       	ori	r24, 0x10	; 16
    1c0a:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    1c0c:	af e4       	ldi	r26, 0x4F	; 79
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e3 e5       	ldi	r30, 0x53	; 83
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	68 2f       	mov	r22, r24
    1c18:	6f 70       	andi	r22, 0x0F	; 15
    1c1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c1e:	40 81       	ld	r20, Z
    1c20:	51 81       	ldd	r21, Z+1	; 0x01
    1c22:	29 81       	ldd	r18, Y+1	; 0x01
    1c24:	3a 81       	ldd	r19, Y+2	; 0x02
    1c26:	c9 01       	movw	r24, r18
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	82 0f       	add	r24, r18
    1c36:	93 1f       	adc	r25, r19
    1c38:	fa 01       	movw	r30, r20
    1c3a:	e8 0f       	add	r30, r24
    1c3c:	f9 1f       	adc	r31, r25
    1c3e:	85 81       	ldd	r24, Z+5	; 0x05
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	82 95       	swap	r24
    1c46:	92 95       	swap	r25
    1c48:	90 7f       	andi	r25, 0xF0	; 240
    1c4a:	98 27       	eor	r25, r24
    1c4c:	80 7f       	andi	r24, 0xF0	; 240
    1c4e:	98 27       	eor	r25, r24
    1c50:	68 2b       	or	r22, r24
    1c52:	eb 81       	ldd	r30, Y+3	; 0x03
    1c54:	fc 81       	ldd	r31, Y+4	; 0x04
    1c56:	40 81       	ld	r20, Z
    1c58:	51 81       	ldd	r21, Z+1	; 0x01
    1c5a:	29 81       	ldd	r18, Y+1	; 0x01
    1c5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c5e:	c9 01       	movw	r24, r18
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	fa 01       	movw	r30, r20
    1c72:	e8 0f       	add	r30, r24
    1c74:	f9 1f       	adc	r31, r25
    1c76:	85 81       	ldd	r24, Z+5	; 0x05
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	00 24       	eor	r0, r0
    1c7e:	96 95       	lsr	r25
    1c80:	87 95       	ror	r24
    1c82:	07 94       	ror	r0
    1c84:	96 95       	lsr	r25
    1c86:	87 95       	ror	r24
    1c88:	07 94       	ror	r0
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	80 2d       	mov	r24, r0
    1c8e:	86 2b       	or	r24, r22
    1c90:	8c 93       	st	X, r24

		/* Defining ICR Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
    1c92:	83 e0       	ldi	r24, 0x03	; 3
    1c94:	66 e0       	ldi	r22, 0x06	; 6
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
    1c9c:	4b c1       	rjmp	.+662    	; 0x1f34 <TIMER_init+0xd1c>
		break;

		case	 TIMER1_FAST_PWM_OCR :
		/* Choose the Fast Pwm With 0CR REG */
		SET_BIT(TCCR1A, WGM10);
    1c9e:	af e4       	ldi	r26, 0x4F	; 79
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ef e4       	ldi	r30, 0x4F	; 79
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	81 60       	ori	r24, 0x01	; 1
    1caa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    1cac:	af e4       	ldi	r26, 0x4F	; 79
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ef e4       	ldi	r30, 0x4F	; 79
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	82 60       	ori	r24, 0x02	; 2
    1cb8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    1cba:	ae e4       	ldi	r26, 0x4E	; 78
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	ee e4       	ldi	r30, 0x4E	; 78
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 60       	ori	r24, 0x08	; 8
    1cc6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    1cc8:	ae e4       	ldi	r26, 0x4E	; 78
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	ee e4       	ldi	r30, 0x4E	; 78
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 61       	ori	r24, 0x10	; 16
    1cd4:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    1cd6:	af e4       	ldi	r26, 0x4F	; 79
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e3 e5       	ldi	r30, 0x53	; 83
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	68 2f       	mov	r22, r24
    1ce2:	6f 70       	andi	r22, 0x0F	; 15
    1ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce8:	40 81       	ld	r20, Z
    1cea:	51 81       	ldd	r21, Z+1	; 0x01
    1cec:	29 81       	ldd	r18, Y+1	; 0x01
    1cee:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf0:	c9 01       	movw	r24, r18
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	82 0f       	add	r24, r18
    1d00:	93 1f       	adc	r25, r19
    1d02:	fa 01       	movw	r30, r20
    1d04:	e8 0f       	add	r30, r24
    1d06:	f9 1f       	adc	r31, r25
    1d08:	85 81       	ldd	r24, Z+5	; 0x05
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	82 95       	swap	r24
    1d10:	92 95       	swap	r25
    1d12:	90 7f       	andi	r25, 0xF0	; 240
    1d14:	98 27       	eor	r25, r24
    1d16:	80 7f       	andi	r24, 0xF0	; 240
    1d18:	98 27       	eor	r25, r24
    1d1a:	68 2b       	or	r22, r24
    1d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d20:	40 81       	ld	r20, Z
    1d22:	51 81       	ldd	r21, Z+1	; 0x01
    1d24:	29 81       	ldd	r18, Y+1	; 0x01
    1d26:	3a 81       	ldd	r19, Y+2	; 0x02
    1d28:	c9 01       	movw	r24, r18
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	82 0f       	add	r24, r18
    1d38:	93 1f       	adc	r25, r19
    1d3a:	fa 01       	movw	r30, r20
    1d3c:	e8 0f       	add	r30, r24
    1d3e:	f9 1f       	adc	r31, r25
    1d40:	85 81       	ldd	r24, Z+5	; 0x05
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	00 24       	eor	r0, r0
    1d48:	96 95       	lsr	r25
    1d4a:	87 95       	ror	r24
    1d4c:	07 94       	ror	r0
    1d4e:	96 95       	lsr	r25
    1d50:	87 95       	ror	r24
    1d52:	07 94       	ror	r0
    1d54:	98 2f       	mov	r25, r24
    1d56:	80 2d       	mov	r24, r0
    1d58:	86 2b       	or	r24, r22
    1d5a:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1d5c:	83 e0       	ldi	r24, 0x03	; 3
    1d5e:	64 e0       	ldi	r22, 0x04	; 4
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	65 e0       	ldi	r22, 0x05	; 5
    1d6a:	41 e0       	ldi	r20, 0x01	; 1
    1d6c:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
    1d70:	e1 c0       	rjmp	.+450    	; 0x1f34 <TIMER_init+0xd1c>
		}
		break;

		/*Timer2 initiaillitation*/
	case TIMER2:
		TCCR2 |= Config_Ptr->Units[i].Prescaler;
    1d72:	a5 e4       	ldi	r26, 0x45	; 69
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e5 e4       	ldi	r30, 0x45	; 69
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	60 81       	ld	r22, Z
    1d7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d80:	40 81       	ld	r20, Z
    1d82:	51 81       	ldd	r21, Z+1	; 0x01
    1d84:	29 81       	ldd	r18, Y+1	; 0x01
    1d86:	3a 81       	ldd	r19, Y+2	; 0x02
    1d88:	c9 01       	movw	r24, r18
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	82 0f       	add	r24, r18
    1d98:	93 1f       	adc	r25, r19
    1d9a:	fa 01       	movw	r30, r20
    1d9c:	e8 0f       	add	r30, r24
    1d9e:	f9 1f       	adc	r31, r25
    1da0:	81 81       	ldd	r24, Z+1	; 0x01
    1da2:	86 2b       	or	r24, r22
    1da4:	8c 93       	st	X, r24
		switch(Config_Ptr->Units[i].Mode)
    1da6:	eb 81       	ldd	r30, Y+3	; 0x03
    1da8:	fc 81       	ldd	r31, Y+4	; 0x04
    1daa:	40 81       	ld	r20, Z
    1dac:	51 81       	ldd	r21, Z+1	; 0x01
    1dae:	29 81       	ldd	r18, Y+1	; 0x01
    1db0:	3a 81       	ldd	r19, Y+2	; 0x02
    1db2:	c9 01       	movw	r24, r18
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	82 0f       	add	r24, r18
    1dc2:	93 1f       	adc	r25, r19
    1dc4:	fa 01       	movw	r30, r20
    1dc6:	e8 0f       	add	r30, r24
    1dc8:	f9 1f       	adc	r31, r25
    1dca:	84 81       	ldd	r24, Z+4	; 0x04
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	3e 83       	std	Y+6, r19	; 0x06
    1dd2:	2d 83       	std	Y+5, r18	; 0x05
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	91 05       	cpc	r25, r1
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <TIMER_init+0xbc8>
    1dde:	97 c0       	rjmp	.+302    	; 0x1f0e <TIMER_init+0xcf6>
    1de0:	2d 81       	ldd	r18, Y+5	; 0x05
    1de2:	3e 81       	ldd	r19, Y+6	; 0x06
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <TIMER_init+0xbdc>
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <TIMER_init+0xbf2>
    1df2:	a0 c0       	rjmp	.+320    	; 0x1f34 <TIMER_init+0xd1c>
    1df4:	2d 81       	ldd	r18, Y+5	; 0x05
    1df6:	3e 81       	ldd	r19, Y+6	; 0x06
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	21 f1       	breq	.+72     	; 0x1e46 <TIMER_init+0xc2e>
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	e9 f1       	breq	.+122    	; 0x1e82 <TIMER_init+0xc6a>
    1e08:	95 c0       	rjmp	.+298    	; 0x1f34 <TIMER_init+0xd1c>
			{
			case TIMER2_OVF:
			/* Choose the Normal Mode  */
			CLR_BIT(TCCR2, WGM20);
    1e0a:	a5 e4       	ldi	r26, 0x45	; 69
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e5 e4       	ldi	r30, 0x45	; 69
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	8f 7b       	andi	r24, 0xBF	; 191
    1e16:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, WGM21);
    1e18:	a5 e4       	ldi	r26, 0x45	; 69
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e4       	ldi	r30, 0x45	; 69
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	87 7f       	andi	r24, 0xF7	; 247
    1e24:	8c 93       	st	X, r24

			/* Enabling the Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F) | (1 << TOIE2);
    1e26:	a9 e5       	ldi	r26, 0x59	; 89
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e9 e5       	ldi	r30, 0x59	; 89
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8f 73       	andi	r24, 0x3F	; 63
    1e32:	80 64       	ori	r24, 0x40	; 64
    1e34:	8c 93       	st	X, r24
			/* Enabling the FOC2 As To Choose Non Pwm Mode */
			SET_BIT(TCCR2, FOC2);
    1e36:	a5 e4       	ldi	r26, 0x45	; 69
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e5 e4       	ldi	r30, 0x45	; 69
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 68       	ori	r24, 0x80	; 128
    1e42:	8c 93       	st	X, r24
    1e44:	77 c0       	rjmp	.+238    	; 0x1f34 <TIMER_init+0xd1c>
			break;

			case TIMER2_CTC:
			/* Choose the Compare Match Mode */
			CLR_BIT(TCCR2, WGM20);
    1e46:	a5 e4       	ldi	r26, 0x45	; 69
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e5 e4       	ldi	r30, 0x45	; 69
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 7b       	andi	r24, 0xBF	; 191
    1e52:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    1e54:	a5 e4       	ldi	r26, 0x45	; 69
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e4       	ldi	r30, 0x45	; 69
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 60       	ori	r24, 0x08	; 8
    1e60:	8c 93       	st	X, r24

			/* Enabling the Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F) | (1 << OCIE2);
    1e62:	a9 e5       	ldi	r26, 0x59	; 89
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e9 e5       	ldi	r30, 0x59	; 89
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8f 73       	andi	r24, 0x3F	; 63
    1e6e:	80 68       	ori	r24, 0x80	; 128
    1e70:	8c 93       	st	X, r24
			/* Enabling the FOC2 As To Choose Non Pwm Mode */
			SET_BIT(TCCR2, FOC2);
    1e72:	a5 e4       	ldi	r26, 0x45	; 69
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e5 e4       	ldi	r30, 0x45	; 69
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	80 68       	ori	r24, 0x80	; 128
    1e7e:	8c 93       	st	X, r24
    1e80:	59 c0       	rjmp	.+178    	; 0x1f34 <TIMER_init+0xd1c>
			break;

			case TIMER2_FAST_PWM :
			/* Choose the FAST PWM */
			SET_BIT(TCCR2, WGM20);
    1e82:	a5 e4       	ldi	r26, 0x45	; 69
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e5 e4       	ldi	r30, 0x45	; 69
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 64       	ori	r24, 0x40	; 64
    1e8e:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    1e90:	a5 e4       	ldi	r26, 0x45	; 69
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e4       	ldi	r30, 0x45	; 69
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	88 60       	ori	r24, 0x08	; 8
    1e9c:	8c 93       	st	X, r24

			/* Choose the Fast Pwm Working Mode */
			TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Units[i].PwmMode)<<COM20) ;
    1e9e:	a5 e4       	ldi	r26, 0x45	; 69
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e5 e4       	ldi	r30, 0x45	; 69
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	68 2f       	mov	r22, r24
    1eaa:	6f 7c       	andi	r22, 0xCF	; 207
    1eac:	eb 81       	ldd	r30, Y+3	; 0x03
    1eae:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb0:	40 81       	ld	r20, Z
    1eb2:	51 81       	ldd	r21, Z+1	; 0x01
    1eb4:	29 81       	ldd	r18, Y+1	; 0x01
    1eb6:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb8:	c9 01       	movw	r24, r18
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	82 0f       	add	r24, r18
    1ec8:	93 1f       	adc	r25, r19
    1eca:	fa 01       	movw	r30, r20
    1ecc:	e8 0f       	add	r30, r24
    1ece:	f9 1f       	adc	r31, r25
    1ed0:	85 81       	ldd	r24, Z+5	; 0x05
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	82 95       	swap	r24
    1ed8:	92 95       	swap	r25
    1eda:	90 7f       	andi	r25, 0xF0	; 240
    1edc:	98 27       	eor	r25, r24
    1ede:	80 7f       	andi	r24, 0xF0	; 240
    1ee0:	98 27       	eor	r25, r24
    1ee2:	86 2b       	or	r24, r22
    1ee4:	8c 93       	st	X, r24

			/* Disabling the CTC , Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F);
    1ee6:	a9 e5       	ldi	r26, 0x59	; 89
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e5       	ldi	r30, 0x59	; 89
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	8f 73       	andi	r24, 0x3F	; 63
    1ef2:	8c 93       	st	X, r24

			/* Disabling the FOCO As i Choose a Pwm Mode */
			CLR_BIT(TCCR2, FOC2);
    1ef4:	a5 e4       	ldi	r26, 0x45	; 69
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e4       	ldi	r30, 0x45	; 69
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 77       	andi	r24, 0x7F	; 127
    1f00:	8c 93       	st	X, r24

			/* Defining OC2 Pin As an Output */
			GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	67 e0       	ldi	r22, 0x07	; 7
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
    1f0c:	13 c0       	rjmp	.+38     	; 0x1f34 <TIMER_init+0xd1c>
			break;

		    case TIMER2_PHASE_PWM :
		    /* Choose the Phase PWM */
			SET_BIT(TCCR2, WGM20);
    1f0e:	a5 e4       	ldi	r26, 0x45	; 69
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e5 e4       	ldi	r30, 0x45	; 69
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	80 64       	ori	r24, 0x40	; 64
    1f1a:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, WGM21);
    1f1c:	a5 e4       	ldi	r26, 0x45	; 69
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e5 e4       	ldi	r30, 0x45	; 69
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	87 7f       	andi	r24, 0xF7	; 247
    1f28:	8c 93       	st	X, r24

			/* Defining OC2 Pin As an Output */
			GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	67 e0       	ldi	r22, 0x07	; 7
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
 * @return none
 */
void TIMER_init(const TIMER_ConfigType *Config_Ptr)
{
	int i;
	for(i=0;i<NUMBER_OF_USED_TIMERS;i++)
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	9a 83       	std	Y+2, r25	; 0x02
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	91 05       	cpc	r25, r1
    1f46:	0c f4       	brge	.+2      	; 0x1f4a <TIMER_init+0xd32>
    1f48:	76 c9       	rjmp	.-3348   	; 0x1236 <TIMER_init+0x1e>
		 default :
				 /* Wrong Timer Num */
		 break;
	}
	}
}
    1f4a:	2c 96       	adiw	r28, 0x0c	; 12
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <TIMER_read>:
 *
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @return     Type uint8    The current count value of the specified timer
 */
uint8 TIMER_read(Timer_ID Timer_num)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <TIMER_read+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <TIMER_read+0x8>
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	89 83       	std	Y+1, r24	; 0x01
	/* Read the current count value of the specified timer */
	switch(Timer_num)
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	3c 83       	std	Y+4, r19	; 0x04
    1f72:	2b 83       	std	Y+3, r18	; 0x03
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	71 f0       	breq	.+28     	; 0x1f9a <TIMER_read+0x3e>
    1f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f80:	3c 81       	ldd	r19, Y+4	; 0x04
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	79 f0       	breq	.+30     	; 0x1fa6 <TIMER_read+0x4a>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	81 f4       	brne	.+32     	; 0x1fb0 <TIMER_read+0x54>
	{
		case TIMER0:
			return TCNT0; /* Return the current count value of TIMER0 */
    1f90:	e2 e5       	ldi	r30, 0x52	; 82
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	90 81       	ld	r25, Z
    1f96:	9a 83       	std	Y+2, r25	; 0x02
    1f98:	0c c0       	rjmp	.+24     	; 0x1fb2 <TIMER_read+0x56>
			break;

		case TIMER1:
			return TCNT1; /* Return the current count value of TIMER1 */
    1f9a:	ec e4       	ldi	r30, 0x4C	; 76
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	8a 83       	std	Y+2, r24	; 0x02
    1fa4:	06 c0       	rjmp	.+12     	; 0x1fb2 <TIMER_read+0x56>
			break;

		case TIMER2:
			return TCNT2; /* Return the current count value of TIMER2 */
    1fa6:	e4 e4       	ldi	r30, 0x44	; 68
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	20 81       	ld	r18, Z
    1fac:	2a 83       	std	Y+2, r18	; 0x02
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <TIMER_read+0x56>
			break;

		default:
			/* Wrong Timer Num: Invalid timer number specified */
			return 0;
    1fb0:	1a 82       	std	Y+2, r1	; 0x02
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
			break;
	}
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <TIMER_setPreloadValue>:
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @param[in]  Preload       Type uint16       Range 0 to 65535
 * @return None
 */
void TIMER_setPreloadValue(Timer_ID Timer_num, uint16 Preload)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <TIMER_setPreloadValue+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <TIMER_setPreloadValue+0x8>
    1fca:	0f 92       	push	r0
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	7b 83       	std	Y+3, r23	; 0x03
    1fd4:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the preload value for the specified timer */
	switch(Timer_num)
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	3d 83       	std	Y+5, r19	; 0x05
    1fde:	2c 83       	std	Y+4, r18	; 0x04
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	71 f0       	breq	.+28     	; 0x2006 <TIMER_setPreloadValue+0x44>
    1fea:	2c 81       	ldd	r18, Y+4	; 0x04
    1fec:	3d 81       	ldd	r19, Y+5	; 0x05
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	81 f0       	breq	.+32     	; 0x2014 <TIMER_setPreloadValue+0x52>
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	81 f4       	brne	.+32     	; 0x201c <TIMER_setPreloadValue+0x5a>
	{
		case TIMER0:
			TCNT0 = Preload; /* Set the preload value for TIMER0 */
    1ffc:	e2 e5       	ldi	r30, 0x52	; 82
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	80 83       	st	Z, r24
    2004:	0b c0       	rjmp	.+22     	; 0x201c <TIMER_setPreloadValue+0x5a>
			break;

		case TIMER1:
			TCNT1 = Preload; /* Set the preload value for TIMER1 */
    2006:	ec e4       	ldi	r30, 0x4C	; 76
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
    2012:	04 c0       	rjmp	.+8      	; 0x201c <TIMER_setPreloadValue+0x5a>
			break;

		case TIMER2:
			TCNT2 = Preload; /* Set the preload value for TIMER2 */
    2014:	e4 e4       	ldi	r30, 0x44	; 68
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	80 83       	st	Z, r24

		default:
			/* Wrong Timer Num: Invalid timer number specified */
			break;
	}
}
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <TIMER_setCompareMatch>:
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @param[in]  Value         Type uint16       Range 0 to 65535
 * @return None
 */
void TIMER_setCompareMatch(Timer_ID Timer_num, uint16 Value)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <TIMER_setCompareMatch+0x6>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <TIMER_setCompareMatch+0x8>
    2034:	0f 92       	push	r0
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	7b 83       	std	Y+3, r23	; 0x03
    203e:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the compare match value for the specified timer */
	switch(Timer_num)
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	3d 83       	std	Y+5, r19	; 0x05
    2048:	2c 83       	std	Y+4, r18	; 0x04
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	91 05       	cpc	r25, r1
    2052:	71 f0       	breq	.+28     	; 0x2070 <TIMER_setCompareMatch+0x44>
    2054:	2c 81       	ldd	r18, Y+4	; 0x04
    2056:	3d 81       	ldd	r19, Y+5	; 0x05
    2058:	22 30       	cpi	r18, 0x02	; 2
    205a:	31 05       	cpc	r19, r1
    205c:	f9 f0       	breq	.+62     	; 0x209c <TIMER_setCompareMatch+0x70>
    205e:	8c 81       	ldd	r24, Y+4	; 0x04
    2060:	9d 81       	ldd	r25, Y+5	; 0x05
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	f9 f4       	brne	.+62     	; 0x20a4 <TIMER_setCompareMatch+0x78>
	{
		case TIMER0:
			OCR0 = Value; /* Set the compare match value for TIMER0 */
    2066:	ec e5       	ldi	r30, 0x5C	; 92
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	80 83       	st	Z, r24
    206e:	1a c0       	rjmp	.+52     	; 0x20a4 <TIMER_setCompareMatch+0x78>
			break;

		case TIMER1:
			/* Check the mode of TIMER1 and set the compare match value accordingly */
			if (Timer1_Mode == TIMER1_CTC_OCR)
    2070:	80 91 9d 01 	lds	r24, 0x019D
    2074:	84 30       	cpi	r24, 0x04	; 4
    2076:	39 f4       	brne	.+14     	; 0x2086 <TIMER_setCompareMatch+0x5a>
			{
				OCR1A = Value; /* Set the compare match value for TIMER1 in CTC mode with OCR1A */
    2078:	ea e4       	ldi	r30, 0x4A	; 74
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	80 83       	st	Z, r24
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <TIMER_setCompareMatch+0x78>
			}
			else if (Timer1_Mode == TIMER1_CTC_ICR)
    2086:	80 91 9d 01 	lds	r24, 0x019D
    208a:	8c 30       	cpi	r24, 0x0C	; 12
    208c:	59 f4       	brne	.+22     	; 0x20a4 <TIMER_setCompareMatch+0x78>
			{
				ICR1 = Value; /* Set the compare match value for TIMER1 in CTC mode with ICR1 Reg*/
    208e:	e6 e4       	ldi	r30, 0x46	; 70
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
    209a:	04 c0       	rjmp	.+8      	; 0x20a4 <TIMER_setCompareMatch+0x78>
			}
			break;

		case TIMER2:
			OCR2 = Value; /* Set the compare match value for TIMER2 */
    209c:	e3 e4       	ldi	r30, 0x43	; 67
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	80 83       	st	Z, r24

		default:
			/* Wrong Timer Num: Invalid timer number specified */
			break;
	}
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <TIMER_setCallBack>:
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @param[in]  copy_ptr      Type pointer to function   Range Any function pointer
 * @return None
 */
void TIMER_setCallBack(Timer_ID Timer_num , void (*copy_ptr)(void))
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <TIMER_setCallBack+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <TIMER_setCallBack+0x8>
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	7b 83       	std	Y+3, r23	; 0x03
    20c6:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the callback function for the specified timer */
	switch(Timer_num)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	3d 83       	std	Y+5, r19	; 0x05
    20d0:	2c 83       	std	Y+4, r18	; 0x04
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	91 05       	cpc	r25, r1
    20da:	81 f0       	breq	.+32     	; 0x20fc <TIMER_setCallBack+0x48>
    20dc:	2c 81       	ldd	r18, Y+4	; 0x04
    20de:	3d 81       	ldd	r19, Y+5	; 0x05
    20e0:	22 30       	cpi	r18, 0x02	; 2
    20e2:	31 05       	cpc	r19, r1
    20e4:	91 f0       	breq	.+36     	; 0x210a <TIMER_setCallBack+0x56>
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	a1 f4       	brne	.+40     	; 0x2116 <TIMER_setCallBack+0x62>
	{
		case TIMER0:
			TIMER0_PtrCallBack = copy_ptr; /* Set the callback function for TIMER0 */
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	90 93 88 01 	sts	0x0188, r25
    20f6:	80 93 87 01 	sts	0x0187, r24
    20fa:	0d c0       	rjmp	.+26     	; 0x2116 <TIMER_setCallBack+0x62>
			break;
		case TIMER1:
			TIMER1_PtrCallBack = copy_ptr; /* Set the callback function for TIMER1 */
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	90 93 8a 01 	sts	0x018A, r25
    2104:	80 93 89 01 	sts	0x0189, r24
    2108:	06 c0       	rjmp	.+12     	; 0x2116 <TIMER_setCallBack+0x62>
			break;
		case TIMER2:
			TIMER2_PtrCallBack = copy_ptr; /* Set the callback function for TIMER2 */
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	90 93 8c 01 	sts	0x018C, r25
    2112:	80 93 8b 01 	sts	0x018B, r24
			break;
		default :
	  		/* Wrong Timer Num: Invalid timer number specified */
			break;
	}
}
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <TIMER_deInit>:
 *
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @return None
 */
void TIMER_deInit(Timer_ID Timer_num)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <TIMER_deInit+0x6>
    212c:	0f 92       	push	r0
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	89 83       	std	Y+1, r24	; 0x01
	/* Deinitialize the specified timer */
	switch(Timer_num)
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	3b 83       	std	Y+3, r19	; 0x03
    213c:	2a 83       	std	Y+2, r18	; 0x02
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	91 05       	cpc	r25, r1
    2146:	a1 f0       	breq	.+40     	; 0x2170 <TIMER_deInit+0x4a>
    2148:	2a 81       	ldd	r18, Y+2	; 0x02
    214a:	3b 81       	ldd	r19, Y+3	; 0x03
    214c:	22 30       	cpi	r18, 0x02	; 2
    214e:	31 05       	cpc	r19, r1
    2150:	e9 f0       	breq	.+58     	; 0x218c <TIMER_deInit+0x66>
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	19 f5       	brne	.+70     	; 0x21a0 <TIMER_deInit+0x7a>
	{
		case TIMER0:
			TCCR0 = 0;     /* Reset TIMER0 control register */
    215a:	e3 e5       	ldi	r30, 0x53	; 83
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	10 82       	st	Z, r1
			TIMSK &= 0xFC; /* Disable TIMER0 interrupts */
    2160:	a9 e5       	ldi	r26, 0x59	; 89
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e9 e5       	ldi	r30, 0x59	; 89
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8c 7f       	andi	r24, 0xFC	; 252
    216c:	8c 93       	st	X, r24
    216e:	18 c0       	rjmp	.+48     	; 0x21a0 <TIMER_deInit+0x7a>
			break;

		case TIMER1:
			TCCR1A = 0;    /* Reset TIMER1 control register A */
    2170:	ef e4       	ldi	r30, 0x4F	; 79
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	10 82       	st	Z, r1
			TCCR1B = 0;    /* Reset TIMER1 control register B */
    2176:	ee e4       	ldi	r30, 0x4E	; 78
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	10 82       	st	Z, r1
			TIMSK &= 0xC3; /* Disable TIMER1 interrupts */
    217c:	a9 e5       	ldi	r26, 0x59	; 89
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e9 e5       	ldi	r30, 0x59	; 89
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	83 7c       	andi	r24, 0xC3	; 195
    2188:	8c 93       	st	X, r24
    218a:	0a c0       	rjmp	.+20     	; 0x21a0 <TIMER_deInit+0x7a>
			break;

		case TIMER2:
			TCCR2 = 0;     /* Reset TIMER2 control register */
    218c:	e5 e4       	ldi	r30, 0x45	; 69
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	10 82       	st	Z, r1
			TIMSK &= 0x3F; /* Disable TIMER2 interrupts */
    2192:	a9 e5       	ldi	r26, 0x59	; 89
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e9 e5       	ldi	r30, 0x59	; 89
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8f 73       	andi	r24, 0x3F	; 63
    219e:	8c 93       	st	X, r24

		default:
			/* Wrong Timer Num: Invalid timer number specified */
			break;
	}
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <TIMER0_setPwmDutyCycle>:
 *
 * @param[in]  DutyCycle   Type uint8     Range 0 to 100
 * @return None
 */
void TIMER0_setPwmDutyCycle(uint8 DutyCycle)
{
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	0f 92       	push	r0
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate and set the PWM duty cycle for TIMER0 */
	OCR0 = (float32)((float32)DutyCycle / 100) * 255;
    21bc:	0c e5       	ldi	r16, 0x5C	; 92
    21be:	10 e0       	ldi	r17, 0x00	; 0
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a0 e0       	ldi	r26, 0x00	; 0
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	48 ec       	ldi	r20, 0xC8	; 200
    21e0:	52 e4       	ldi	r21, 0x42	; 66
    21e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	bc 01       	movw	r22, r24
    21ec:	cd 01       	movw	r24, r26
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	53 e4       	ldi	r21, 0x43	; 67
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	f8 01       	movw	r30, r16
    220c:	80 83       	st	Z, r24
}
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	08 95       	ret

0000221a <TIMER1_setPwmDutyCycle>:
 * @param[in]  DutyCycle   Type uint8     Range 0 to 100
 * @param[in]  Circuit     Type uint8     Range OCRA or OCRB
 * @return None
 */
void TIMER1_setPwmDutyCycle(uint8 DutyCycle, uint8 Circuit)
{
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	28 97       	sbiw	r28, 0x08	; 8
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the PWM duty cycle for TIMER1 based on the selected mode and circuit */
	if (Timer1_Mode == TIMER1_FAST_PWM_8BIT)
    2236:	80 91 9d 01 	lds	r24, 0x019D
    223a:	85 30       	cpi	r24, 0x05	; 5
    223c:	09 f0       	breq	.+2      	; 0x2240 <TIMER1_setPwmDutyCycle+0x26>
    223e:	66 c0       	rjmp	.+204    	; 0x230c <TIMER1_setPwmDutyCycle+0xf2>
	{
		/* Set the PWM duty cycle for TIMER1 in 8-bit fast PWM mode */
		switch(Circuit)
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	38 87       	std	Y+8, r19	; 0x08
    2248:	2f 83       	std	Y+7, r18	; 0x07
    224a:	8f 81       	ldd	r24, Y+7	; 0x07
    224c:	98 85       	ldd	r25, Y+8	; 0x08
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	91 05       	cpc	r25, r1
    2252:	31 f0       	breq	.+12     	; 0x2260 <TIMER1_setPwmDutyCycle+0x46>
    2254:	ef 81       	ldd	r30, Y+7	; 0x07
    2256:	f8 85       	ldd	r31, Y+8	; 0x08
    2258:	e2 30       	cpi	r30, 0x02	; 2
    225a:	f1 05       	cpc	r31, r1
    225c:	61 f1       	breq	.+88     	; 0x22b6 <TIMER1_setPwmDutyCycle+0x9c>
    225e:	72 c1       	rjmp	.+740    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
		{
			case 1:
				OCR1A = (float32)((float32)DutyCycle / 100) * 255;
    2260:	0a e4       	ldi	r16, 0x4A	; 74
    2262:	10 e0       	ldi	r17, 0x00	; 0
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e0       	ldi	r26, 0x00	; 0
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	48 ec       	ldi	r20, 0xC8	; 200
    2284:	52 e4       	ldi	r21, 0x42	; 66
    2286:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4f e7       	ldi	r20, 0x7F	; 127
    2298:	53 e4       	ldi	r21, 0x43	; 67
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	f8 01       	movw	r30, r16
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	80 83       	st	Z, r24
    22b4:	47 c1       	rjmp	.+654    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
				break;
			case 2:
				OCR1B = (float32)((float32)DutyCycle / 100) * 255;
    22b6:	08 e4       	ldi	r16, 0x48	; 72
    22b8:	10 e0       	ldi	r17, 0x00	; 0
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e0       	ldi	r26, 0x00	; 0
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	48 ec       	ldi	r20, 0xC8	; 200
    22da:	52 e4       	ldi	r21, 0x42	; 66
    22dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	53 e4       	ldi	r21, 0x43	; 67
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	f8 01       	movw	r30, r16
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
    230a:	1c c1       	rjmp	.+568    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
			default:
				/* Wrong Input: Invalid circuit specified */
				break;
		}
	}
	else if (Timer1_Mode == TIMER1_FAST_PWM_9BIT)
    230c:	80 91 9d 01 	lds	r24, 0x019D
    2310:	86 30       	cpi	r24, 0x06	; 6
    2312:	09 f0       	breq	.+2      	; 0x2316 <TIMER1_setPwmDutyCycle+0xfc>
    2314:	66 c0       	rjmp	.+204    	; 0x23e2 <TIMER1_setPwmDutyCycle+0x1c8>
	{
		/* Set the PWM duty cycle for TIMER1 in 9-bit fast PWM mode */
		switch(Circuit)
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	3e 83       	std	Y+6, r19	; 0x06
    231e:	2d 83       	std	Y+5, r18	; 0x05
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	91 05       	cpc	r25, r1
    2328:	31 f0       	breq	.+12     	; 0x2336 <TIMER1_setPwmDutyCycle+0x11c>
    232a:	ed 81       	ldd	r30, Y+5	; 0x05
    232c:	fe 81       	ldd	r31, Y+6	; 0x06
    232e:	e2 30       	cpi	r30, 0x02	; 2
    2330:	f1 05       	cpc	r31, r1
    2332:	61 f1       	breq	.+88     	; 0x238c <TIMER1_setPwmDutyCycle+0x172>
    2334:	07 c1       	rjmp	.+526    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
		{
			case 1:
				OCR1A = (float32)((float32)DutyCycle / 100) * 511;
    2336:	0a e4       	ldi	r16, 0x4A	; 74
    2338:	10 e0       	ldi	r17, 0x00	; 0
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e0       	ldi	r26, 0x00	; 0
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	48 ec       	ldi	r20, 0xC8	; 200
    235a:	52 e4       	ldi	r21, 0x42	; 66
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e8       	ldi	r19, 0x80	; 128
    236c:	4f ef       	ldi	r20, 0xFF	; 255
    236e:	53 e4       	ldi	r21, 0x43	; 67
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	f8 01       	movw	r30, r16
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
    238a:	dc c0       	rjmp	.+440    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
				break;
			case 2:
				OCR1B = (float32)((float32)DutyCycle / 100) * 511;
    238c:	08 e4       	ldi	r16, 0x48	; 72
    238e:	10 e0       	ldi	r17, 0x00	; 0
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e0       	ldi	r26, 0x00	; 0
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	48 ec       	ldi	r20, 0xC8	; 200
    23b0:	52 e4       	ldi	r21, 0x42	; 66
    23b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e8       	ldi	r19, 0x80	; 128
    23c2:	4f ef       	ldi	r20, 0xFF	; 255
    23c4:	53 e4       	ldi	r21, 0x43	; 67
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	f8 01       	movw	r30, r16
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	80 83       	st	Z, r24
    23e0:	b1 c0       	rjmp	.+354    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
			default:
				/* Wrong Input: Invalid circuit specified */
				break;
		}
	}
	else if (Timer1_Mode == TIMER1_FAST_PWM_10BIT)
    23e2:	80 91 9d 01 	lds	r24, 0x019D
    23e6:	87 30       	cpi	r24, 0x07	; 7
    23e8:	09 f0       	breq	.+2      	; 0x23ec <TIMER1_setPwmDutyCycle+0x1d2>
    23ea:	66 c0       	rjmp	.+204    	; 0x24b8 <TIMER1_setPwmDutyCycle+0x29e>
	{
		/* Set the PWM duty cycle for TIMER1 in 10-bit fast PWM mode */
		switch(Circuit)
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	3c 83       	std	Y+4, r19	; 0x04
    23f4:	2b 83       	std	Y+3, r18	; 0x03
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	81 30       	cpi	r24, 0x01	; 1
    23fc:	91 05       	cpc	r25, r1
    23fe:	31 f0       	breq	.+12     	; 0x240c <TIMER1_setPwmDutyCycle+0x1f2>
    2400:	eb 81       	ldd	r30, Y+3	; 0x03
    2402:	fc 81       	ldd	r31, Y+4	; 0x04
    2404:	e2 30       	cpi	r30, 0x02	; 2
    2406:	f1 05       	cpc	r31, r1
    2408:	61 f1       	breq	.+88     	; 0x2462 <TIMER1_setPwmDutyCycle+0x248>
    240a:	9c c0       	rjmp	.+312    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
		{
			case 1:
				OCR1A = (float32)((float32)DutyCycle / 100) * 1023;
    240c:	0a e4       	ldi	r16, 0x4A	; 74
    240e:	10 e0       	ldi	r17, 0x00	; 0
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 e0       	ldi	r26, 0x00	; 0
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	48 ec       	ldi	r20, 0xC8	; 200
    2430:	52 e4       	ldi	r21, 0x42	; 66
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 ec       	ldi	r19, 0xC0	; 192
    2442:	4f e7       	ldi	r20, 0x7F	; 127
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	bc 01       	movw	r22, r24
    2450:	cd 01       	movw	r24, r26
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	f8 01       	movw	r30, r16
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	71 c0       	rjmp	.+226    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
				break;
			case 2:
				OCR1B = (float32)((float32)DutyCycle / 100) * 1023;
    2462:	08 e4       	ldi	r16, 0x48	; 72
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a0 e0       	ldi	r26, 0x00	; 0
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	48 ec       	ldi	r20, 0xC8	; 200
    2486:	52 e4       	ldi	r21, 0x42	; 66
    2488:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 ec       	ldi	r19, 0xC0	; 192
    2498:	4f e7       	ldi	r20, 0x7F	; 127
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	f8 01       	movw	r30, r16
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
    24b6:	46 c0       	rjmp	.+140    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
			default:
				/* Wrong Input: Invalid circuit specified */
				break;
		}
	}
	else if (Timer1_Mode == TIMER1_FAST_PWM_ICR)
    24b8:	80 91 9d 01 	lds	r24, 0x019D
    24bc:	8e 30       	cpi	r24, 0x0E	; 14
    24be:	71 f4       	brne	.+28     	; 0x24dc <TIMER1_setPwmDutyCycle+0x2c2>
	{
		/* Set the PWM duty cycle for TIMER1 in fast PWM mode with ICR as top value */
		ICR1 = 2499; /* Assuming 2500 as TOP value for ICR1 */
    24c0:	e6 e4       	ldi	r30, 0x46	; 70
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	83 ec       	ldi	r24, 0xC3	; 195
    24c6:	99 e0       	ldi	r25, 0x09	; 9
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24
		OCR1A = DutyCycle; /* Set OCR1A with the provided duty cycle */
    24cc:	ea e4       	ldi	r30, 0x4A	; 74
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
    24da:	34 c0       	rjmp	.+104    	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
	}
	else if (Timer1_Mode == TIMER1_FAST_PWM_OCR)
    24dc:	80 91 9d 01 	lds	r24, 0x019D
    24e0:	8f 30       	cpi	r24, 0x0F	; 15
    24e2:	81 f5       	brne	.+96     	; 0x2544 <TIMER1_setPwmDutyCycle+0x32a>
	{
		/* Set the PWM duty cycle for TIMER1 in fast PWM mode with OCR1 as top value */
		OCR1A = 65535; /* Setting the maximum value for OCR1A */
    24e4:	ea e4       	ldi	r30, 0x4A	; 74
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	8f ef       	ldi	r24, 0xFF	; 255
    24ea:	9f ef       	ldi	r25, 0xFF	; 255
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	80 83       	st	Z, r24
		OCR1B = (float32)((float32)DutyCycle / 100) * 65535; /* Set OCR1B with the provided duty cycle */
    24f0:	08 e4       	ldi	r16, 0x48	; 72
    24f2:	10 e0       	ldi	r17, 0x00	; 0
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e0       	ldi	r26, 0x00	; 0
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	bc 01       	movw	r22, r24
    250c:	cd 01       	movw	r24, r26
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	48 ec       	ldi	r20, 0xC8	; 200
    2514:	52 e4       	ldi	r21, 0x42	; 66
    2516:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	f8 01       	movw	r30, r16
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
	}
}
    2544:	28 96       	adiw	r28, 0x08	; 8
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	08 95       	ret

0000255a <TIMER2_setPwmDutyCycle>:
 *
 * @param[in]  DutyCycle   Type uint8     Range 0 to 100
 * @return None
 */
void TIMER2_setPwmDutyCycle(uint8 DutyCycle)
{
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate and set the PWM duty cycle for TIMER2 */
	OCR2 = (float32)((float32)DutyCycle / 100) * 255;
    256a:	03 e4       	ldi	r16, 0x43	; 67
    256c:	10 e0       	ldi	r17, 0x00	; 0
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	a0 e0       	ldi	r26, 0x00	; 0
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	48 ec       	ldi	r20, 0xC8	; 200
    258e:	52 e4       	ldi	r21, 0x42	; 66
    2590:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	53 e4       	ldi	r21, 0x43	; 67
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	f8 01       	movw	r30, r16
    25ba:	80 83       	st	Z, r24
}
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	08 95       	ret

000025c8 <__vector_4>:
									   	   	   ISR
   ===================================================================================================*/

/*TIMER2 COMP ISR*/
void __vector_4(void)
{
    25c8:	1f 92       	push	r1
    25ca:	0f 92       	push	r0
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	0f 92       	push	r0
    25d0:	11 24       	eor	r1, r1
    25d2:	2f 93       	push	r18
    25d4:	3f 93       	push	r19
    25d6:	4f 93       	push	r20
    25d8:	5f 93       	push	r21
    25da:	6f 93       	push	r22
    25dc:	7f 93       	push	r23
    25de:	8f 93       	push	r24
    25e0:	9f 93       	push	r25
    25e2:	af 93       	push	r26
    25e4:	bf 93       	push	r27
    25e6:	ef 93       	push	r30
    25e8:	ff 93       	push	r31
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62

	if (TIMER2_PtrCallBack != NULL_PTR)
    25f2:	80 91 8b 01 	lds	r24, 0x018B
    25f6:	90 91 8c 01 	lds	r25, 0x018C
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	29 f0       	breq	.+10     	; 0x2608 <__vector_4+0x40>
			{
			TIMER2_PtrCallBack();
    25fe:	e0 91 8b 01 	lds	r30, 0x018B
    2602:	f0 91 8c 01 	lds	r31, 0x018C
    2606:	09 95       	icall
			}
	else
			{
			/* Do Nothing */
			}
}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	ff 91       	pop	r31
    260e:	ef 91       	pop	r30
    2610:	bf 91       	pop	r27
    2612:	af 91       	pop	r26
    2614:	9f 91       	pop	r25
    2616:	8f 91       	pop	r24
    2618:	7f 91       	pop	r23
    261a:	6f 91       	pop	r22
    261c:	5f 91       	pop	r21
    261e:	4f 91       	pop	r20
    2620:	3f 91       	pop	r19
    2622:	2f 91       	pop	r18
    2624:	0f 90       	pop	r0
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	0f 90       	pop	r0
    262a:	1f 90       	pop	r1
    262c:	18 95       	reti

0000262e <__vector_5>:
/*TIMER2 OVF ISR*/
void __vector_5(void)
{
    262e:	1f 92       	push	r1
    2630:	0f 92       	push	r0
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	0f 92       	push	r0
    2636:	11 24       	eor	r1, r1
    2638:	2f 93       	push	r18
    263a:	3f 93       	push	r19
    263c:	4f 93       	push	r20
    263e:	5f 93       	push	r21
    2640:	6f 93       	push	r22
    2642:	7f 93       	push	r23
    2644:	8f 93       	push	r24
    2646:	9f 93       	push	r25
    2648:	af 93       	push	r26
    264a:	bf 93       	push	r27
    264c:	ef 93       	push	r30
    264e:	ff 93       	push	r31
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
		if (TIMER2_PtrCallBack != NULL_PTR)
    2658:	80 91 8b 01 	lds	r24, 0x018B
    265c:	90 91 8c 01 	lds	r25, 0x018C
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	29 f0       	breq	.+10     	; 0x266e <__vector_5+0x40>
		{
			TIMER2_PtrCallBack();
    2664:	e0 91 8b 01 	lds	r30, 0x018B
    2668:	f0 91 8c 01 	lds	r31, 0x018C
    266c:	09 95       	icall
		else
		{
			/* Do Nothing */
		}

}
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	ff 91       	pop	r31
    2674:	ef 91       	pop	r30
    2676:	bf 91       	pop	r27
    2678:	af 91       	pop	r26
    267a:	9f 91       	pop	r25
    267c:	8f 91       	pop	r24
    267e:	7f 91       	pop	r23
    2680:	6f 91       	pop	r22
    2682:	5f 91       	pop	r21
    2684:	4f 91       	pop	r20
    2686:	3f 91       	pop	r19
    2688:	2f 91       	pop	r18
    268a:	0f 90       	pop	r0
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	0f 90       	pop	r0
    2690:	1f 90       	pop	r1
    2692:	18 95       	reti

00002694 <__vector_7>:

/* TIMER1 COMPA ISR */
void __vector_7(void)
{
    2694:	1f 92       	push	r1
    2696:	0f 92       	push	r0
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	0f 92       	push	r0
    269c:	11 24       	eor	r1, r1
    269e:	2f 93       	push	r18
    26a0:	3f 93       	push	r19
    26a2:	4f 93       	push	r20
    26a4:	5f 93       	push	r21
    26a6:	6f 93       	push	r22
    26a8:	7f 93       	push	r23
    26aa:	8f 93       	push	r24
    26ac:	9f 93       	push	r25
    26ae:	af 93       	push	r26
    26b0:	bf 93       	push	r27
    26b2:	ef 93       	push	r30
    26b4:	ff 93       	push	r31
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
if (TIMER1_PtrCallBack != NULL_PTR)
    26be:	80 91 89 01 	lds	r24, 0x0189
    26c2:	90 91 8a 01 	lds	r25, 0x018A
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	29 f0       	breq	.+10     	; 0x26d4 <__vector_7+0x40>
			{
	TIMER1_PtrCallBack();
    26ca:	e0 91 89 01 	lds	r30, 0x0189
    26ce:	f0 91 8a 01 	lds	r31, 0x018A
    26d2:	09 95       	icall
			else
			{
			/* Do Nothing */
			}

}
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	ff 91       	pop	r31
    26da:	ef 91       	pop	r30
    26dc:	bf 91       	pop	r27
    26de:	af 91       	pop	r26
    26e0:	9f 91       	pop	r25
    26e2:	8f 91       	pop	r24
    26e4:	7f 91       	pop	r23
    26e6:	6f 91       	pop	r22
    26e8:	5f 91       	pop	r21
    26ea:	4f 91       	pop	r20
    26ec:	3f 91       	pop	r19
    26ee:	2f 91       	pop	r18
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <__vector_8>:

/* TIMER1 COMPB ISR */
void __vector_8(void)
{
    26fa:	1f 92       	push	r1
    26fc:	0f 92       	push	r0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	0f 92       	push	r0
    2702:	11 24       	eor	r1, r1
    2704:	2f 93       	push	r18
    2706:	3f 93       	push	r19
    2708:	4f 93       	push	r20
    270a:	5f 93       	push	r21
    270c:	6f 93       	push	r22
    270e:	7f 93       	push	r23
    2710:	8f 93       	push	r24
    2712:	9f 93       	push	r25
    2714:	af 93       	push	r26
    2716:	bf 93       	push	r27
    2718:	ef 93       	push	r30
    271a:	ff 93       	push	r31
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
	TIMER1_PtrCallBack();
    2724:	e0 91 89 01 	lds	r30, 0x0189
    2728:	f0 91 8a 01 	lds	r31, 0x018A
    272c:	09 95       	icall
}
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	ff 91       	pop	r31
    2734:	ef 91       	pop	r30
    2736:	bf 91       	pop	r27
    2738:	af 91       	pop	r26
    273a:	9f 91       	pop	r25
    273c:	8f 91       	pop	r24
    273e:	7f 91       	pop	r23
    2740:	6f 91       	pop	r22
    2742:	5f 91       	pop	r21
    2744:	4f 91       	pop	r20
    2746:	3f 91       	pop	r19
    2748:	2f 91       	pop	r18
    274a:	0f 90       	pop	r0
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	0f 90       	pop	r0
    2750:	1f 90       	pop	r1
    2752:	18 95       	reti

00002754 <__vector_9>:

/*TIMER1 OVF ISR*/
void __vector_9(void)
{
    2754:	1f 92       	push	r1
    2756:	0f 92       	push	r0
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	0f 92       	push	r0
    275c:	11 24       	eor	r1, r1
    275e:	2f 93       	push	r18
    2760:	3f 93       	push	r19
    2762:	4f 93       	push	r20
    2764:	5f 93       	push	r21
    2766:	6f 93       	push	r22
    2768:	7f 93       	push	r23
    276a:	8f 93       	push	r24
    276c:	9f 93       	push	r25
    276e:	af 93       	push	r26
    2770:	bf 93       	push	r27
    2772:	ef 93       	push	r30
    2774:	ff 93       	push	r31
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_PtrCallBack();
    277e:	e0 91 89 01 	lds	r30, 0x0189
    2782:	f0 91 8a 01 	lds	r31, 0x018A
    2786:	09 95       	icall
}
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	ff 91       	pop	r31
    278e:	ef 91       	pop	r30
    2790:	bf 91       	pop	r27
    2792:	af 91       	pop	r26
    2794:	9f 91       	pop	r25
    2796:	8f 91       	pop	r24
    2798:	7f 91       	pop	r23
    279a:	6f 91       	pop	r22
    279c:	5f 91       	pop	r21
    279e:	4f 91       	pop	r20
    27a0:	3f 91       	pop	r19
    27a2:	2f 91       	pop	r18
    27a4:	0f 90       	pop	r0
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	0f 90       	pop	r0
    27aa:	1f 90       	pop	r1
    27ac:	18 95       	reti

000027ae <__vector_10>:

/*TIMER0 COMP ISR*/
void __vector_10(void)
{
    27ae:	1f 92       	push	r1
    27b0:	0f 92       	push	r0
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	0f 92       	push	r0
    27b6:	11 24       	eor	r1, r1
    27b8:	2f 93       	push	r18
    27ba:	3f 93       	push	r19
    27bc:	4f 93       	push	r20
    27be:	5f 93       	push	r21
    27c0:	6f 93       	push	r22
    27c2:	7f 93       	push	r23
    27c4:	8f 93       	push	r24
    27c6:	9f 93       	push	r25
    27c8:	af 93       	push	r26
    27ca:	bf 93       	push	r27
    27cc:	ef 93       	push	r30
    27ce:	ff 93       	push	r31
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_PtrCallBack != NULL_PTR)
    27d8:	80 91 87 01 	lds	r24, 0x0187
    27dc:	90 91 88 01 	lds	r25, 0x0188
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	29 f0       	breq	.+10     	; 0x27ee <__vector_10+0x40>
			{
	TIMER0_PtrCallBack();
    27e4:	e0 91 87 01 	lds	r30, 0x0187
    27e8:	f0 91 88 01 	lds	r31, 0x0188
    27ec:	09 95       	icall
			}
	else
			{
			/* Do Nothing */
			}
}
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	ff 91       	pop	r31
    27f4:	ef 91       	pop	r30
    27f6:	bf 91       	pop	r27
    27f8:	af 91       	pop	r26
    27fa:	9f 91       	pop	r25
    27fc:	8f 91       	pop	r24
    27fe:	7f 91       	pop	r23
    2800:	6f 91       	pop	r22
    2802:	5f 91       	pop	r21
    2804:	4f 91       	pop	r20
    2806:	3f 91       	pop	r19
    2808:	2f 91       	pop	r18
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	0f 90       	pop	r0
    2810:	1f 90       	pop	r1
    2812:	18 95       	reti

00002814 <__vector_11>:

/* TIMER0 OVF ISR */
void __vector_11(void)
{
    2814:	1f 92       	push	r1
    2816:	0f 92       	push	r0
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	0f 92       	push	r0
    281c:	11 24       	eor	r1, r1
    281e:	2f 93       	push	r18
    2820:	3f 93       	push	r19
    2822:	4f 93       	push	r20
    2824:	5f 93       	push	r21
    2826:	6f 93       	push	r22
    2828:	7f 93       	push	r23
    282a:	8f 93       	push	r24
    282c:	9f 93       	push	r25
    282e:	af 93       	push	r26
    2830:	bf 93       	push	r27
    2832:	ef 93       	push	r30
    2834:	ff 93       	push	r31
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62

		if (TIMER0_PtrCallBack != NULL_PTR)
    283e:	80 91 87 01 	lds	r24, 0x0187
    2842:	90 91 88 01 	lds	r25, 0x0188
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	29 f0       	breq	.+10     	; 0x2854 <__vector_11+0x40>
		{
			TIMER0_PtrCallBack();
    284a:	e0 91 87 01 	lds	r30, 0x0187
    284e:	f0 91 88 01 	lds	r31, 0x0188
    2852:	09 95       	icall
		}
		else
		{
			/* Do Nothing */
		}
}
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	ff 91       	pop	r31
    285a:	ef 91       	pop	r30
    285c:	bf 91       	pop	r27
    285e:	af 91       	pop	r26
    2860:	9f 91       	pop	r25
    2862:	8f 91       	pop	r24
    2864:	7f 91       	pop	r23
    2866:	6f 91       	pop	r22
    2868:	5f 91       	pop	r21
    286a:	4f 91       	pop	r20
    286c:	3f 91       	pop	r19
    286e:	2f 91       	pop	r18
    2870:	0f 90       	pop	r0
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	0f 90       	pop	r0
    2876:	1f 90       	pop	r1
    2878:	18 95       	reti

0000287a <GPIO_setupPinDirection>:
 * @param[in]  pin_num      Type GPIO_Pin      Range 0:7
 * @param[in]  direction    Type uint8         Range 0:255
 * @return none
 */
void GPIO_setupPinDirection(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num, uint8 a_direction)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	00 d0       	rcall	.+0      	; 0x2880 <GPIO_setupPinDirection+0x6>
    2880:	00 d0       	rcall	.+0      	; 0x2882 <GPIO_setupPinDirection+0x8>
    2882:	0f 92       	push	r0
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	6a 83       	std	Y+2, r22	; 0x02
    288c:	4b 83       	std	Y+3, r20	; 0x03
	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	84 30       	cpi	r24, 0x04	; 4
    2892:	08 f0       	brcs	.+2      	; 0x2896 <GPIO_setupPinDirection+0x1c>
    2894:	e4 c0       	rjmp	.+456    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	88 30       	cpi	r24, 0x08	; 8
    289a:	08 f0       	brcs	.+2      	; 0x289e <GPIO_setupPinDirection+0x24>
    289c:	e0 c0       	rjmp	.+448    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
	{
		/* Wrong Input*/
	}
	else
	{
		  switch(a_port_num)
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	28 2f       	mov	r18, r24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	3d 83       	std	Y+5, r19	; 0x05
    28a6:	2c 83       	std	Y+4, r18	; 0x04
    28a8:	8c 81       	ldd	r24, Y+4	; 0x04
    28aa:	9d 81       	ldd	r25, Y+5	; 0x05
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	91 05       	cpc	r25, r1
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <GPIO_setupPinDirection+0x3a>
    28b2:	47 c0       	rjmp	.+142    	; 0x2942 <GPIO_setupPinDirection+0xc8>
    28b4:	2c 81       	ldd	r18, Y+4	; 0x04
    28b6:	3d 81       	ldd	r19, Y+5	; 0x05
    28b8:	22 30       	cpi	r18, 0x02	; 2
    28ba:	31 05       	cpc	r19, r1
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <GPIO_setupPinDirection+0x4e>
    28be:	8c 81       	ldd	r24, Y+4	; 0x04
    28c0:	9d 81       	ldd	r25, Y+5	; 0x05
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	71 f0       	breq	.+28     	; 0x28e2 <GPIO_setupPinDirection+0x68>
    28c6:	cb c0       	rjmp	.+406    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
    28c8:	2c 81       	ldd	r18, Y+4	; 0x04
    28ca:	3d 81       	ldd	r19, Y+5	; 0x05
    28cc:	22 30       	cpi	r18, 0x02	; 2
    28ce:	31 05       	cpc	r19, r1
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <GPIO_setupPinDirection+0x5a>
    28d2:	67 c0       	rjmp	.+206    	; 0x29a2 <GPIO_setupPinDirection+0x128>
    28d4:	8c 81       	ldd	r24, Y+4	; 0x04
    28d6:	9d 81       	ldd	r25, Y+5	; 0x05
    28d8:	83 30       	cpi	r24, 0x03	; 3
    28da:	91 05       	cpc	r25, r1
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <GPIO_setupPinDirection+0x66>
    28de:	91 c0       	rjmp	.+290    	; 0x2a02 <GPIO_setupPinDirection+0x188>
    28e0:	be c0       	rjmp	.+380    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
	  {
		case PORTA_ID:
			if(a_direction==PIN_OUTPUT)
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	81 30       	cpi	r24, 0x01	; 1
    28e6:	a1 f4       	brne	.+40     	; 0x2910 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
    28e8:	aa e3       	ldi	r26, 0x3A	; 58
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	ea e3       	ldi	r30, 0x3A	; 58
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	48 2f       	mov	r20, r24
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	02 2e       	mov	r0, r18
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <GPIO_setupPinDirection+0x8c>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	0a 94       	dec	r0
    2908:	e2 f7       	brpl	.-8      	; 0x2902 <GPIO_setupPinDirection+0x88>
    290a:	84 2b       	or	r24, r20
    290c:	8c 93       	st	X, r24
    290e:	a7 c0       	rjmp	.+334    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
			}
			else if(a_direction==PIN_INPUT)
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	88 23       	and	r24, r24
    2914:	09 f0       	breq	.+2      	; 0x2918 <GPIO_setupPinDirection+0x9e>
    2916:	a3 c0       	rjmp	.+326    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
			{
				CLR_BIT(DDRA,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
    2918:	aa e3       	ldi	r26, 0x3A	; 58
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	ea e3       	ldi	r30, 0x3A	; 58
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	48 2f       	mov	r20, r24
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	02 2e       	mov	r0, r18
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <GPIO_setupPinDirection+0xbc>
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	0a 94       	dec	r0
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <GPIO_setupPinDirection+0xb8>
    293a:	80 95       	com	r24
    293c:	84 23       	and	r24, r20
    293e:	8c 93       	st	X, r24
    2940:	8e c0       	rjmp	.+284    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
			{
				/*Wrong a_direction Error*/
			}
			break;
		case PORTB_ID:
			if(a_direction==PIN_OUTPUT)
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	81 30       	cpi	r24, 0x01	; 1
    2946:	a1 f4       	brne	.+40     	; 0x2970 <GPIO_setupPinDirection+0xf6>
				{
					SET_BIT(DDRB,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
    2948:	a7 e3       	ldi	r26, 0x37	; 55
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e7 e3       	ldi	r30, 0x37	; 55
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	48 2f       	mov	r20, r24
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	02 2e       	mov	r0, r18
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <GPIO_setupPinDirection+0xec>
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	0a 94       	dec	r0
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <GPIO_setupPinDirection+0xe8>
    296a:	84 2b       	or	r24, r20
    296c:	8c 93       	st	X, r24
    296e:	77 c0       	rjmp	.+238    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	88 23       	and	r24, r24
    2974:	09 f0       	breq	.+2      	; 0x2978 <GPIO_setupPinDirection+0xfe>
    2976:	73 c0       	rjmp	.+230    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRB,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
    2978:	a7 e3       	ldi	r26, 0x37	; 55
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e7 e3       	ldi	r30, 0x37	; 55
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	48 2f       	mov	r20, r24
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	02 2e       	mov	r0, r18
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <GPIO_setupPinDirection+0x11c>
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	0a 94       	dec	r0
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <GPIO_setupPinDirection+0x118>
    299a:	80 95       	com	r24
    299c:	84 23       	and	r24, r20
    299e:	8c 93       	st	X, r24
    29a0:	5e c0       	rjmp	.+188    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
				{
					/*Wrong a_direction Error*/
				}
				break;
		case PORTC_ID:
			if(a_direction==PIN_OUTPUT)
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	81 30       	cpi	r24, 0x01	; 1
    29a6:	a1 f4       	brne	.+40     	; 0x29d0 <GPIO_setupPinDirection+0x156>
				{
					SET_BIT(DDRC,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
    29a8:	a4 e3       	ldi	r26, 0x34	; 52
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e4 e3       	ldi	r30, 0x34	; 52
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	48 2f       	mov	r20, r24
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	28 2f       	mov	r18, r24
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	02 2e       	mov	r0, r18
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <GPIO_setupPinDirection+0x14c>
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	0a 94       	dec	r0
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <GPIO_setupPinDirection+0x148>
    29ca:	84 2b       	or	r24, r20
    29cc:	8c 93       	st	X, r24
    29ce:	47 c0       	rjmp	.+142    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	88 23       	and	r24, r24
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <GPIO_setupPinDirection+0x15e>
    29d6:	43 c0       	rjmp	.+134    	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRC,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
    29d8:	a4 e3       	ldi	r26, 0x34	; 52
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e4 e3       	ldi	r30, 0x34	; 52
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	48 2f       	mov	r20, r24
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	02 2e       	mov	r0, r18
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <GPIO_setupPinDirection+0x17c>
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	0a 94       	dec	r0
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <GPIO_setupPinDirection+0x178>
    29fa:	80 95       	com	r24
    29fc:	84 23       	and	r24, r20
    29fe:	8c 93       	st	X, r24
    2a00:	2e c0       	rjmp	.+92     	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
				{
					/*Wrong a_direction Error*/
				}
				break;
		case PORTD_ID:
			if(a_direction==PIN_OUTPUT)
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	a1 f4       	brne	.+40     	; 0x2a30 <GPIO_setupPinDirection+0x1b6>
				{
					SET_BIT(DDRD,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
    2a08:	a1 e3       	ldi	r26, 0x31	; 49
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e1 e3       	ldi	r30, 0x31	; 49
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	48 2f       	mov	r20, r24
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
    2a16:	28 2f       	mov	r18, r24
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	02 2e       	mov	r0, r18
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <GPIO_setupPinDirection+0x1ac>
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	0a 94       	dec	r0
    2a28:	e2 f7       	brpl	.-8      	; 0x2a22 <GPIO_setupPinDirection+0x1a8>
    2a2a:	84 2b       	or	r24, r20
    2a2c:	8c 93       	st	X, r24
    2a2e:	17 c0       	rjmp	.+46     	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	88 23       	and	r24, r24
    2a34:	a1 f4       	brne	.+40     	; 0x2a5e <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRD,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
    2a36:	a1 e3       	ldi	r26, 0x31	; 49
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e1 e3       	ldi	r30, 0x31	; 49
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	48 2f       	mov	r20, r24
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	02 2e       	mov	r0, r18
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <GPIO_setupPinDirection+0x1da>
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	0a 94       	dec	r0
    2a56:	e2 f7       	brpl	.-8      	; 0x2a50 <GPIO_setupPinDirection+0x1d6>
    2a58:	80 95       	com	r24
    2a5a:	84 23       	and	r24, r20
    2a5c:	8c 93       	st	X, r24
		default:
			/*Wrong Port Error*/
		break;
	  }
	  }
	}
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <GPIO_writePin>:
 * @param[in]  pin_num      Type GPIO_Pin      Range 0:7
 * @param[in]  direction    Type uint8         Range 0:255
 * @return none
 */
void GPIO_writePin(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num, uint8 a_level)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <GPIO_writePin+0x6>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <GPIO_writePin+0x8>
    2a76:	0f 92       	push	r0
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	6a 83       	std	Y+2, r22	; 0x02
    2a80:	4b 83       	std	Y+3, r20	; 0x03
	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	84 30       	cpi	r24, 0x04	; 4
    2a86:	08 f0       	brcs	.+2      	; 0x2a8a <GPIO_writePin+0x1c>
    2a88:	d5 c0       	rjmp	.+426    	; 0x2c34 <GPIO_writePin+0x1c6>
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	88 30       	cpi	r24, 0x08	; 8
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <GPIO_writePin+0x24>
    2a90:	d1 c0       	rjmp	.+418    	; 0x2c34 <GPIO_writePin+0x1c6>
	{
		/* Wrong Input*/
	}
	else
	{
		  switch(a_port_num)
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	3d 83       	std	Y+5, r19	; 0x05
    2a9a:	2c 83       	std	Y+4, r18	; 0x04
    2a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa0:	81 30       	cpi	r24, 0x01	; 1
    2aa2:	91 05       	cpc	r25, r1
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <GPIO_writePin+0x3a>
    2aa6:	43 c0       	rjmp	.+134    	; 0x2b2e <GPIO_writePin+0xc0>
    2aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    2aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    2aac:	22 30       	cpi	r18, 0x02	; 2
    2aae:	31 05       	cpc	r19, r1
    2ab0:	2c f4       	brge	.+10     	; 0x2abc <GPIO_writePin+0x4e>
    2ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	71 f0       	breq	.+28     	; 0x2ad6 <GPIO_writePin+0x68>
    2aba:	bc c0       	rjmp	.+376    	; 0x2c34 <GPIO_writePin+0x1c6>
    2abc:	2c 81       	ldd	r18, Y+4	; 0x04
    2abe:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac0:	22 30       	cpi	r18, 0x02	; 2
    2ac2:	31 05       	cpc	r19, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <GPIO_writePin+0x5a>
    2ac6:	5f c0       	rjmp	.+190    	; 0x2b86 <GPIO_writePin+0x118>
    2ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aca:	9d 81       	ldd	r25, Y+5	; 0x05
    2acc:	83 30       	cpi	r24, 0x03	; 3
    2ace:	91 05       	cpc	r25, r1
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <GPIO_writePin+0x66>
    2ad2:	85 c0       	rjmp	.+266    	; 0x2bde <GPIO_writePin+0x170>
    2ad4:	af c0       	rjmp	.+350    	; 0x2c34 <GPIO_writePin+0x1c6>
	  {
		case PORTA_ID:
			if(a_level == LOGIC_HIGH)
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	a1 f4       	brne	.+40     	; 0x2b04 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    2adc:	ab e3       	ldi	r26, 0x3B	; 59
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	eb e3       	ldi	r30, 0x3B	; 59
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	48 2f       	mov	r20, r24
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	02 2e       	mov	r0, r18
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <GPIO_writePin+0x8c>
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	0a 94       	dec	r0
    2afc:	e2 f7       	brpl	.-8      	; 0x2af6 <GPIO_writePin+0x88>
    2afe:	84 2b       	or	r24, r20
    2b00:	8c 93       	st	X, r24
    2b02:	98 c0       	rjmp	.+304    	; 0x2c34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    2b04:	ab e3       	ldi	r26, 0x3B	; 59
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	eb e3       	ldi	r30, 0x3B	; 59
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	48 2f       	mov	r20, r24
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	02 2e       	mov	r0, r18
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <GPIO_writePin+0xb4>
    2b1e:	88 0f       	add	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	0a 94       	dec	r0
    2b24:	e2 f7       	brpl	.-8      	; 0x2b1e <GPIO_writePin+0xb0>
    2b26:	80 95       	com	r24
    2b28:	84 23       	and	r24, r20
    2b2a:	8c 93       	st	X, r24
    2b2c:	83 c0       	rjmp	.+262    	; 0x2c34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(a_level == LOGIC_HIGH)
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	a1 f4       	brne	.+40     	; 0x2b5c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    2b34:	a8 e3       	ldi	r26, 0x38	; 56
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e8 e3       	ldi	r30, 0x38	; 56
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	48 2f       	mov	r20, r24
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 2e       	mov	r0, r18
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <GPIO_writePin+0xe4>
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	0a 94       	dec	r0
    2b54:	e2 f7       	brpl	.-8      	; 0x2b4e <GPIO_writePin+0xe0>
    2b56:	84 2b       	or	r24, r20
    2b58:	8c 93       	st	X, r24
    2b5a:	6c c0       	rjmp	.+216    	; 0x2c34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    2b5c:	a8 e3       	ldi	r26, 0x38	; 56
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e8 e3       	ldi	r30, 0x38	; 56
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	48 2f       	mov	r20, r24
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	02 2e       	mov	r0, r18
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <GPIO_writePin+0x10c>
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	0a 94       	dec	r0
    2b7c:	e2 f7       	brpl	.-8      	; 0x2b76 <GPIO_writePin+0x108>
    2b7e:	80 95       	com	r24
    2b80:	84 23       	and	r24, r20
    2b82:	8c 93       	st	X, r24
    2b84:	57 c0       	rjmp	.+174    	; 0x2c34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(a_level == LOGIC_HIGH)
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	a1 f4       	brne	.+40     	; 0x2bb4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    2b8c:	a5 e3       	ldi	r26, 0x35	; 53
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e5 e3       	ldi	r30, 0x35	; 53
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	48 2f       	mov	r20, r24
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	02 2e       	mov	r0, r18
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <GPIO_writePin+0x13c>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	0a 94       	dec	r0
    2bac:	e2 f7       	brpl	.-8      	; 0x2ba6 <GPIO_writePin+0x138>
    2bae:	84 2b       	or	r24, r20
    2bb0:	8c 93       	st	X, r24
    2bb2:	40 c0       	rjmp	.+128    	; 0x2c34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    2bb4:	a5 e3       	ldi	r26, 0x35	; 53
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e5 e3       	ldi	r30, 0x35	; 53
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	48 2f       	mov	r20, r24
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	02 2e       	mov	r0, r18
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <GPIO_writePin+0x164>
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	0a 94       	dec	r0
    2bd4:	e2 f7       	brpl	.-8      	; 0x2bce <GPIO_writePin+0x160>
    2bd6:	80 95       	com	r24
    2bd8:	84 23       	and	r24, r20
    2bda:	8c 93       	st	X, r24
    2bdc:	2b c0       	rjmp	.+86     	; 0x2c34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(a_level == LOGIC_HIGH)
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	81 30       	cpi	r24, 0x01	; 1
    2be2:	a1 f4       	brne	.+40     	; 0x2c0c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    2be4:	a2 e3       	ldi	r26, 0x32	; 50
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e2 e3       	ldi	r30, 0x32	; 50
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	48 2f       	mov	r20, r24
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	02 2e       	mov	r0, r18
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <GPIO_writePin+0x194>
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	0a 94       	dec	r0
    2c04:	e2 f7       	brpl	.-8      	; 0x2bfe <GPIO_writePin+0x190>
    2c06:	84 2b       	or	r24, r20
    2c08:	8c 93       	st	X, r24
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    2c0c:	a2 e3       	ldi	r26, 0x32	; 50
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e2 e3       	ldi	r30, 0x32	; 50
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	48 2f       	mov	r20, r24
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	28 2f       	mov	r18, r24
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	02 2e       	mov	r0, r18
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <GPIO_writePin+0x1bc>
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	0a 94       	dec	r0
    2c2c:	e2 f7       	brpl	.-8      	; 0x2c26 <GPIO_writePin+0x1b8>
    2c2e:	80 95       	com	r24
    2c30:	84 23       	and	r24, r20
    2c32:	8c 93       	st	X, r24
		default:
			/*Wrong Port Error*/
		    break;
	  }
}
}
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	cf 91       	pop	r28
    2c40:	df 91       	pop	r29
    2c42:	08 95       	ret

00002c44 <GPIO_readPin>:
 * @param[in]  port_num     Type GPIO_Port     Range 0:3
 * @param[in]  pin_num      Type GPIO_Pin      Range 0:7
 * @return none
 */
uint8 GPIO_readPin(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num)
{
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <GPIO_readPin+0x6>
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <GPIO_readPin+0x8>
    2c4c:	0f 92       	push	r0
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	89 83       	std	Y+1, r24	; 0x01
    2c54:	6a 83       	std	Y+2, r22	; 0x02
	/* Check if the provided port number or pin number is out of range */
	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	84 30       	cpi	r24, 0x04	; 4
    2c5a:	08 f0       	brcs	.+2      	; 0x2c5e <GPIO_readPin+0x1a>
    2c5c:	70 c0       	rjmp	.+224    	; 0x2d3e <GPIO_readPin+0xfa>
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	88 30       	cpi	r24, 0x08	; 8
    2c62:	08 f0       	brcs	.+2      	; 0x2c66 <GPIO_readPin+0x22>
    2c64:	6c c0       	rjmp	.+216    	; 0x2d3e <GPIO_readPin+0xfa>
		/* Wrong Input: Port number or pin number out of range */
	}
	else
	{
		/* Select the appropriate GPIO port based on a_port_num and read the state of the specified pin */
		switch(a_port_num)
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	3d 83       	std	Y+5, r19	; 0x05
    2c6e:	2c 83       	std	Y+4, r18	; 0x04
    2c70:	4c 81       	ldd	r20, Y+4	; 0x04
    2c72:	5d 81       	ldd	r21, Y+5	; 0x05
    2c74:	41 30       	cpi	r20, 0x01	; 1
    2c76:	51 05       	cpc	r21, r1
    2c78:	49 f1       	breq	.+82     	; 0x2ccc <GPIO_readPin+0x88>
    2c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7e:	82 30       	cpi	r24, 0x02	; 2
    2c80:	91 05       	cpc	r25, r1
    2c82:	34 f4       	brge	.+12     	; 0x2c90 <GPIO_readPin+0x4c>
    2c84:	2c 81       	ldd	r18, Y+4	; 0x04
    2c86:	3d 81       	ldd	r19, Y+5	; 0x05
    2c88:	21 15       	cp	r18, r1
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	61 f0       	breq	.+24     	; 0x2ca6 <GPIO_readPin+0x62>
    2c8e:	57 c0       	rjmp	.+174    	; 0x2d3e <GPIO_readPin+0xfa>
    2c90:	4c 81       	ldd	r20, Y+4	; 0x04
    2c92:	5d 81       	ldd	r21, Y+5	; 0x05
    2c94:	42 30       	cpi	r20, 0x02	; 2
    2c96:	51 05       	cpc	r21, r1
    2c98:	61 f1       	breq	.+88     	; 0x2cf2 <GPIO_readPin+0xae>
    2c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9e:	83 30       	cpi	r24, 0x03	; 3
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	d1 f1       	breq	.+116    	; 0x2d18 <GPIO_readPin+0xd4>
    2ca4:	4c c0       	rjmp	.+152    	; 0x2d3e <GPIO_readPin+0xfa>
		{
			case PORTA_ID:
				return GET_BIT(PINA,a_pin_num);
    2ca6:	e9 e3       	ldi	r30, 0x39	; 57
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	88 2f       	mov	r24, r24
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	a9 01       	movw	r20, r18
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <GPIO_readPin+0x7a>
    2cba:	55 95       	asr	r21
    2cbc:	47 95       	ror	r20
    2cbe:	8a 95       	dec	r24
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <GPIO_readPin+0x76>
    2cc2:	ca 01       	movw	r24, r20
    2cc4:	58 2f       	mov	r21, r24
    2cc6:	51 70       	andi	r21, 0x01	; 1
    2cc8:	5b 83       	std	Y+3, r21	; 0x03
    2cca:	3a c0       	rjmp	.+116    	; 0x2d40 <GPIO_readPin+0xfc>
			case PORTB_ID:
				return GET_BIT(PINB,a_pin_num);
    2ccc:	e6 e3       	ldi	r30, 0x36	; 54
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	a9 01       	movw	r20, r18
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <GPIO_readPin+0xa0>
    2ce0:	55 95       	asr	r21
    2ce2:	47 95       	ror	r20
    2ce4:	8a 95       	dec	r24
    2ce6:	e2 f7       	brpl	.-8      	; 0x2ce0 <GPIO_readPin+0x9c>
    2ce8:	ca 01       	movw	r24, r20
    2cea:	58 2f       	mov	r21, r24
    2cec:	51 70       	andi	r21, 0x01	; 1
    2cee:	5b 83       	std	Y+3, r21	; 0x03
    2cf0:	27 c0       	rjmp	.+78     	; 0x2d40 <GPIO_readPin+0xfc>
			case PORTC_ID:
				return GET_BIT(PINC,a_pin_num);
    2cf2:	e3 e3       	ldi	r30, 0x33	; 51
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	88 2f       	mov	r24, r24
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a9 01       	movw	r20, r18
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <GPIO_readPin+0xc6>
    2d06:	55 95       	asr	r21
    2d08:	47 95       	ror	r20
    2d0a:	8a 95       	dec	r24
    2d0c:	e2 f7       	brpl	.-8      	; 0x2d06 <GPIO_readPin+0xc2>
    2d0e:	ca 01       	movw	r24, r20
    2d10:	58 2f       	mov	r21, r24
    2d12:	51 70       	andi	r21, 0x01	; 1
    2d14:	5b 83       	std	Y+3, r21	; 0x03
    2d16:	14 c0       	rjmp	.+40     	; 0x2d40 <GPIO_readPin+0xfc>
			case PORTD_ID:
				return GET_BIT(PIND,a_pin_num);
    2d18:	e0 e3       	ldi	r30, 0x30	; 48
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	88 2f       	mov	r24, r24
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	a9 01       	movw	r20, r18
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <GPIO_readPin+0xec>
    2d2c:	55 95       	asr	r21
    2d2e:	47 95       	ror	r20
    2d30:	8a 95       	dec	r24
    2d32:	e2 f7       	brpl	.-8      	; 0x2d2c <GPIO_readPin+0xe8>
    2d34:	ca 01       	movw	r24, r20
    2d36:	58 2f       	mov	r21, r24
    2d38:	51 70       	andi	r21, 0x01	; 1
    2d3a:	5b 83       	std	Y+3, r21	; 0x03
    2d3c:	01 c0       	rjmp	.+2      	; 0x2d40 <GPIO_readPin+0xfc>
				/* Wrong Port Error: Invalid GPIO port */
				break;
		}
	}
	/* Default return if any error occurred */
	return 0;
    2d3e:	1b 82       	std	Y+3, r1	; 0x03
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <GPIO_setupPortDirection>:
 * @param[in]  port_num     Type GPIO_Port     Range 0:3
 * @param[in]  direction    Type uint8         Range 0:255
 * @return none
 */
void GPIO_setupPortDirection(GPIO_Port a_port_num, uint8 a_direction)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <GPIO_setupPortDirection+0x6>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <GPIO_setupPortDirection+0x8>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	6a 83       	std	Y+2, r22	; 0x02
	if(a_port_num >= NUM_OF_PORTS)
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	84 30       	cpi	r24, 0x04	; 4
    2d66:	90 f5       	brcc	.+100    	; 0x2dcc <GPIO_setupPortDirection+0x7a>
		/* Wrong Input: Port number out of range */
	}
	else
	{
		/* Set the direction of all pins in the specified GPIO port */
		switch(a_port_num)
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	3c 83       	std	Y+4, r19	; 0x04
    2d70:	2b 83       	std	Y+3, r18	; 0x03
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	9c 81       	ldd	r25, Y+4	; 0x04
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	91 05       	cpc	r25, r1
    2d7a:	d1 f0       	breq	.+52     	; 0x2db0 <GPIO_setupPortDirection+0x5e>
    2d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d80:	22 30       	cpi	r18, 0x02	; 2
    2d82:	31 05       	cpc	r19, r1
    2d84:	2c f4       	brge	.+10     	; 0x2d90 <GPIO_setupPortDirection+0x3e>
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	61 f0       	breq	.+24     	; 0x2da6 <GPIO_setupPortDirection+0x54>
    2d8e:	1e c0       	rjmp	.+60     	; 0x2dcc <GPIO_setupPortDirection+0x7a>
    2d90:	2b 81       	ldd	r18, Y+3	; 0x03
    2d92:	3c 81       	ldd	r19, Y+4	; 0x04
    2d94:	22 30       	cpi	r18, 0x02	; 2
    2d96:	31 05       	cpc	r19, r1
    2d98:	81 f0       	breq	.+32     	; 0x2dba <GPIO_setupPortDirection+0x68>
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	83 30       	cpi	r24, 0x03	; 3
    2da0:	91 05       	cpc	r25, r1
    2da2:	81 f0       	breq	.+32     	; 0x2dc4 <GPIO_setupPortDirection+0x72>
    2da4:	13 c0       	rjmp	.+38     	; 0x2dcc <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = a_direction;
    2da6:	ea e3       	ldi	r30, 0x3A	; 58
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	80 83       	st	Z, r24
    2dae:	0e c0       	rjmp	.+28     	; 0x2dcc <GPIO_setupPortDirection+0x7a>
				break;
			case PORTB_ID:
				DDRB = a_direction;
    2db0:	e7 e3       	ldi	r30, 0x37	; 55
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	80 83       	st	Z, r24
    2db8:	09 c0       	rjmp	.+18     	; 0x2dcc <GPIO_setupPortDirection+0x7a>
				break;
			case PORTC_ID:
				DDRC = a_direction;
    2dba:	e4 e3       	ldi	r30, 0x34	; 52
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	80 83       	st	Z, r24
    2dc2:	04 c0       	rjmp	.+8      	; 0x2dcc <GPIO_setupPortDirection+0x7a>
				break;
			case PORTD_ID:
				DDRD = a_direction;
    2dc4:	e1 e3       	ldi	r30, 0x31	; 49
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	80 83       	st	Z, r24
			default:
				/* Wrong Port Error: Invalid GPIO port */
				break;
		}
	}
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	08 95       	ret

00002dda <GPIO_writePort>:
 * @param[in]  port_num     Type GPIO_Port     Range 0:3
 * @param[in]  Level        Type uint8         Range 0:255
 * @return none
 */
void GPIO_writePort(GPIO_Port a_port_num, uint8 a_level)
{
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <GPIO_writePort+0x6>
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <GPIO_writePort+0x8>
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	6a 83       	std	Y+2, r22	; 0x02
	if(a_port_num >= NUM_OF_PORTS)
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	84 30       	cpi	r24, 0x04	; 4
    2dee:	90 f5       	brcc	.+100    	; 0x2e54 <GPIO_writePort+0x7a>
		/* Wrong Input: Port number out of range */
	}
	else
	{
		/* Write the specified logic level to all pins in the specified GPIO port */
		switch(a_port_num)
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	3c 83       	std	Y+4, r19	; 0x04
    2df8:	2b 83       	std	Y+3, r18	; 0x03
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfe:	81 30       	cpi	r24, 0x01	; 1
    2e00:	91 05       	cpc	r25, r1
    2e02:	d1 f0       	breq	.+52     	; 0x2e38 <GPIO_writePort+0x5e>
    2e04:	2b 81       	ldd	r18, Y+3	; 0x03
    2e06:	3c 81       	ldd	r19, Y+4	; 0x04
    2e08:	22 30       	cpi	r18, 0x02	; 2
    2e0a:	31 05       	cpc	r19, r1
    2e0c:	2c f4       	brge	.+10     	; 0x2e18 <GPIO_writePort+0x3e>
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	9c 81       	ldd	r25, Y+4	; 0x04
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	61 f0       	breq	.+24     	; 0x2e2e <GPIO_writePort+0x54>
    2e16:	1e c0       	rjmp	.+60     	; 0x2e54 <GPIO_writePort+0x7a>
    2e18:	2b 81       	ldd	r18, Y+3	; 0x03
    2e1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e1c:	22 30       	cpi	r18, 0x02	; 2
    2e1e:	31 05       	cpc	r19, r1
    2e20:	81 f0       	breq	.+32     	; 0x2e42 <GPIO_writePort+0x68>
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	83 30       	cpi	r24, 0x03	; 3
    2e28:	91 05       	cpc	r25, r1
    2e2a:	81 f0       	breq	.+32     	; 0x2e4c <GPIO_writePort+0x72>
    2e2c:	13 c0       	rjmp	.+38     	; 0x2e54 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = a_level; /* Write the specified logic level to all pins in PORTA */
    2e2e:	eb e3       	ldi	r30, 0x3B	; 59
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	80 83       	st	Z, r24
    2e36:	0e c0       	rjmp	.+28     	; 0x2e54 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB = a_level; /* Write the specified logic level to all pins in PORTB */
    2e38:	e8 e3       	ldi	r30, 0x38	; 56
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	80 83       	st	Z, r24
    2e40:	09 c0       	rjmp	.+18     	; 0x2e54 <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC = a_level; /* Write the specified logic level to all pins in PORTC */
    2e42:	e5 e3       	ldi	r30, 0x35	; 53
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	80 83       	st	Z, r24
    2e4a:	04 c0       	rjmp	.+8      	; 0x2e54 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD = a_level; /* Write the specified logic level to all pins in PORTD */
    2e4c:	e2 e3       	ldi	r30, 0x32	; 50
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	80 83       	st	Z, r24
			default:
				/* Wrong Port Error: Invalid GPIO port */
				break;
		}
	}
}
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <GPIO_readPort>:
 *
 * @param[in]  port_num     Type GPIO_Port     Range 0:3
 * @return none
 */
uint8 GPIO_readPort(GPIO_Port a_port_num)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <GPIO_readPort+0x6>
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <GPIO_readPort+0x8>
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	89 83       	std	Y+1, r24	; 0x01
	if(a_port_num >= NUM_OF_PORTS)
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	84 30       	cpi	r24, 0x04	; 4
    2e74:	98 f5       	brcc	.+102    	; 0x2edc <GPIO_readPort+0x7a>
		/* Wrong Input: Port number out of range */
	}
	else
	{
		/* Read the state of all pins in the specified GPIO port */
		switch(a_port_num)
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	3c 83       	std	Y+4, r19	; 0x04
    2e7e:	2b 83       	std	Y+3, r18	; 0x03
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	91 05       	cpc	r25, r1
    2e88:	d1 f0       	breq	.+52     	; 0x2ebe <GPIO_readPort+0x5c>
    2e8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e8e:	22 30       	cpi	r18, 0x02	; 2
    2e90:	31 05       	cpc	r19, r1
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <GPIO_readPort+0x3c>
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	9c 81       	ldd	r25, Y+4	; 0x04
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	61 f0       	breq	.+24     	; 0x2eb4 <GPIO_readPort+0x52>
    2e9c:	1f c0       	rjmp	.+62     	; 0x2edc <GPIO_readPort+0x7a>
    2e9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ea2:	22 30       	cpi	r18, 0x02	; 2
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	81 f0       	breq	.+32     	; 0x2ec8 <GPIO_readPort+0x66>
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	83 30       	cpi	r24, 0x03	; 3
    2eae:	91 05       	cpc	r25, r1
    2eb0:	81 f0       	breq	.+32     	; 0x2ed2 <GPIO_readPort+0x70>
    2eb2:	14 c0       	rjmp	.+40     	; 0x2edc <GPIO_readPort+0x7a>
		{
			case PORTA_ID:
				return PINA;
    2eb4:	e9 e3       	ldi	r30, 0x39	; 57
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	90 81       	ld	r25, Z
    2eba:	9a 83       	std	Y+2, r25	; 0x02
    2ebc:	10 c0       	rjmp	.+32     	; 0x2ede <GPIO_readPort+0x7c>
			case PORTB_ID:
				return PINB;
    2ebe:	e6 e3       	ldi	r30, 0x36	; 54
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	20 81       	ld	r18, Z
    2ec4:	2a 83       	std	Y+2, r18	; 0x02
    2ec6:	0b c0       	rjmp	.+22     	; 0x2ede <GPIO_readPort+0x7c>
			case PORTC_ID:
				return PINC;
    2ec8:	e3 e3       	ldi	r30, 0x33	; 51
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	30 81       	ld	r19, Z
    2ece:	3a 83       	std	Y+2, r19	; 0x02
    2ed0:	06 c0       	rjmp	.+12     	; 0x2ede <GPIO_readPort+0x7c>
			case PORTD_ID:
				return PIND;
    2ed2:	e0 e3       	ldi	r30, 0x30	; 48
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	8a 83       	std	Y+2, r24	; 0x02
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <GPIO_readPort+0x7c>
				/* Wrong Port Error: Invalid GPIO port */
				break;
		}
	}
	/* Default return if any error occurred */
	return 0;
    2edc:	1a 82       	std	Y+2, r1	; 0x02
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <EEPROM_writeByte>:

/* ===================================================================================================
									  Function Definition
   ===================================================================================================*/
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <EEPROM_writeByte+0x6>
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <EEPROM_writeByte+0x8>
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2f00:	0e 94 a5 08 	call	0x114a	; 0x114a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2f04:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2f08:	88 30       	cpi	r24, 0x08	; 8
    2f0a:	11 f0       	breq	.+4      	; 0x2f10 <EEPROM_writeByte+0x22>
        return ERROR;
    2f0c:	1c 82       	std	Y+4, r1	; 0x04
    2f0e:	28 c0       	rjmp	.+80     	; 0x2f60 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	9a 81       	ldd	r25, Y+2	; 0x02
    2f14:	80 70       	andi	r24, 0x00	; 0
    2f16:	97 70       	andi	r25, 0x07	; 7
    2f18:	88 0f       	add	r24, r24
    2f1a:	89 2f       	mov	r24, r25
    2f1c:	88 1f       	adc	r24, r24
    2f1e:	99 0b       	sbc	r25, r25
    2f20:	91 95       	neg	r25
    2f22:	80 6a       	ori	r24, 0xA0	; 160
    2f24:	0e 94 c0 08 	call	0x1180	; 0x1180 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2f28:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2f2c:	88 31       	cpi	r24, 0x18	; 24
    2f2e:	11 f0       	breq	.+4      	; 0x2f34 <EEPROM_writeByte+0x46>
        return ERROR; 
    2f30:	1c 82       	std	Y+4, r1	; 0x04
    2f32:	16 c0       	rjmp	.+44     	; 0x2f60 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	0e 94 c0 08 	call	0x1180	; 0x1180 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2f3a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2f3e:	88 32       	cpi	r24, 0x28	; 40
    2f40:	11 f0       	breq	.+4      	; 0x2f46 <EEPROM_writeByte+0x58>
        return ERROR;
    2f42:	1c 82       	std	Y+4, r1	; 0x04
    2f44:	0d c0       	rjmp	.+26     	; 0x2f60 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	0e 94 c0 08 	call	0x1180	; 0x1180 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2f4c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2f50:	88 32       	cpi	r24, 0x28	; 40
    2f52:	11 f0       	breq	.+4      	; 0x2f58 <EEPROM_writeByte+0x6a>
        return ERROR;
    2f54:	1c 82       	std	Y+4, r1	; 0x04
    2f56:	04 c0       	rjmp	.+8      	; 0x2f60 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2f58:	0e 94 b5 08 	call	0x116a	; 0x116a <TWI_stop>
	
    return SUCCESS;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	8c 83       	std	Y+4, r24	; 0x04
    2f60:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <EEPROM_readByte+0x6>
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <EEPROM_readByte+0x8>
    2f78:	0f 92       	push	r0
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	9a 83       	std	Y+2, r25	; 0x02
    2f80:	89 83       	std	Y+1, r24	; 0x01
    2f82:	7c 83       	std	Y+4, r23	; 0x04
    2f84:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2f86:	0e 94 a5 08 	call	0x114a	; 0x114a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2f8a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2f8e:	88 30       	cpi	r24, 0x08	; 8
    2f90:	11 f0       	breq	.+4      	; 0x2f96 <EEPROM_readByte+0x26>
        return ERROR;
    2f92:	1d 82       	std	Y+5, r1	; 0x05
    2f94:	44 c0       	rjmp	.+136    	; 0x301e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9a:	80 70       	andi	r24, 0x00	; 0
    2f9c:	97 70       	andi	r25, 0x07	; 7
    2f9e:	88 0f       	add	r24, r24
    2fa0:	89 2f       	mov	r24, r25
    2fa2:	88 1f       	adc	r24, r24
    2fa4:	99 0b       	sbc	r25, r25
    2fa6:	91 95       	neg	r25
    2fa8:	80 6a       	ori	r24, 0xA0	; 160
    2faa:	0e 94 c0 08 	call	0x1180	; 0x1180 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2fae:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2fb2:	88 31       	cpi	r24, 0x18	; 24
    2fb4:	11 f0       	breq	.+4      	; 0x2fba <EEPROM_readByte+0x4a>
        return ERROR;
    2fb6:	1d 82       	std	Y+5, r1	; 0x05
    2fb8:	32 c0       	rjmp	.+100    	; 0x301e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	0e 94 c0 08 	call	0x1180	; 0x1180 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2fc0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2fc4:	88 32       	cpi	r24, 0x28	; 40
    2fc6:	11 f0       	breq	.+4      	; 0x2fcc <EEPROM_readByte+0x5c>
        return ERROR;
    2fc8:	1d 82       	std	Y+5, r1	; 0x05
    2fca:	29 c0       	rjmp	.+82     	; 0x301e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2fcc:	0e 94 a5 08 	call	0x114a	; 0x114a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2fd0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2fd4:	80 31       	cpi	r24, 0x10	; 16
    2fd6:	11 f0       	breq	.+4      	; 0x2fdc <EEPROM_readByte+0x6c>
        return ERROR;
    2fd8:	1d 82       	std	Y+5, r1	; 0x05
    2fda:	21 c0       	rjmp	.+66     	; 0x301e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe0:	80 70       	andi	r24, 0x00	; 0
    2fe2:	97 70       	andi	r25, 0x07	; 7
    2fe4:	88 0f       	add	r24, r24
    2fe6:	89 2f       	mov	r24, r25
    2fe8:	88 1f       	adc	r24, r24
    2fea:	99 0b       	sbc	r25, r25
    2fec:	91 95       	neg	r25
    2fee:	81 6a       	ori	r24, 0xA1	; 161
    2ff0:	0e 94 c0 08 	call	0x1180	; 0x1180 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2ff4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    2ff8:	80 34       	cpi	r24, 0x40	; 64
    2ffa:	11 f0       	breq	.+4      	; 0x3000 <EEPROM_readByte+0x90>
        return ERROR;
    2ffc:	1d 82       	std	Y+5, r1	; 0x05
    2ffe:	0f c0       	rjmp	.+30     	; 0x301e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    3000:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <TWI_readByteWithNACK>
    3004:	eb 81       	ldd	r30, Y+3	; 0x03
    3006:	fc 81       	ldd	r31, Y+4	; 0x04
    3008:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    300a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <TWI_getStatus>
    300e:	88 35       	cpi	r24, 0x58	; 88
    3010:	11 f0       	breq	.+4      	; 0x3016 <EEPROM_readByte+0xa6>
        return ERROR;
    3012:	1d 82       	std	Y+5, r1	; 0x05
    3014:	04 c0       	rjmp	.+8      	; 0x301e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    3016:	0e 94 b5 08 	call	0x116a	; 0x116a <TWI_stop>

    return SUCCESS;
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	8d 83       	std	Y+5, r24	; 0x05
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <DcMotor_init>:
 * @param[in]  none
 * @param[out] none
 * @return none
 */
void DcMotor_init(void)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_L_PORT_ID, MOTOR_L_PIN_ID, PIN_OUTPUT);
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	41 e0       	ldi	r20, 0x01	; 1
    303e:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_R_PORT_ID, MOTOR_R_PIN_ID, PIN_OUTPUT);
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	41 e0       	ldi	r20, 0x01	; 1
    3048:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_E_PORT_ID, MOTOR_E_PIN_ID, PIN_OUTPUT);
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	63 e0       	ldi	r22, 0x03	; 3
    3050:	41 e0       	ldi	r20, 0x01	; 1
    3052:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_L_PORT_ID, MOTOR_L_PIN_ID, LOGIC_LOW);
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	60 e0       	ldi	r22, 0x00	; 0
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
	GPIO_writePin(MOTOR_R_PORT_ID, MOTOR_R_PIN_ID, LOGIC_LOW);
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
}
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <DcMotor_Rotate>:
 * @param[in]  state   Type DcMotor_State   The state of the DC motor (STOP, CLOCKWISE, or ANTICLOCKWISE)
 * @param[in]  speed   Type uint8           The speed of the DC motor (0 to 100)
 * @return None
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	00 d0       	rcall	.+0      	; 0x3076 <DcMotor_Rotate+0x6>
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	6a 83       	std	Y+2, r22	; 0x02
    if (state == STOP) {
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	88 23       	and	r24, r24
    3082:	71 f4       	brne	.+28     	; 0x30a0 <DcMotor_Rotate+0x30>
    	/* Stop the motor by setting PWM duty cycle to 0 */
        TIMER0_setPwmDutyCycle(0);
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	0e 94 d6 10 	call	0x21ac	; 0x21ac <TIMER0_setPwmDutyCycle>
        /* Set up the motor pins to low */
        GPIO_writePin(MOTOR_L_PORT_ID, MOTOR_L_PIN_ID, LOGIC_LOW);
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	60 e0       	ldi	r22, 0x00	; 0
    308e:	40 e0       	ldi	r20, 0x00	; 0
    3090:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
        GPIO_writePin(MOTOR_R_PORT_ID, MOTOR_R_PIN_ID, LOGIC_LOW);
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	61 e0       	ldi	r22, 0x01	; 1
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
    309e:	21 c0       	rjmp	.+66     	; 0x30e2 <DcMotor_Rotate+0x72>
    }
    else if (state == CLOCKWISE)
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	81 30       	cpi	r24, 0x01	; 1
    30a4:	71 f4       	brne	.+28     	; 0x30c2 <DcMotor_Rotate+0x52>
    {
    	/* Set the PWM duty cycle for clockwise rotation */
        TIMER0_setPwmDutyCycle(speed);
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <TIMER0_setPwmDutyCycle>
        GPIO_writePin(MOTOR_L_PORT_ID, MOTOR_L_PIN_ID, LOGIC_LOW); /* Set the left motor pin to low */
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
        GPIO_writePin(MOTOR_R_PORT_ID, MOTOR_R_PIN_ID, LOGIC_HIGH); /* Set the right motor pin to high */
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	61 e0       	ldi	r22, 0x01	; 1
    30ba:	41 e0       	ldi	r20, 0x01	; 1
    30bc:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
    30c0:	10 c0       	rjmp	.+32     	; 0x30e2 <DcMotor_Rotate+0x72>
    }
    else if (state == ANTICLOCKWISE)
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	82 30       	cpi	r24, 0x02	; 2
    30c6:	69 f4       	brne	.+26     	; 0x30e2 <DcMotor_Rotate+0x72>
    {
    	/* Set the PWM duty cycle for anticlockwise rotation */
        TIMER0_setPwmDutyCycle(speed);
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	0e 94 d6 10 	call	0x21ac	; 0x21ac <TIMER0_setPwmDutyCycle>
        GPIO_writePin(MOTOR_L_PORT_ID, MOTOR_L_PIN_ID, LOGIC_HIGH); /* Set the left motor pin to high */
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	60 e0       	ldi	r22, 0x00	; 0
    30d2:	41 e0       	ldi	r20, 0x01	; 1
    30d4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
        GPIO_writePin(MOTOR_R_PORT_ID, MOTOR_R_PIN_ID, LOGIC_LOW); /* Set the right motor pin to low */
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	61 e0       	ldi	r22, 0x01	; 1
    30dc:	40 e0       	ldi	r20, 0x00	; 0
    30de:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
    }
}
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	08 95       	ret

000030ec <BUZZER_init>:
 * @param[in]  none
 * @param[out] none
 * @return none
 */
void BUZZER_init(void)
{
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    30f4:	82 e0       	ldi	r24, 0x02	; 2
    30f6:	63 e0       	ldi	r22, 0x03	; 3
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	0e 94 3d 14 	call	0x287a	; 0x287a <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	63 e0       	ldi	r22, 0x03	; 3
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
}
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <BUZZER_on>:
 *
 * @param None
 * @return None
 */
void BUZZER_on(void)
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
	/* Set the buzzer pin to high */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    3116:	82 e0       	ldi	r24, 0x02	; 2
    3118:	63 e0       	ldi	r22, 0x03	; 3
    311a:	41 e0       	ldi	r20, 0x01	; 1
    311c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
}
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <BUZZER_off>:
 *
 * @param None
 * @return None
 */
void BUZZER_off(void)
{
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
	/* Set the buzzer pin to low */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    312e:	82 e0       	ldi	r24, 0x02	; 2
    3130:	63 e0       	ldi	r22, 0x03	; 3
    3132:	40 e0       	ldi	r20, 0x00	; 0
    3134:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <GPIO_writePin>
}
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	08 95       	ret

0000313e <CONTROL_sysInit>:
 * @param[in]  none
 * @param[out]  none
 * @return none
 */
void CONTROL_sysInit(void)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62

	UART_init(&UART_Configuration);
    3146:	88 e6       	ldi	r24, 0x68	; 104
    3148:	91 e0       	ldi	r25, 0x01	; 1
    314a:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>

	DcMotor_init();
    314e:	0e 94 18 18 	call	0x3030	; 0x3030 <DcMotor_init>

	TWI_init(&TWI_Configuration);
    3152:	8f e6       	ldi	r24, 0x6F	; 111
    3154:	91 e0       	ldi	r25, 0x01	; 1
    3156:	0e 94 73 08 	call	0x10e6	; 0x10e6 <TWI_init>

	/* Set up a callback function for Timer 1 As to CONTROL_openDoor */
	TIMER_setCallBack(TIMER1, CONTROL_openDoor);
    315a:	23 e9       	ldi	r18, 0x93	; 147
    315c:	39 e1       	ldi	r19, 0x19	; 25
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	b9 01       	movw	r22, r18
    3162:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TIMER_setCallBack>

	BUZZER_init();
    3166:	0e 94 76 18 	call	0x30ec	; 0x30ec <BUZZER_init>

}
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <CONTROL_newPasswordSave>:
 *
 * @param None
 * @return None
 */
void CONTROL_newPasswordSave(void)
{
    3170:	0f 93       	push	r16
    3172:	1f 93       	push	r17
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	0f 92       	push	r0
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
    uint8 Pass_digit;

    /* Loop till get each digit of the password */
    for (Pass_digit = 0; Pass_digit < MAX_NUM_OF_DIGITS - 1; Pass_digit++)
    317e:	19 82       	std	Y+1, r1	; 0x01
    3180:	0c c0       	rjmp	.+24     	; 0x319a <CONTROL_newPasswordSave+0x2a>
    {
    	/* Receive send digit of the password via UART */
        Password[Pass_digit] = UART_recieveByte();
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	08 2f       	mov	r16, r24
    3186:	10 e0       	ldi	r17, 0x00	; 0
    3188:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    318c:	f8 01       	movw	r30, r16
    318e:	e3 57       	subi	r30, 0x73	; 115
    3190:	fe 4f       	sbci	r31, 0xFE	; 254
    3192:	80 83       	st	Z, r24
void CONTROL_newPasswordSave(void)
{
    uint8 Pass_digit;

    /* Loop till get each digit of the password */
    for (Pass_digit = 0; Pass_digit < MAX_NUM_OF_DIGITS - 1; Pass_digit++)
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	8f 5f       	subi	r24, 0xFF	; 255
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	85 30       	cpi	r24, 0x05	; 5
    319e:	88 f3       	brcs	.-30     	; 0x3182 <CONTROL_newPasswordSave+0x12>
    {
    	/* Receive send digit of the password via UART */
        Password[Pass_digit] = UART_recieveByte();
    }
}
    31a0:	0f 90       	pop	r0
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	08 95       	ret

000031ac <CONTROL_passwordCheck>:
 *
 * @param None
 * @return uint8
 */
uint8 CONTROL_passwordCheck(void)
{
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	62 97       	sbiw	r28, 0x12	; 18
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61

    uint8 Pass_digitnum;
    uint8 Pass_digit = 0;
    31c4:	19 8a       	std	Y+17, r1	; 0x11
    /* Counter to track the number of correct digits of the Password */
    uint8 Correct_num = 0;
    31c6:	1f 86       	std	Y+15, r1	; 0x0f

    /* Loop through each digit of the entered password */
    for (Pass_digitnum = 0; Pass_digitnum < MAX_NUM_OF_DIGITS - 1; Pass_digitnum++)
    31c8:	18 8a       	std	Y+16, r1	; 0x10
    31ca:	96 c0       	rjmp	.+300    	; 0x32f8 <CONTROL_passwordCheck+0x14c>
    {
    	/* Receive a byte (digit) of the password via UART */
    	ReEnterPass[Pass_digitnum] = UART_recieveByte();
    31cc:	88 89       	ldd	r24, Y+16	; 0x10
    31ce:	08 2f       	mov	r16, r24
    31d0:	10 e0       	ldi	r17, 0x00	; 0
    31d2:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    31d6:	f8 01       	movw	r30, r16
    31d8:	ed 56       	subi	r30, 0x6D	; 109
    31da:	fe 4f       	sbci	r31, 0xFE	; 254
    31dc:	80 83       	st	Z, r24

    	/* Read the corresponding digit from EEPROM */
    	EEPROM_readByte(0x0100 + Pass_digitnum, &Pass_digit);
    31de:	88 89       	ldd	r24, Y+16	; 0x10
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	80 50       	subi	r24, 0x00	; 0
    31e6:	9f 4f       	sbci	r25, 0xFF	; 255
    31e8:	9e 01       	movw	r18, r28
    31ea:	2f 5e       	subi	r18, 0xEF	; 239
    31ec:	3f 4f       	sbci	r19, 0xFF	; 255
    31ee:	b9 01       	movw	r22, r18
    31f0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <EEPROM_readByte>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	a0 e2       	ldi	r26, 0x20	; 32
    31fa:	b1 e4       	ldi	r27, 0x41	; 65
    31fc:	8b 87       	std	Y+11, r24	; 0x0b
    31fe:	9c 87       	std	Y+12, r25	; 0x0c
    3200:	ad 87       	std	Y+13, r26	; 0x0d
    3202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3204:	6b 85       	ldd	r22, Y+11	; 0x0b
    3206:	7c 85       	ldd	r23, Y+12	; 0x0c
    3208:	8d 85       	ldd	r24, Y+13	; 0x0d
    320a:	9e 85       	ldd	r25, Y+14	; 0x0e
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	4a ef       	ldi	r20, 0xFA	; 250
    3212:	54 e4       	ldi	r21, 0x44	; 68
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	8f 83       	std	Y+7, r24	; 0x07
    321e:	98 87       	std	Y+8, r25	; 0x08
    3220:	a9 87       	std	Y+9, r26	; 0x09
    3222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3224:	6f 81       	ldd	r22, Y+7	; 0x07
    3226:	78 85       	ldd	r23, Y+8	; 0x08
    3228:	89 85       	ldd	r24, Y+9	; 0x09
    322a:	9a 85       	ldd	r25, Y+10	; 0x0a
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	2c f4       	brge	.+10     	; 0x3246 <CONTROL_passwordCheck+0x9a>
		__ticks = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
    3244:	3f c0       	rjmp	.+126    	; 0x32c4 <CONTROL_passwordCheck+0x118>
	else if (__tmp > 65535)
    3246:	6f 81       	ldd	r22, Y+7	; 0x07
    3248:	78 85       	ldd	r23, Y+8	; 0x08
    324a:	89 85       	ldd	r24, Y+9	; 0x09
    324c:	9a 85       	ldd	r25, Y+10	; 0x0a
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	3f ef       	ldi	r19, 0xFF	; 255
    3252:	4f e7       	ldi	r20, 0x7F	; 127
    3254:	57 e4       	ldi	r21, 0x47	; 71
    3256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    325a:	18 16       	cp	r1, r24
    325c:	4c f5       	brge	.+82     	; 0x32b0 <CONTROL_passwordCheck+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3260:	7c 85       	ldd	r23, Y+12	; 0x0c
    3262:	8d 85       	ldd	r24, Y+13	; 0x0d
    3264:	9e 85       	ldd	r25, Y+14	; 0x0e
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e2       	ldi	r20, 0x20	; 32
    326c:	51 e4       	ldi	r21, 0x41	; 65
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <CONTROL_passwordCheck+0xfa>
    3288:	88 ec       	ldi	r24, 0xC8	; 200
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9c 83       	std	Y+4, r25	; 0x04
    328e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	9c 81       	ldd	r25, Y+4	; 0x04
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <CONTROL_passwordCheck+0xe8>
    3298:	9c 83       	std	Y+4, r25	; 0x04
    329a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	9e 81       	ldd	r25, Y+6	; 0x06
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	69 f7       	brne	.-38     	; 0x3288 <CONTROL_passwordCheck+0xdc>
    32ae:	14 c0       	rjmp	.+40     	; 0x32d8 <CONTROL_passwordCheck+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	89 83       	std	Y+1, r24	; 0x01
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	9a 81       	ldd	r25, Y+2	; 0x02
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <CONTROL_passwordCheck+0x124>
    32d4:	9a 83       	std	Y+2, r25	; 0x02
    32d6:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(10);

    	/* Check if the received digit matches the corresponding digit of the saved password in EEPROM */
    	if (ReEnterPass[Pass_digitnum] == Pass_digit)
    32d8:	88 89       	ldd	r24, Y+16	; 0x10
    32da:	88 2f       	mov	r24, r24
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	fc 01       	movw	r30, r24
    32e0:	ed 56       	subi	r30, 0x6D	; 109
    32e2:	fe 4f       	sbci	r31, 0xFE	; 254
    32e4:	90 81       	ld	r25, Z
    32e6:	89 89       	ldd	r24, Y+17	; 0x11
    32e8:	98 17       	cp	r25, r24
    32ea:	19 f4       	brne	.+6      	; 0x32f2 <CONTROL_passwordCheck+0x146>
    	{
    	    Correct_num++; /* Increment correct digit counter */
    32ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ee:	8f 5f       	subi	r24, 0xFF	; 255
    32f0:	8f 87       	std	Y+15, r24	; 0x0f
    uint8 Pass_digit = 0;
    /* Counter to track the number of correct digits of the Password */
    uint8 Correct_num = 0;

    /* Loop through each digit of the entered password */
    for (Pass_digitnum = 0; Pass_digitnum < MAX_NUM_OF_DIGITS - 1; Pass_digitnum++)
    32f2:	88 89       	ldd	r24, Y+16	; 0x10
    32f4:	8f 5f       	subi	r24, 0xFF	; 255
    32f6:	88 8b       	std	Y+16, r24	; 0x10
    32f8:	88 89       	ldd	r24, Y+16	; 0x10
    32fa:	85 30       	cpi	r24, 0x05	; 5
    32fc:	08 f4       	brcc	.+2      	; 0x3300 <CONTROL_passwordCheck+0x154>
    32fe:	66 cf       	rjmp	.-308    	; 0x31cc <CONTROL_passwordCheck+0x20>
    	    Correct_num++; /* Increment correct digit counter */
    	}
    }

    /* Check if all digits are correct */
    if (Correct_num == MAX_NUM_OF_DIGITS - 1)
    3300:	8f 85       	ldd	r24, Y+15	; 0x0f
    3302:	85 30       	cpi	r24, 0x05	; 5
    3304:	19 f4       	brne	.+6      	; 0x330c <CONTROL_passwordCheck+0x160>
    {
    	/* Return PASS_CORRECT if all digits are correct */
        return PASS_CORRECT;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	8a 8b       	std	Y+18, r24	; 0x12
    330a:	01 c0       	rjmp	.+2      	; 0x330e <CONTROL_passwordCheck+0x162>
    }
    else
    {
    	/* Return PASS_INCORRECT if any digit is incorrect */
        return PASS_INCORRECT;
    330c:	1a 8a       	std	Y+18, r1	; 0x12
    330e:	8a 89       	ldd	r24, Y+18	; 0x12
    }
}
    3310:	62 96       	adiw	r28, 0x12	; 18
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	cf 91       	pop	r28
    331e:	df 91       	pop	r29
    3320:	1f 91       	pop	r17
    3322:	0f 91       	pop	r16
    3324:	08 95       	ret

00003326 <CONTROL_openDoor>:
 *
 * @param None
 * @return None
 */
void CONTROL_openDoor(void)
{
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    if (Error_state == NORMAL)
    332e:	80 91 9a 01 	lds	r24, 0x019A
    3332:	88 23       	and	r24, r24
    3334:	79 f5       	brne	.+94     	; 0x3394 <CONTROL_openDoor+0x6e>
    {
    	/* Increment the door open ticks counter as every tick timer counts 7.5 sec */
        opendoor_ticks++;
    3336:	80 91 99 01 	lds	r24, 0x0199
    333a:	8f 5f       	subi	r24, 0xFF	; 255
    333c:	80 93 99 01 	sts	0x0199, r24

        if (opendoor_ticks == 2)
    3340:	80 91 99 01 	lds	r24, 0x0199
    3344:	82 30       	cpi	r24, 0x02	; 2
    3346:	51 f4       	brne	.+20     	; 0x335c <CONTROL_openDoor+0x36>
        {
        	/* Set the compare match value for timer 1 to count 3 sec */
            TIMER_setCompareMatch(TIMER1, 23437);
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	6d e8       	ldi	r22, 0x8D	; 141
    334c:	7b e5       	ldi	r23, 0x5B	; 91
    334e:	0e 94 16 10 	call	0x202c	; 0x202c <TIMER_setCompareMatch>
            /* Stop the motor for 3 sec*/
            DcMotor_Rotate(STOP, 0);
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	0e 94 38 18 	call	0x3070	; 0x3070 <DcMotor_Rotate>
    335a:	3b c0       	rjmp	.+118    	; 0x33d2 <CONTROL_openDoor+0xac>
        }
        else if (opendoor_ticks == 3)
    335c:	80 91 99 01 	lds	r24, 0x0199
    3360:	83 30       	cpi	r24, 0x03	; 3
    3362:	51 f4       	brne	.+20     	; 0x3378 <CONTROL_openDoor+0x52>
        {
        	/* Set the compare match value for timer 1 to count 15 sec */
            TIMER_setCompareMatch(TIMER1, 58594);
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	62 ee       	ldi	r22, 0xE2	; 226
    3368:	74 ee       	ldi	r23, 0xE4	; 228
    336a:	0e 94 16 10 	call	0x202c	; 0x202c <TIMER_setCompareMatch>
            /* Rotate the motor anticlockwise for 15 sec */
            DcMotor_Rotate(ANTICLOCKWISE, 100);
    336e:	82 e0       	ldi	r24, 0x02	; 2
    3370:	64 e6       	ldi	r22, 0x64	; 100
    3372:	0e 94 38 18 	call	0x3070	; 0x3070 <DcMotor_Rotate>
    3376:	2d c0       	rjmp	.+90     	; 0x33d2 <CONTROL_openDoor+0xac>
        }
        else if (opendoor_ticks == 4)
    3378:	80 91 99 01 	lds	r24, 0x0199
    337c:	84 30       	cpi	r24, 0x04	; 4
    337e:	49 f5       	brne	.+82     	; 0x33d2 <CONTROL_openDoor+0xac>
        {
        	/* Stop the motor */
            DcMotor_Rotate(STOP, 0);
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	60 e0       	ldi	r22, 0x00	; 0
    3384:	0e 94 38 18 	call	0x3070	; 0x3070 <DcMotor_Rotate>
            /* Deinitialize timer 1 */
            TIMER_deInit(TIMER1);
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	0e 94 93 10 	call	0x2126	; 0x2126 <TIMER_deInit>
            /* Reset the door open ticks counter */
            opendoor_ticks = 0;
    338e:	10 92 99 01 	sts	0x0199, r1
    3392:	1f c0       	rjmp	.+62     	; 0x33d2 <CONTROL_openDoor+0xac>
        }
    }
    else if (Error_state_ticks < 8 && Error_state == STATE_ERROR)
    3394:	80 91 9b 01 	lds	r24, 0x019B
    3398:	88 30       	cpi	r24, 0x08	; 8
    339a:	50 f4       	brcc	.+20     	; 0x33b0 <CONTROL_openDoor+0x8a>
    339c:	80 91 9a 01 	lds	r24, 0x019A
    33a0:	81 31       	cpi	r24, 0x11	; 17
    33a2:	31 f4       	brne	.+12     	; 0x33b0 <CONTROL_openDoor+0x8a>
    {
    	/* Increment the error state ticks counter as evrey tick it counts 7.5 sec*/
        Error_state_ticks++;
    33a4:	80 91 9b 01 	lds	r24, 0x019B
    33a8:	8f 5f       	subi	r24, 0xFF	; 255
    33aa:	80 93 9b 01 	sts	0x019B, r24
    33ae:	11 c0       	rjmp	.+34     	; 0x33d2 <CONTROL_openDoor+0xac>
    }
    else if (Error_state_ticks >= 8 && Error_state == STATE_ERROR)
    33b0:	80 91 9b 01 	lds	r24, 0x019B
    33b4:	88 30       	cpi	r24, 0x08	; 8
    33b6:	68 f0       	brcs	.+26     	; 0x33d2 <CONTROL_openDoor+0xac>
    33b8:	80 91 9a 01 	lds	r24, 0x019A
    33bc:	81 31       	cpi	r24, 0x11	; 17
    33be:	49 f4       	brne	.+18     	; 0x33d2 <CONTROL_openDoor+0xac>
    {
    	/* When Timer 1 Reaches 1 Min Reset the error state to normal*/
        Error_state = NORMAL;
    33c0:	10 92 9a 01 	sts	0x019A, r1
        /* Reset the error state ticks counter */
        Error_state_ticks = 0;
    33c4:	10 92 9b 01 	sts	0x019B, r1
        /* Deinitialize timer 1 */
        TIMER_deInit(TIMER1);
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	0e 94 93 10 	call	0x2126	; 0x2126 <TIMER_deInit>
        /* Turn off the buzzer */
        BUZZER_off();
    33ce:	0e 94 93 18 	call	0x3126	; 0x3126 <BUZZER_off>
    }
}
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <CONTROL_savePasswordMemory>:
 *
 * @param None
 * @return None
 */
void CONTROL_savePasswordMemory(void)
{
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	2f 97       	sbiw	r28, 0x0f	; 15
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    uint8 Pass_digitnum;

    /* Loop through each digit of the password */
    for (Pass_digitnum = 0; Pass_digitnum < MAX_NUM_OF_DIGITS - 1; Pass_digitnum++)
    33ec:	1f 86       	std	Y+15, r1	; 0x0f
    33ee:	86 c0       	rjmp	.+268    	; 0x34fc <CONTROL_savePasswordMemory+0x124>
    {
    	/* Write the each password digit to EEPROM */
        EEPROM_writeByte(0x0100 + Pass_digitnum, Password[Pass_digitnum]);
    33f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f2:	88 2f       	mov	r24, r24
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	80 50       	subi	r24, 0x00	; 0
    33f8:	9f 4f       	sbci	r25, 0xFF	; 255
    33fa:	ac 01       	movw	r20, r24
    33fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33fe:	88 2f       	mov	r24, r24
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	fc 01       	movw	r30, r24
    3404:	e3 57       	subi	r30, 0x73	; 115
    3406:	fe 4f       	sbci	r31, 0xFE	; 254
    3408:	20 81       	ld	r18, Z
    340a:	ca 01       	movw	r24, r20
    340c:	62 2f       	mov	r22, r18
    340e:	0e 94 77 17 	call	0x2eee	; 0x2eee <EEPROM_writeByte>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	a0 e2       	ldi	r26, 0x20	; 32
    3418:	b1 e4       	ldi	r27, 0x41	; 65
    341a:	8b 87       	std	Y+11, r24	; 0x0b
    341c:	9c 87       	std	Y+12, r25	; 0x0c
    341e:	ad 87       	std	Y+13, r26	; 0x0d
    3420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3422:	6b 85       	ldd	r22, Y+11	; 0x0b
    3424:	7c 85       	ldd	r23, Y+12	; 0x0c
    3426:	8d 85       	ldd	r24, Y+13	; 0x0d
    3428:	9e 85       	ldd	r25, Y+14	; 0x0e
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	4a ef       	ldi	r20, 0xFA	; 250
    3430:	54 e4       	ldi	r21, 0x44	; 68
    3432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	8f 83       	std	Y+7, r24	; 0x07
    343c:	98 87       	std	Y+8, r25	; 0x08
    343e:	a9 87       	std	Y+9, r26	; 0x09
    3440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	40 e8       	ldi	r20, 0x80	; 128
    3450:	5f e3       	ldi	r21, 0x3F	; 63
    3452:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3456:	88 23       	and	r24, r24
    3458:	2c f4       	brge	.+10     	; 0x3464 <CONTROL_savePasswordMemory+0x8c>
		__ticks = 1;
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	9e 83       	std	Y+6, r25	; 0x06
    3460:	8d 83       	std	Y+5, r24	; 0x05
    3462:	3f c0       	rjmp	.+126    	; 0x34e2 <CONTROL_savePasswordMemory+0x10a>
	else if (__tmp > 65535)
    3464:	6f 81       	ldd	r22, Y+7	; 0x07
    3466:	78 85       	ldd	r23, Y+8	; 0x08
    3468:	89 85       	ldd	r24, Y+9	; 0x09
    346a:	9a 85       	ldd	r25, Y+10	; 0x0a
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	3f ef       	ldi	r19, 0xFF	; 255
    3470:	4f e7       	ldi	r20, 0x7F	; 127
    3472:	57 e4       	ldi	r21, 0x47	; 71
    3474:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3478:	18 16       	cp	r1, r24
    347a:	4c f5       	brge	.+82     	; 0x34ce <CONTROL_savePasswordMemory+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347c:	6b 85       	ldd	r22, Y+11	; 0x0b
    347e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3480:	8d 85       	ldd	r24, Y+13	; 0x0d
    3482:	9e 85       	ldd	r25, Y+14	; 0x0e
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e2       	ldi	r20, 0x20	; 32
    348a:	51 e4       	ldi	r21, 0x41	; 65
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	bc 01       	movw	r22, r24
    3496:	cd 01       	movw	r24, r26
    3498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
    34a4:	0f c0       	rjmp	.+30     	; 0x34c4 <CONTROL_savePasswordMemory+0xec>
    34a6:	88 ec       	ldi	r24, 0xC8	; 200
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9c 83       	std	Y+4, r25	; 0x04
    34ac:	8b 83       	std	Y+3, r24	; 0x03
    34ae:	8b 81       	ldd	r24, Y+3	; 0x03
    34b0:	9c 81       	ldd	r25, Y+4	; 0x04
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	f1 f7       	brne	.-4      	; 0x34b2 <CONTROL_savePasswordMemory+0xda>
    34b6:	9c 83       	std	Y+4, r25	; 0x04
    34b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ba:	8d 81       	ldd	r24, Y+5	; 0x05
    34bc:	9e 81       	ldd	r25, Y+6	; 0x06
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	9e 83       	std	Y+6, r25	; 0x06
    34c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c4:	8d 81       	ldd	r24, Y+5	; 0x05
    34c6:	9e 81       	ldd	r25, Y+6	; 0x06
    34c8:	00 97       	sbiw	r24, 0x00	; 0
    34ca:	69 f7       	brne	.-38     	; 0x34a6 <CONTROL_savePasswordMemory+0xce>
    34cc:	14 c0       	rjmp	.+40     	; 0x34f6 <CONTROL_savePasswordMemory+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ce:	6f 81       	ldd	r22, Y+7	; 0x07
    34d0:	78 85       	ldd	r23, Y+8	; 0x08
    34d2:	89 85       	ldd	r24, Y+9	; 0x09
    34d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	9e 83       	std	Y+6, r25	; 0x06
    34e0:	8d 83       	std	Y+5, r24	; 0x05
    34e2:	8d 81       	ldd	r24, Y+5	; 0x05
    34e4:	9e 81       	ldd	r25, Y+6	; 0x06
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	89 83       	std	Y+1, r24	; 0x01
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	9a 81       	ldd	r25, Y+2	; 0x02
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <CONTROL_savePasswordMemory+0x116>
    34f2:	9a 83       	std	Y+2, r25	; 0x02
    34f4:	89 83       	std	Y+1, r24	; 0x01
void CONTROL_savePasswordMemory(void)
{
    uint8 Pass_digitnum;

    /* Loop through each digit of the password */
    for (Pass_digitnum = 0; Pass_digitnum < MAX_NUM_OF_DIGITS - 1; Pass_digitnum++)
    34f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f8:	8f 5f       	subi	r24, 0xFF	; 255
    34fa:	8f 87       	std	Y+15, r24	; 0x0f
    34fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fe:	85 30       	cpi	r24, 0x05	; 5
    3500:	08 f4       	brcc	.+2      	; 0x3504 <CONTROL_savePasswordMemory+0x12c>
    3502:	76 cf       	rjmp	.-276    	; 0x33f0 <CONTROL_savePasswordMemory+0x18>
    	/* Write the each password digit to EEPROM */
        EEPROM_writeByte(0x0100 + Pass_digitnum, Password[Pass_digitnum]);
        /* Delay for EEPROM write operation */
        _delay_ms(10);
    }
}
    3504:	2f 96       	adiw	r28, 0x0f	; 15
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <main>:
uint8 try=0;
/* ===================================================================================================
									             Main Project
   ===================================================================================================*/
int main(void)
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	00 d0       	rcall	.+0      	; 0x351c <main+0x6>
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
	/* Enable global Interrupt Enable */
	ENABLE_INTERRUPTS();
    3520:	78 94       	sei

	uint8 MatchedPass = PASS_UNMATCHED;
    3522:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received = RECIEVED_NOTHING;
    3524:	19 82       	std	Y+1, r1	; 0x01
	/* Initialize the control system */
	CONTROL_sysInit();
    3526:	0e 94 9f 18 	call	0x313e	; 0x313e <CONTROL_sysInit>
    352a:	1d c0       	rjmp	.+58     	; 0x3566 <main+0x50>

	/* Loop until the MatchedPass is changed */
	while (MatchedPass == PASS_UNMATCHED)
	{
	    /* Check if data is available to receive */
	    if (BIT_IS_SET(UCSRA, RXC))
    352c:	eb e2       	ldi	r30, 0x2B	; 43
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	88 23       	and	r24, r24
    3534:	c4 f4       	brge	.+48     	; 0x3566 <main+0x50>
	    {
	        /* Check if HMI_ECU is ready to send */
	        if (UART_recieveByte() == MCU1_READYTOSEND)
    3536:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    353a:	8a 30       	cpi	r24, 0x0A	; 10
    353c:	19 f4       	brne	.+6      	; 0x3544 <main+0x2e>
	        {
	            /* Send that Control ECU is ready to receive signal */
	            UART_sendByte(MCU2_READYTORECIEVE);
    353e:	8d e0       	ldi	r24, 0x0D	; 13
    3540:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
	        }

	        /* Save new password */
	        CONTROL_newPasswordSave();
    3544:	0e 94 b8 18 	call	0x3170	; 0x3170 <CONTROL_newPasswordSave>

	        /* Save the Password in the eeprom */
	    	CONTROL_savePasswordMemory();
    3548:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <CONTROL_savePasswordMemory>

	        /* Check the password */
	        MatchedPass = CONTROL_passwordCheck();
    354c:	0e 94 d6 18 	call	0x31ac	; 0x31ac <CONTROL_passwordCheck>
    3550:	8a 83       	std	Y+2, r24	; 0x02

	        /* Send Control_ECU ready to send signal */
	        UART_sendByte(MCU2_READYTOSEND);
    3552:	8c e0       	ldi	r24, 0x0C	; 12
    3554:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

	        /* Wait until HMI_ECU is ready to receive */
	        while (UART_recieveByte() != MCU1_READYTORECIEVE);
    3558:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    355c:	8b 30       	cpi	r24, 0x0B	; 11
    355e:	e1 f7       	brne	.-8      	; 0x3558 <main+0x42>

            /* Send if password are matched or not to HMI_ECU */
	        UART_sendByte(MatchedPass);
    3560:	8a 81       	ldd	r24, Y+2	; 0x02
    3562:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
	uint8 received = RECIEVED_NOTHING;
	/* Initialize the control system */
	CONTROL_sysInit();

	/* Loop until the MatchedPass is changed */
	while (MatchedPass == PASS_UNMATCHED)
    3566:	8a 81       	ldd	r24, Y+2	; 0x02
    3568:	88 23       	and	r24, r24
    356a:	01 f3       	breq	.-64     	; 0x352c <main+0x16>


for(;;)
{
	/* Re initiallize Matchedpass as unmatched to reuse it if needed */
	MatchedPass = PASS_UNMATCHED;
    356c:	1a 82       	std	Y+2, r1	; 0x02

	/* Check if HMI_ECU is ready to send */
	if (UART_recieveByte() == MCU1_READYTOSEND) {
    356e:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    3572:	8a 30       	cpi	r24, 0x0A	; 10
    3574:	31 f4       	brne	.+12     	; 0x3582 <main+0x6c>
	    /* Send Control_ECU ready to receive signal */
	    UART_sendByte(MCU2_READYTORECIEVE);
    3576:	8d e0       	ldi	r24, 0x0D	; 13
    3578:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

	    /* Receive the required action from UART */
	    received = UART_recieveByte();
    357c:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    3580:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Check received data */
	if (received == CHECKPASS) {
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	8e 30       	cpi	r24, 0x0E	; 14
    3586:	69 f5       	brne	.+90     	; 0x35e2 <main+0xcc>
	    /* Check the password */
	    MatchedPass = CONTROL_passwordCheck();
    3588:	0e 94 d6 18 	call	0x31ac	; 0x31ac <CONTROL_passwordCheck>
    358c:	8a 83       	std	Y+2, r24	; 0x02

	    /* Send Control ECU ready to send signal */
	    UART_sendByte(MCU2_READYTOSEND);
    358e:	8c e0       	ldi	r24, 0x0C	; 12
    3590:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

	    /* Wait until HMI_ECU is ready to receive */
	        while (UART_recieveByte() != MCU1_READYTORECIEVE);
    3594:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    3598:	8b 30       	cpi	r24, 0x0B	; 11
    359a:	e1 f7       	brne	.-8      	; 0x3594 <main+0x7e>

	        /* Send if password are matched or not to HMI_ECU */
	        UART_sendByte(MatchedPass);
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

	        if (MatchedPass == PASS_MATCHED)
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	81 30       	cpi	r24, 0x01	; 1
    35a6:	19 f4       	brne	.+6      	; 0x35ae <main+0x98>
	        {
	            try = 0; /* Reset tries counter */
    35a8:	10 92 9c 01 	sts	0x019C, r1
    35ac:	05 c0       	rjmp	.+10     	; 0x35b8 <main+0xa2>
	        }
	        else
	        {
	        	/* Increment tries counter */
	            try++;
    35ae:	80 91 9c 01 	lds	r24, 0x019C
    35b2:	8f 5f       	subi	r24, 0xFF	; 255
    35b4:	80 93 9c 01 	sts	0x019C, r24
	        }

	        if (try == MAX_PASS_TRIES)
    35b8:	80 91 9c 01 	lds	r24, 0x019C
    35bc:	83 30       	cpi	r24, 0x03	; 3
    35be:	79 f4       	brne	.+30     	; 0x35de <main+0xc8>
	        {
	        	/* Initialize the timer to count 1 min */
	            TIMER_init(&TIMER_Configuration);
    35c0:	84 e8       	ldi	r24, 0x84	; 132
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	0e 94 0c 09 	call	0x1218	; 0x1218 <TIMER_init>
	            /* Set the State as error state */
	            Error_state = STATE_ERROR;
    35c8:	81 e1       	ldi	r24, 0x11	; 17
    35ca:	80 93 9a 01 	sts	0x019A, r24
	            /* Turn on the buzzer */
	            BUZZER_on();
    35ce:	0e 94 87 18 	call	0x310e	; 0x310e <BUZZER_on>
	            try = 0; /* Reset 'try' counter */
    35d2:	10 92 9c 01 	sts	0x019C, r1

	            /* Wait until the error state is resolved */
	            while (Error_state == STATE_ERROR);
    35d6:	80 91 9a 01 	lds	r24, 0x019A
    35da:	81 31       	cpi	r24, 0x11	; 17
    35dc:	e1 f3       	breq	.-8      	; 0x35d6 <main+0xc0>
	        }

	        /* Reset received flag */
	        received = RECIEVED_NOTHING;
    35de:	19 82       	std	Y+1, r1	; 0x01
    35e0:	c5 cf       	rjmp	.-118    	; 0x356c <main+0x56>

	} else if (received == CHANGEPASS) {
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	8f 30       	cpi	r24, 0x0F	; 15
    35e6:	19 f5       	brne	.+70     	; 0x362e <main+0x118>
    35e8:	1d c0       	rjmp	.+58     	; 0x3624 <main+0x10e>
	    /* Loop until a matched password is obtained */
	    while (MatchedPass == PASS_UNMATCHED) {
	        /* Check if data is available to receive */
	        if (BIT_IS_SET(UCSRA, RXC)) {
    35ea:	eb e2       	ldi	r30, 0x2B	; 43
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	88 23       	and	r24, r24
    35f2:	c4 f4       	brge	.+48     	; 0x3624 <main+0x10e>
	            /* Check if HMI_ECU is ready to send */
	            if (UART_recieveByte() == MCU1_READYTOSEND) {
    35f4:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    35f8:	8a 30       	cpi	r24, 0x0A	; 10
    35fa:	19 f4       	brne	.+6      	; 0x3602 <main+0xec>
	                /* Send Control_ECU ready to receive signal */
	                UART_sendByte(MCU2_READYTORECIEVE);
    35fc:	8d e0       	ldi	r24, 0x0D	; 13
    35fe:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
	            }

	            /* Save new password */
	            CONTROL_newPasswordSave();
    3602:	0e 94 b8 18 	call	0x3170	; 0x3170 <CONTROL_newPasswordSave>

	    		/* Save the Password in the eeprom */
		    	CONTROL_savePasswordMemory();
    3606:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <CONTROL_savePasswordMemory>

	            /* Check the password */
	            MatchedPass = CONTROL_passwordCheck();
    360a:	0e 94 d6 18 	call	0x31ac	; 0x31ac <CONTROL_passwordCheck>
    360e:	8a 83       	std	Y+2, r24	; 0x02

	            /* Send Control ECU ready to send signal */
	            UART_sendByte(MCU2_READYTOSEND);
    3610:	8c e0       	ldi	r24, 0x0C	; 12
    3612:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

	            /* Wait until HMI_ECU is ready to receive */
	            while (UART_recieveByte() != MCU1_READYTORECIEVE);
    3616:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    361a:	8b 30       	cpi	r24, 0x0B	; 11
    361c:	e1 f7       	brne	.-8      	; 0x3616 <main+0x100>

	            /* Send if password are matched or not to HMI_ECU */
	            UART_sendByte(MatchedPass);
    361e:	8a 81       	ldd	r24, Y+2	; 0x02
    3620:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
	        /* Reset received flag */
	        received = RECIEVED_NOTHING;

	} else if (received == CHANGEPASS) {
	    /* Loop until a matched password is obtained */
	    while (MatchedPass == PASS_UNMATCHED) {
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	88 23       	and	r24, r24
    3628:	01 f3       	breq	.-64     	; 0x35ea <main+0xd4>
	            /* Send if password are matched or not to HMI_ECU */
	            UART_sendByte(MatchedPass);
	        }
	    }
	    /* Reset received flag */
	    received = RECIEVED_NOTHING;
    362a:	19 82       	std	Y+1, r1	; 0x01
    362c:	9f cf       	rjmp	.-194    	; 0x356c <main+0x56>
	}
	else if (received == OPEN_DOOR)
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	80 31       	cpi	r24, 0x10	; 16
    3632:	09 f0       	breq	.+2      	; 0x3636 <main+0x120>
    3634:	9b cf       	rjmp	.-202    	; 0x356c <main+0x56>
	{
		    TIMER_init(&TIMER_Configuration);
    3636:	84 e8       	ldi	r24, 0x84	; 132
    3638:	91 e0       	ldi	r25, 0x01	; 1
    363a:	0e 94 0c 09 	call	0x1218	; 0x1218 <TIMER_init>
		    DcMotor_Rotate(CLOCKWISE, 100);
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	64 e6       	ldi	r22, 0x64	; 100
    3642:	0e 94 38 18 	call	0x3070	; 0x3070 <DcMotor_Rotate>
		 /* Reset received flag */
			received = RECIEVED_NOTHING;
    3646:	19 82       	std	Y+1, r1	; 0x01
    3648:	91 cf       	rjmp	.-222    	; 0x356c <main+0x56>

0000364a <__mulsi3>:
    364a:	62 9f       	mul	r22, r18
    364c:	d0 01       	movw	r26, r0
    364e:	73 9f       	mul	r23, r19
    3650:	f0 01       	movw	r30, r0
    3652:	82 9f       	mul	r24, r18
    3654:	e0 0d       	add	r30, r0
    3656:	f1 1d       	adc	r31, r1
    3658:	64 9f       	mul	r22, r20
    365a:	e0 0d       	add	r30, r0
    365c:	f1 1d       	adc	r31, r1
    365e:	92 9f       	mul	r25, r18
    3660:	f0 0d       	add	r31, r0
    3662:	83 9f       	mul	r24, r19
    3664:	f0 0d       	add	r31, r0
    3666:	74 9f       	mul	r23, r20
    3668:	f0 0d       	add	r31, r0
    366a:	65 9f       	mul	r22, r21
    366c:	f0 0d       	add	r31, r0
    366e:	99 27       	eor	r25, r25
    3670:	72 9f       	mul	r23, r18
    3672:	b0 0d       	add	r27, r0
    3674:	e1 1d       	adc	r30, r1
    3676:	f9 1f       	adc	r31, r25
    3678:	63 9f       	mul	r22, r19
    367a:	b0 0d       	add	r27, r0
    367c:	e1 1d       	adc	r30, r1
    367e:	f9 1f       	adc	r31, r25
    3680:	bd 01       	movw	r22, r26
    3682:	cf 01       	movw	r24, r30
    3684:	11 24       	eor	r1, r1
    3686:	08 95       	ret

00003688 <__udivmodsi4>:
    3688:	a1 e2       	ldi	r26, 0x21	; 33
    368a:	1a 2e       	mov	r1, r26
    368c:	aa 1b       	sub	r26, r26
    368e:	bb 1b       	sub	r27, r27
    3690:	fd 01       	movw	r30, r26
    3692:	0d c0       	rjmp	.+26     	; 0x36ae <__udivmodsi4_ep>

00003694 <__udivmodsi4_loop>:
    3694:	aa 1f       	adc	r26, r26
    3696:	bb 1f       	adc	r27, r27
    3698:	ee 1f       	adc	r30, r30
    369a:	ff 1f       	adc	r31, r31
    369c:	a2 17       	cp	r26, r18
    369e:	b3 07       	cpc	r27, r19
    36a0:	e4 07       	cpc	r30, r20
    36a2:	f5 07       	cpc	r31, r21
    36a4:	20 f0       	brcs	.+8      	; 0x36ae <__udivmodsi4_ep>
    36a6:	a2 1b       	sub	r26, r18
    36a8:	b3 0b       	sbc	r27, r19
    36aa:	e4 0b       	sbc	r30, r20
    36ac:	f5 0b       	sbc	r31, r21

000036ae <__udivmodsi4_ep>:
    36ae:	66 1f       	adc	r22, r22
    36b0:	77 1f       	adc	r23, r23
    36b2:	88 1f       	adc	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	1a 94       	dec	r1
    36b8:	69 f7       	brne	.-38     	; 0x3694 <__udivmodsi4_loop>
    36ba:	60 95       	com	r22
    36bc:	70 95       	com	r23
    36be:	80 95       	com	r24
    36c0:	90 95       	com	r25
    36c2:	9b 01       	movw	r18, r22
    36c4:	ac 01       	movw	r20, r24
    36c6:	bd 01       	movw	r22, r26
    36c8:	cf 01       	movw	r24, r30
    36ca:	08 95       	ret

000036cc <__prologue_saves__>:
    36cc:	2f 92       	push	r2
    36ce:	3f 92       	push	r3
    36d0:	4f 92       	push	r4
    36d2:	5f 92       	push	r5
    36d4:	6f 92       	push	r6
    36d6:	7f 92       	push	r7
    36d8:	8f 92       	push	r8
    36da:	9f 92       	push	r9
    36dc:	af 92       	push	r10
    36de:	bf 92       	push	r11
    36e0:	cf 92       	push	r12
    36e2:	df 92       	push	r13
    36e4:	ef 92       	push	r14
    36e6:	ff 92       	push	r15
    36e8:	0f 93       	push	r16
    36ea:	1f 93       	push	r17
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	ca 1b       	sub	r28, r26
    36f6:	db 0b       	sbc	r29, r27
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	09 94       	ijmp

00003704 <__epilogue_restores__>:
    3704:	2a 88       	ldd	r2, Y+18	; 0x12
    3706:	39 88       	ldd	r3, Y+17	; 0x11
    3708:	48 88       	ldd	r4, Y+16	; 0x10
    370a:	5f 84       	ldd	r5, Y+15	; 0x0f
    370c:	6e 84       	ldd	r6, Y+14	; 0x0e
    370e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3710:	8c 84       	ldd	r8, Y+12	; 0x0c
    3712:	9b 84       	ldd	r9, Y+11	; 0x0b
    3714:	aa 84       	ldd	r10, Y+10	; 0x0a
    3716:	b9 84       	ldd	r11, Y+9	; 0x09
    3718:	c8 84       	ldd	r12, Y+8	; 0x08
    371a:	df 80       	ldd	r13, Y+7	; 0x07
    371c:	ee 80       	ldd	r14, Y+6	; 0x06
    371e:	fd 80       	ldd	r15, Y+5	; 0x05
    3720:	0c 81       	ldd	r16, Y+4	; 0x04
    3722:	1b 81       	ldd	r17, Y+3	; 0x03
    3724:	aa 81       	ldd	r26, Y+2	; 0x02
    3726:	b9 81       	ldd	r27, Y+1	; 0x01
    3728:	ce 0f       	add	r28, r30
    372a:	d1 1d       	adc	r29, r1
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	f8 94       	cli
    3730:	de bf       	out	0x3e, r29	; 62
    3732:	0f be       	out	0x3f, r0	; 63
    3734:	cd bf       	out	0x3d, r28	; 61
    3736:	ed 01       	movw	r28, r26
    3738:	08 95       	ret

0000373a <_exit>:
    373a:	f8 94       	cli

0000373c <__stop_program>:
    373c:	ff cf       	rjmp	.-2      	; 0x373c <__stop_program>
