
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024c  00800060  00005772  00005806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008002ac  008002ac  00005a52  2**0
                  ALLOC
  3 .stab         000047dc  00000000  00000000  00005a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002846  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ca76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000cc16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ce08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010599  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011770  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__vector_4>
      14:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_7>
      20:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__vector_8>
      24:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__vector_9>
      28:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__vector_10>
      2c:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 24 	call	0x4980	; 0x4980 <main>
      8a:	0c 94 b7 2b 	jmp	0x576e	; 0x576e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 2b 	jmp	0x5676	; 0x5676 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 2b 	jmp	0x56ae	; 0x56ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 2b 	jmp	0x568e	; 0x568e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 2b 	jmp	0x568e	; 0x568e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 2b 	jmp	0x5676	; 0x5676 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 2b 	jmp	0x56ae	; 0x56ae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 2b 	jmp	0x5686	; 0x5686 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e9       	ldi	r22, 0x91	; 145
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5f 2b 	jmp	0x56be	; 0x56be <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 47 2b 	jmp	0x568e	; 0x568e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 47 2b 	jmp	0x568e	; 0x568e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 47 2b 	jmp	0x568e	; 0x568e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4b 2b 	jmp	0x5696	; 0x5696 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 43 2b 	jmp	0x5686	; 0x5686 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5f 2b 	jmp	0x56be	; 0x56be <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 56       	subi	r30, 0x67	; 103
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
 * @param[in]  Config_Ptr Type UART_ConfigType
 * @param[out] none
 * @return none
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <UART_init+0xe>
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <UART_init+0x10>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
#if (RECIEVER_MODE == INTERRUPT_MODE)
	SET_BIT(UCSRB,RXCIE);
#endif

/* Setting the Speed Mode */
if (Config_Ptr->SpeedMode == DOUBLE_SPEED)
     e46:	eb 81       	ldd	r30, Y+3	; 0x03
     e48:	fc 81       	ldd	r31, Y+4	; 0x04
     e4a:	86 81       	ldd	r24, Z+6	; 0x06
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	41 f4       	brne	.+16     	; 0xe60 <UART_init+0x32>
{
	SET_BIT(UCSRA,U2X);
     e50:	ab e2       	ldi	r26, 0x2B	; 43
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	eb e2       	ldi	r30, 0x2B	; 43
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	82 60       	ori	r24, 0x02	; 2
     e5c:	8c 93       	st	X, r24
     e5e:	07 c0       	rjmp	.+14     	; 0xe6e <UART_init+0x40>
}
else
{
	CLR_BIT(UCSRA,U2X);
     e60:	ab e2       	ldi	r26, 0x2B	; 43
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	8c 93       	st	X, r24
}

/* Setting the Clock Polarity */
if (Config_Ptr->ClockPolarityType == FALLING_XCK_EDGE)
     e6e:	eb 81       	ldd	r30, Y+3	; 0x03
     e70:	fc 81       	ldd	r31, Y+4	; 0x04
     e72:	85 81       	ldd	r24, Z+5	; 0x05
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	41 f4       	brne	.+16     	; 0xe88 <UART_init+0x5a>
{
	SET_BIT(UCSRC,UCPOL);
     e78:	a0 e4       	ldi	r26, 0x40	; 64
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e0 e4       	ldi	r30, 0x40	; 64
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	8c 93       	st	X, r24
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <UART_init+0x68>
}
else
{
	CLR_BIT(UCSRC,UCPOL);
     e88:	a0 e4       	ldi	r26, 0x40	; 64
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8e 7f       	andi	r24, 0xFE	; 254
     e94:	8c 93       	st	X, r24
}

/* Choosing the Write in UCSRC Register */
SET_BIT(UCSRC,URSEL);
     e96:	a0 e4       	ldi	r26, 0x40	; 64
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e0 e4       	ldi	r30, 0x40	; 64
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 68       	ori	r24, 0x80	; 128
     ea2:	8c 93       	st	X, r24

/* Choosing the Data Bits Size */
UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->DataSizeType)<<1);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	28 2f       	mov	r18, r24
     eb0:	29 7f       	andi	r18, 0xF9	; 249
     eb2:	eb 81       	ldd	r30, Y+3	; 0x03
     eb4:	fc 81       	ldd	r31, Y+4	; 0x04
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	82 2b       	or	r24, r18
     ec2:	8c 93       	st	X, r24

/* Choosing the Stop Bit Size */
UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->StopType)<<3);
     ec4:	a0 e4       	ldi	r26, 0x40	; 64
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e0 e4       	ldi	r30, 0x40	; 64
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	28 2f       	mov	r18, r24
     ed0:	27 7f       	andi	r18, 0xF7	; 247
     ed2:	eb 81       	ldd	r30, Y+3	; 0x03
     ed4:	fc 81       	ldd	r31, Y+4	; 0x04
     ed6:	84 81       	ldd	r24, Z+4	; 0x04
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	82 2b       	or	r24, r18
     eea:	8c 93       	st	X, r24

/* Choosing the Parity Bit Mode */
UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->ParityType)<<4);
     eec:	a0 e4       	ldi	r26, 0x40	; 64
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e0 e4       	ldi	r30, 0x40	; 64
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	28 2f       	mov	r18, r24
     ef8:	2f 7c       	andi	r18, 0xCF	; 207
     efa:	eb 81       	ldd	r30, Y+3	; 0x03
     efc:	fc 81       	ldd	r31, Y+4	; 0x04
     efe:	83 81       	ldd	r24, Z+3	; 0x03
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	82 95       	swap	r24
     f06:	92 95       	swap	r25
     f08:	90 7f       	andi	r25, 0xF0	; 240
     f0a:	98 27       	eor	r25, r24
     f0c:	80 7f       	andi	r24, 0xF0	; 240
     f0e:	98 27       	eor	r25, r24
     f10:	82 2b       	or	r24, r18
     f12:	8c 93       	st	X, r24

/* Enabling the Receiver and Transmitter */
SET_BIT(UCSRB,RXEN);
     f14:	aa e2       	ldi	r26, 0x2A	; 42
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e2       	ldi	r30, 0x2A	; 42
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 61       	ori	r24, 0x10	; 16
     f20:	8c 93       	st	X, r24
SET_BIT(UCSRB,TXEN);
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	88 60       	ori	r24, 0x08	; 8
     f2e:	8c 93       	st	X, r24

/* Setting the Baud Rate */
uint16 Rate = (uint16)((((F_CPU * (Config_Ptr->SpeedMode)) / ((Config_Ptr->BaudRate) * 16UL))) - 1);
     f30:	eb 81       	ldd	r30, Y+3	; 0x03
     f32:	fc 81       	ldd	r31, Y+4	; 0x04
     f34:	86 81       	ldd	r24, Z+6	; 0x06
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	32 e1       	ldi	r19, 0x12	; 18
     f42:	4a e7       	ldi	r20, 0x7A	; 122
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <__mulsi3>
     f4e:	7b 01       	movw	r14, r22
     f50:	8c 01       	movw	r16, r24
     f52:	eb 81       	ldd	r30, Y+3	; 0x03
     f54:	fc 81       	ldd	r31, Y+4	; 0x04
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	cc 01       	movw	r24, r24
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	aa 1f       	adc	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	aa 1f       	adc	r26, r26
     f76:	bb 1f       	adc	r27, r27
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	aa 1f       	adc	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	9c 01       	movw	r18, r24
     f82:	ad 01       	movw	r20, r26
     f84:	c8 01       	movw	r24, r16
     f86:	b7 01       	movw	r22, r14
     f88:	0e 94 19 2b 	call	0x5632	; 0x5632 <__udivmodsi4>
     f8c:	da 01       	movw	r26, r20
     f8e:	c9 01       	movw	r24, r18
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01

CLR_BIT(UCSRC,URSEL);
     f96:	a0 e4       	ldi	r26, 0x40	; 64
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e0 e4       	ldi	r30, 0x40	; 64
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 77       	andi	r24, 0x7F	; 127
     fa2:	8c 93       	st	X, r24
UBRRH = Rate>>8;
     fa4:	e0 e4       	ldi	r30, 0x40	; 64
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	89 2f       	mov	r24, r25
     fae:	99 27       	eor	r25, r25
     fb0:	80 83       	st	Z, r24
UBRRL = Rate;
     fb2:	e9 e2       	ldi	r30, 0x29	; 41
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	80 83       	st	Z, r24
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	08 95       	ret

00000fd0 <UART_sendByte>:
 * @param[in]  data Type uint8
 * @param[out] none
 * @return none
 */
void UART_sendByte(uint8 data)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
#if (TRANSMITTER_MODE == POLLING_MODE)
while(BIT_IS_CLEAR(UCSRA,UDRE));
     fdc:	eb e2       	ldi	r30, 0x2B	; 43
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 72       	andi	r24, 0x20	; 32
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	b9 f3       	breq	.-18     	; 0xfdc <UART_sendByte+0xc>
#endif
UDR=data;
     fee:	ec e2       	ldi	r30, 0x2C	; 44
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	80 83       	st	Z, r24
}
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <UART_recieveByte>:
 * @param[out] none
 * @return uint8
 */
#if (RECIEVER_MODE == POLLING_MODE)
uint8 UART_recieveByte(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1006:	eb e2       	ldi	r30, 0x2B	; 43
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	dc f7       	brge	.-10     	; 0x1006 <UART_recieveByte+0x8>
	return UDR;
    1010:	ec e2       	ldi	r30, 0x2C	; 44
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <UART_sendString>:
 * @param[in]  Str Type uint8
 * @param[out] none
 * @return none
 */
void UART_sendString(const uint8 *Str)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <UART_sendString+0x6>
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9b 83       	std	Y+3, r25	; 0x03
    102a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    102c:	19 82       	std	Y+1, r1	; 0x01
    102e:	0e c0       	rjmp	.+28     	; 0x104c <UART_sendString+0x30>
while(Str[i]!='\0')
{
	UART_sendByte(Str[i]);
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	fc 01       	movw	r30, r24
    103c:	e2 0f       	add	r30, r18
    103e:	f3 1f       	adc	r31, r19
    1040:	80 81       	ld	r24, Z
    1042:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
	i++;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	8f 5f       	subi	r24, 0xFF	; 255
    104a:	89 83       	std	Y+1, r24	; 0x01
 * @return none
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i=0;
while(Str[i]!='\0')
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	fc 01       	movw	r30, r24
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	80 81       	ld	r24, Z
    105e:	88 23       	and	r24, r24
    1060:	39 f7       	brne	.-50     	; 0x1030 <UART_sendString+0x14>
{
	UART_sendByte(Str[i]);
	i++;
}
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <UART_recieveString>:
 * @param[out] Str Type Ptr to uint8
 * @return none
 */
#if (RECIEVER_MODE == POLLING_MODE)
void UART_recieveString(uint8 *Str)
{
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <UART_recieveString+0xa>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9b 83       	std	Y+3, r25	; 0x03
    1080:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1082:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the whole string until the '#' */
do
{
	Str[i] = UART_recieveByte();
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	8c 01       	movw	r16, r24
    1090:	02 0f       	add	r16, r18
    1092:	13 1f       	adc	r17, r19
    1094:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    1098:	f8 01       	movw	r30, r16
    109a:	80 83       	st	Z, r24
	i++;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	89 83       	std	Y+1, r24	; 0x01

}while(Str[i-1] != '#');
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9c 01       	movw	r18, r24
    10aa:	21 50       	subi	r18, 0x01	; 1
    10ac:	30 40       	sbci	r19, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	fc 01       	movw	r30, r24
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	80 81       	ld	r24, Z
    10ba:	83 32       	cpi	r24, 0x23	; 35
    10bc:	19 f7       	brne	.-58     	; 0x1084 <UART_recieveString+0x16>
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i-1] = '\0';
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9c 01       	movw	r18, r24
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	30 40       	sbci	r19, 0x00	; 0
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	fc 01       	movw	r30, r24
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	10 82       	st	Z, r1
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <TIMER_init>:
 * @param[in]  Config_Ptr Type TIMER_ConfigType
 * @param[out] none
 * @return none
 */
void TIMER_init(const TIMER_ConfigType *Config_Ptr)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	2c 97       	sbiw	r28, 0x0c	; 12
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;i<NUMBER_OF_USED_TIMERS;i++)
    10fe:	1a 82       	std	Y+2, r1	; 0x02
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	84 c6       	rjmp	.+3336   	; 0x1e0c <TIMER_init+0xd26>
	{
	switch(Config_Ptr->Units[i].TimerNum)
    1104:	eb 81       	ldd	r30, Y+3	; 0x03
    1106:	fc 81       	ldd	r31, Y+4	; 0x04
    1108:	40 81       	ld	r20, Z
    110a:	51 81       	ldd	r21, Z+1	; 0x01
    110c:	29 81       	ldd	r18, Y+1	; 0x01
    110e:	3a 81       	ldd	r19, Y+2	; 0x02
    1110:	c9 01       	movw	r24, r18
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	82 0f       	add	r24, r18
    1120:	93 1f       	adc	r25, r19
    1122:	fa 01       	movw	r30, r20
    1124:	e8 0f       	add	r30, r24
    1126:	f9 1f       	adc	r31, r25
    1128:	80 81       	ld	r24, Z
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3c 87       	std	Y+12, r19	; 0x0c
    1130:	2b 87       	std	Y+11, r18	; 0x0b
    1132:	8b 85       	ldd	r24, Y+11	; 0x0b
    1134:	9c 85       	ldd	r25, Y+12	; 0x0c
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <TIMER_init+0x58>
    113c:	57 c1       	rjmp	.+686    	; 0x13ec <TIMER_init+0x306>
    113e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1140:	3c 85       	ldd	r19, Y+12	; 0x0c
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <TIMER_init+0x64>
    1148:	7b c5       	rjmp	.+2806   	; 0x1c40 <TIMER_init+0xb5a>
    114a:	8b 85       	ldd	r24, Y+11	; 0x0b
    114c:	9c 85       	ldd	r25, Y+12	; 0x0c
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	09 f0       	breq	.+2      	; 0x1154 <TIMER_init+0x6e>
    1152:	57 c6       	rjmp	.+3246   	; 0x1e02 <TIMER_init+0xd1c>
	{
	case TIMER0:
	TCCR0 |= Config_Ptr->Units[i].Prescaler;
    1154:	a3 e5       	ldi	r26, 0x53	; 83
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e3 e5       	ldi	r30, 0x53	; 83
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	60 81       	ld	r22, Z
    115e:	eb 81       	ldd	r30, Y+3	; 0x03
    1160:	fc 81       	ldd	r31, Y+4	; 0x04
    1162:	40 81       	ld	r20, Z
    1164:	51 81       	ldd	r21, Z+1	; 0x01
    1166:	29 81       	ldd	r18, Y+1	; 0x01
    1168:	3a 81       	ldd	r19, Y+2	; 0x02
    116a:	c9 01       	movw	r24, r18
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	fa 01       	movw	r30, r20
    117e:	e8 0f       	add	r30, r24
    1180:	f9 1f       	adc	r31, r25
    1182:	81 81       	ldd	r24, Z+1	; 0x01
    1184:	86 2b       	or	r24, r22
    1186:	8c 93       	st	X, r24
	switch(Config_Ptr->Units[i].Mode)
    1188:	eb 81       	ldd	r30, Y+3	; 0x03
    118a:	fc 81       	ldd	r31, Y+4	; 0x04
    118c:	40 81       	ld	r20, Z
    118e:	51 81       	ldd	r21, Z+1	; 0x01
    1190:	29 81       	ldd	r18, Y+1	; 0x01
    1192:	3a 81       	ldd	r19, Y+2	; 0x02
    1194:	c9 01       	movw	r24, r18
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	fa 01       	movw	r30, r20
    11a8:	e8 0f       	add	r30, r24
    11aa:	f9 1f       	adc	r31, r25
    11ac:	84 81       	ldd	r24, Z+4	; 0x04
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3a 87       	std	Y+10, r19	; 0x0a
    11b4:	29 87       	std	Y+9, r18	; 0x09
    11b6:	89 85       	ldd	r24, Y+9	; 0x09
    11b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <TIMER_init+0xdc>
    11c0:	01 c1       	rjmp	.+514    	; 0x13c4 <TIMER_init+0x2de>
    11c2:	29 85       	ldd	r18, Y+9	; 0x09
    11c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <TIMER_init+0xf0>
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f0       	breq	.+26     	; 0x11ee <TIMER_init+0x108>
    11d4:	16 c6       	rjmp	.+3116   	; 0x1e02 <TIMER_init+0xd1c>
    11d6:	29 85       	ldd	r18, Y+9	; 0x09
    11d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	e1 f1       	breq	.+120    	; 0x1258 <TIMER_init+0x172>
    11e0:	89 85       	ldd	r24, Y+9	; 0x09
    11e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <TIMER_init+0x106>
    11ea:	a6 c0       	rjmp	.+332    	; 0x1338 <TIMER_init+0x252>
    11ec:	0a c6       	rjmp	.+3092   	; 0x1e02 <TIMER_init+0xd1c>
	{
	case TIMER0_OVF:
	/* Choose the Normal Mode  */
	CLR_BIT(TCCR0, WGM00);
    11ee:	a3 e5       	ldi	r26, 0x53	; 83
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e3 e5       	ldi	r30, 0x53	; 83
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 7b       	andi	r24, 0xBF	; 191
    11fa:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    11fc:	a3 e5       	ldi	r26, 0x53	; 83
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e3 e5       	ldi	r30, 0x53	; 83
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	87 7f       	andi	r24, 0xF7	; 247
    1208:	8c 93       	st	X, r24

	TCNT0 = Config_Ptr->Units[i].Initial_value;
    120a:	a2 e5       	ldi	r26, 0x52	; 82
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb 81       	ldd	r30, Y+3	; 0x03
    1210:	fc 81       	ldd	r31, Y+4	; 0x04
    1212:	40 81       	ld	r20, Z
    1214:	51 81       	ldd	r21, Z+1	; 0x01
    1216:	29 81       	ldd	r18, Y+1	; 0x01
    1218:	3a 81       	ldd	r19, Y+2	; 0x02
    121a:	c9 01       	movw	r24, r18
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	fa 01       	movw	r30, r20
    122e:	e8 0f       	add	r30, r24
    1230:	f9 1f       	adc	r31, r25
    1232:	82 81       	ldd	r24, Z+2	; 0x02
    1234:	93 81       	ldd	r25, Z+3	; 0x03
    1236:	8c 93       	st	X, r24

	/* Enabling the Overflow Interrupt Enable */
	TIMSK = (TIMSK & 0xFC) | (1 << TOIE0);
    1238:	a9 e5       	ldi	r26, 0x59	; 89
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e9 e5       	ldi	r30, 0x59	; 89
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8c 7f       	andi	r24, 0xFC	; 252
    1244:	81 60       	ori	r24, 0x01	; 1
    1246:	8c 93       	st	X, r24
	/* Enabling the FOCO As i Choose Non Pwm Mode */
	SET_BIT(TCCR0, FOC0);
    1248:	a3 e5       	ldi	r26, 0x53	; 83
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e5       	ldi	r30, 0x53	; 83
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	8c 93       	st	X, r24
    1256:	d5 c5       	rjmp	.+2986   	; 0x1e02 <TIMER_init+0xd1c>
	break;

	case  TIMER0_CTC:
	/* Choose the Compare Match Mode */
	CLR_BIT(TCCR0, WGM00);
    1258:	a3 e5       	ldi	r26, 0x53	; 83
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e3 e5       	ldi	r30, 0x53	; 83
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8f 7b       	andi	r24, 0xBF	; 191
    1264:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1266:	a3 e5       	ldi	r26, 0x53	; 83
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e3 e5       	ldi	r30, 0x53	; 83
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	88 60       	ori	r24, 0x08	; 8
    1272:	8c 93       	st	X, r24

	TCNT0 = Config_Ptr->Units[i].Initial_value;
    1274:	a2 e5       	ldi	r26, 0x52	; 82
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb 81       	ldd	r30, Y+3	; 0x03
    127a:	fc 81       	ldd	r31, Y+4	; 0x04
    127c:	40 81       	ld	r20, Z
    127e:	51 81       	ldd	r21, Z+1	; 0x01
    1280:	29 81       	ldd	r18, Y+1	; 0x01
    1282:	3a 81       	ldd	r19, Y+2	; 0x02
    1284:	c9 01       	movw	r24, r18
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	82 0f       	add	r24, r18
    1294:	93 1f       	adc	r25, r19
    1296:	fa 01       	movw	r30, r20
    1298:	e8 0f       	add	r30, r24
    129a:	f9 1f       	adc	r31, r25
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	8c 93       	st	X, r24
	OCR0  = Config_Ptr->Units[i].Compare_value;
    12a2:	ac e5       	ldi	r26, 0x5C	; 92
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	eb 81       	ldd	r30, Y+3	; 0x03
    12a8:	fc 81       	ldd	r31, Y+4	; 0x04
    12aa:	40 81       	ld	r20, Z
    12ac:	51 81       	ldd	r21, Z+1	; 0x01
    12ae:	29 81       	ldd	r18, Y+1	; 0x01
    12b0:	3a 81       	ldd	r19, Y+2	; 0x02
    12b2:	c9 01       	movw	r24, r18
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	fa 01       	movw	r30, r20
    12c6:	e8 0f       	add	r30, r24
    12c8:	f9 1f       	adc	r31, r25
    12ca:	87 81       	ldd	r24, Z+7	; 0x07
    12cc:	90 85       	ldd	r25, Z+8	; 0x08
    12ce:	8c 93       	st	X, r24

	/* Choose the OCO State in CTC */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Units[i].CtcMode)<<COM00) ;
    12d0:	a3 e5       	ldi	r26, 0x53	; 83
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e3 e5       	ldi	r30, 0x53	; 83
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	68 2f       	mov	r22, r24
    12dc:	6f 7c       	andi	r22, 0xCF	; 207
    12de:	eb 81       	ldd	r30, Y+3	; 0x03
    12e0:	fc 81       	ldd	r31, Y+4	; 0x04
    12e2:	40 81       	ld	r20, Z
    12e4:	51 81       	ldd	r21, Z+1	; 0x01
    12e6:	29 81       	ldd	r18, Y+1	; 0x01
    12e8:	3a 81       	ldd	r19, Y+2	; 0x02
    12ea:	c9 01       	movw	r24, r18
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	82 0f       	add	r24, r18
    12fa:	93 1f       	adc	r25, r19
    12fc:	fa 01       	movw	r30, r20
    12fe:	e8 0f       	add	r30, r24
    1300:	f9 1f       	adc	r31, r25
    1302:	86 81       	ldd	r24, Z+6	; 0x06
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	82 95       	swap	r24
    130a:	92 95       	swap	r25
    130c:	90 7f       	andi	r25, 0xF0	; 240
    130e:	98 27       	eor	r25, r24
    1310:	80 7f       	andi	r24, 0xF0	; 240
    1312:	98 27       	eor	r25, r24
    1314:	86 2b       	or	r24, r22
    1316:	8c 93       	st	X, r24

	/* Enabling the CTC Interrupt Enable */
	TIMSK = (TIMSK & 0xFC) | (1 << OCIE0);
    1318:	a9 e5       	ldi	r26, 0x59	; 89
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e9 e5       	ldi	r30, 0x59	; 89
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8c 7f       	andi	r24, 0xFC	; 252
    1324:	82 60       	ori	r24, 0x02	; 2
    1326:	8c 93       	st	X, r24
	/* Enabling the FOCO As To Choose Non Pwm Mode */
	SET_BIT(TCCR0, FOC0);
    1328:	a3 e5       	ldi	r26, 0x53	; 83
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e3 e5       	ldi	r30, 0x53	; 83
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 68       	ori	r24, 0x80	; 128
    1334:	8c 93       	st	X, r24
    1336:	65 c5       	rjmp	.+2762   	; 0x1e02 <TIMER_init+0xd1c>
	break;

	case  TIMER0_FAST_PWM:
	/* Choose the FAST PWM */
	SET_BIT(TCCR0, WGM00);
    1338:	a3 e5       	ldi	r26, 0x53	; 83
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e3 e5       	ldi	r30, 0x53	; 83
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	80 64       	ori	r24, 0x40	; 64
    1344:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1346:	a3 e5       	ldi	r26, 0x53	; 83
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e3 e5       	ldi	r30, 0x53	; 83
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	88 60       	ori	r24, 0x08	; 8
    1352:	8c 93       	st	X, r24

	/* Choose the Fast Pwm Working Mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Units[i].PwmMode)<<COM00) ;
    1354:	a3 e5       	ldi	r26, 0x53	; 83
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e3 e5       	ldi	r30, 0x53	; 83
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	68 2f       	mov	r22, r24
    1360:	6f 7c       	andi	r22, 0xCF	; 207
    1362:	eb 81       	ldd	r30, Y+3	; 0x03
    1364:	fc 81       	ldd	r31, Y+4	; 0x04
    1366:	40 81       	ld	r20, Z
    1368:	51 81       	ldd	r21, Z+1	; 0x01
    136a:	29 81       	ldd	r18, Y+1	; 0x01
    136c:	3a 81       	ldd	r19, Y+2	; 0x02
    136e:	c9 01       	movw	r24, r18
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	82 0f       	add	r24, r18
    137e:	93 1f       	adc	r25, r19
    1380:	fa 01       	movw	r30, r20
    1382:	e8 0f       	add	r30, r24
    1384:	f9 1f       	adc	r31, r25
    1386:	85 81       	ldd	r24, Z+5	; 0x05
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	82 95       	swap	r24
    138e:	92 95       	swap	r25
    1390:	90 7f       	andi	r25, 0xF0	; 240
    1392:	98 27       	eor	r25, r24
    1394:	80 7f       	andi	r24, 0xF0	; 240
    1396:	98 27       	eor	r25, r24
    1398:	86 2b       	or	r24, r22
    139a:	8c 93       	st	X, r24

	/* Disabling the CTC , Overflow Interrupt Enable */
	TIMSK = (TIMSK & 0xFC);
    139c:	a9 e5       	ldi	r26, 0x59	; 89
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e9 e5       	ldi	r30, 0x59	; 89
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8c 7f       	andi	r24, 0xFC	; 252
    13a8:	8c 93       	st	X, r24

	/* Disabling the FOCO As To Choose a Pwm Mode */
	CLR_BIT(TCCR0, FOC0);
    13aa:	a3 e5       	ldi	r26, 0x53	; 83
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e3 e5       	ldi	r30, 0x53	; 83
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8f 77       	andi	r24, 0x7F	; 127
    13b6:	8c 93       	st	X, r24

	/* Defining OC0 Pin As an Output */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	63 e0       	ldi	r22, 0x03	; 3
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    13c2:	1f c5       	rjmp	.+2622   	; 0x1e02 <TIMER_init+0xd1c>
	break;

	case TIMER0_PHASE_PWM:
	/* Choose the PHASE PWM Mode */
	SET_BIT(TCCR0, WGM00);
    13c4:	a3 e5       	ldi	r26, 0x53	; 83
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e3 e5       	ldi	r30, 0x53	; 83
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 64       	ori	r24, 0x40	; 64
    13d0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    13d2:	a3 e5       	ldi	r26, 0x53	; 83
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	87 7f       	andi	r24, 0xF7	; 247
    13de:	8c 93       	st	X, r24

	/* Defining OC0 Pin As an Output */
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_OUTPUT);
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	63 e0       	ldi	r22, 0x03	; 3
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    13ea:	0b c5       	rjmp	.+2582   	; 0x1e02 <TIMER_init+0xd1c>
	}

	break;
	case TIMER1:

		TCCR1B |= Config_Ptr->Units[i].Prescaler;
    13ec:	ae e4       	ldi	r26, 0x4E	; 78
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ee e4       	ldi	r30, 0x4E	; 78
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	60 81       	ld	r22, Z
    13f6:	eb 81       	ldd	r30, Y+3	; 0x03
    13f8:	fc 81       	ldd	r31, Y+4	; 0x04
    13fa:	40 81       	ld	r20, Z
    13fc:	51 81       	ldd	r21, Z+1	; 0x01
    13fe:	29 81       	ldd	r18, Y+1	; 0x01
    1400:	3a 81       	ldd	r19, Y+2	; 0x02
    1402:	c9 01       	movw	r24, r18
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	82 0f       	add	r24, r18
    1412:	93 1f       	adc	r25, r19
    1414:	fa 01       	movw	r30, r20
    1416:	e8 0f       	add	r30, r24
    1418:	f9 1f       	adc	r31, r25
    141a:	81 81       	ldd	r24, Z+1	; 0x01
    141c:	86 2b       	or	r24, r22
    141e:	8c 93       	st	X, r24
		Timer1_Mode = Config_Ptr->Units[i].Mode;
    1420:	eb 81       	ldd	r30, Y+3	; 0x03
    1422:	fc 81       	ldd	r31, Y+4	; 0x04
    1424:	40 81       	ld	r20, Z
    1426:	51 81       	ldd	r21, Z+1	; 0x01
    1428:	29 81       	ldd	r18, Y+1	; 0x01
    142a:	3a 81       	ldd	r19, Y+2	; 0x02
    142c:	c9 01       	movw	r24, r18
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	82 0f       	add	r24, r18
    143c:	93 1f       	adc	r25, r19
    143e:	fa 01       	movw	r30, r20
    1440:	e8 0f       	add	r30, r24
    1442:	f9 1f       	adc	r31, r25
    1444:	84 81       	ldd	r24, Z+4	; 0x04
    1446:	80 93 b7 02 	sts	0x02B7, r24

		switch(Config_Ptr->Units[i].Mode)
    144a:	eb 81       	ldd	r30, Y+3	; 0x03
    144c:	fc 81       	ldd	r31, Y+4	; 0x04
    144e:	40 81       	ld	r20, Z
    1450:	51 81       	ldd	r21, Z+1	; 0x01
    1452:	29 81       	ldd	r18, Y+1	; 0x01
    1454:	3a 81       	ldd	r19, Y+2	; 0x02
    1456:	c9 01       	movw	r24, r18
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	fa 01       	movw	r30, r20
    146a:	e8 0f       	add	r30, r24
    146c:	f9 1f       	adc	r31, r25
    146e:	84 81       	ldd	r24, Z+4	; 0x04
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	38 87       	std	Y+8, r19	; 0x08
    1476:	2f 83       	std	Y+7, r18	; 0x07
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	98 85       	ldd	r25, Y+8	; 0x08
    147c:	86 30       	cpi	r24, 0x06	; 6
    147e:	91 05       	cpc	r25, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <TIMER_init+0x39e>
    1482:	93 c1       	rjmp	.+806    	; 0x17aa <TIMER_init+0x6c4>
    1484:	2f 81       	ldd	r18, Y+7	; 0x07
    1486:	38 85       	ldd	r19, Y+8	; 0x08
    1488:	27 30       	cpi	r18, 0x07	; 7
    148a:	31 05       	cpc	r19, r1
    148c:	8c f4       	brge	.+34     	; 0x14b0 <TIMER_init+0x3ca>
    148e:	8f 81       	ldd	r24, Y+7	; 0x07
    1490:	98 85       	ldd	r25, Y+8	; 0x08
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <TIMER_init+0x3b4>
    1498:	76 c0       	rjmp	.+236    	; 0x1586 <TIMER_init+0x4a0>
    149a:	2f 81       	ldd	r18, Y+7	; 0x07
    149c:	38 85       	ldd	r19, Y+8	; 0x08
    149e:	25 30       	cpi	r18, 0x05	; 5
    14a0:	31 05       	cpc	r19, r1
    14a2:	0c f0       	brlt	.+2      	; 0x14a6 <TIMER_init+0x3c0>
    14a4:	18 c1       	rjmp	.+560    	; 0x16d6 <TIMER_init+0x5f0>
    14a6:	8f 81       	ldd	r24, Y+7	; 0x07
    14a8:	98 85       	ldd	r25, Y+8	; 0x08
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	01 f1       	breq	.+64     	; 0x14ee <TIMER_init+0x408>
    14ae:	a9 c4       	rjmp	.+2386   	; 0x1e02 <TIMER_init+0xd1c>
    14b0:	2f 81       	ldd	r18, Y+7	; 0x07
    14b2:	38 85       	ldd	r19, Y+8	; 0x08
    14b4:	2c 30       	cpi	r18, 0x0C	; 12
    14b6:	31 05       	cpc	r19, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <TIMER_init+0x3d6>
    14ba:	4b c2       	rjmp	.+1174   	; 0x1952 <TIMER_init+0x86c>
    14bc:	8f 81       	ldd	r24, Y+7	; 0x07
    14be:	98 85       	ldd	r25, Y+8	; 0x08
    14c0:	8d 30       	cpi	r24, 0x0D	; 13
    14c2:	91 05       	cpc	r25, r1
    14c4:	3c f4       	brge	.+14     	; 0x14d4 <TIMER_init+0x3ee>
    14c6:	2f 81       	ldd	r18, Y+7	; 0x07
    14c8:	38 85       	ldd	r19, Y+8	; 0x08
    14ca:	27 30       	cpi	r18, 0x07	; 7
    14cc:	31 05       	cpc	r19, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <TIMER_init+0x3ec>
    14d0:	d6 c1       	rjmp	.+940    	; 0x187e <TIMER_init+0x798>
    14d2:	97 c4       	rjmp	.+2350   	; 0x1e02 <TIMER_init+0xd1c>
    14d4:	8f 81       	ldd	r24, Y+7	; 0x07
    14d6:	98 85       	ldd	r25, Y+8	; 0x08
    14d8:	8e 30       	cpi	r24, 0x0E	; 14
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <TIMER_init+0x3fa>
    14de:	e1 c2       	rjmp	.+1474   	; 0x1aa2 <TIMER_init+0x9bc>
    14e0:	2f 81       	ldd	r18, Y+7	; 0x07
    14e2:	38 85       	ldd	r19, Y+8	; 0x08
    14e4:	2f 30       	cpi	r18, 0x0F	; 15
    14e6:	31 05       	cpc	r19, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <TIMER_init+0x406>
    14ea:	40 c3       	rjmp	.+1664   	; 0x1b6c <TIMER_init+0xa86>
    14ec:	8a c4       	rjmp	.+2324   	; 0x1e02 <TIMER_init+0xd1c>
		{
		case TIMER1_OVF:
		/* Choose the Mode */
		CLR_BIT(TCCR1A, WGM10);
    14ee:	af e4       	ldi	r26, 0x4F	; 79
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ef e4       	ldi	r30, 0x4F	; 79
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8e 7f       	andi	r24, 0xFE	; 254
    14fa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    14fc:	af e4       	ldi	r26, 0x4F	; 79
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ef e4       	ldi	r30, 0x4F	; 79
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8d 7f       	andi	r24, 0xFD	; 253
    1508:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM12);
    150a:	ae e4       	ldi	r26, 0x4E	; 78
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ee e4       	ldi	r30, 0x4E	; 78
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	87 7f       	andi	r24, 0xF7	; 247
    1516:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    1518:	ae e4       	ldi	r26, 0x4E	; 78
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ee e4       	ldi	r30, 0x4E	; 78
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 7e       	andi	r24, 0xEF	; 239
    1524:	8c 93       	st	X, r24

		TCNT1 = Config_Ptr->Units[i].Initial_value;
    1526:	ac e4       	ldi	r26, 0x4C	; 76
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	eb 81       	ldd	r30, Y+3	; 0x03
    152c:	fc 81       	ldd	r31, Y+4	; 0x04
    152e:	40 81       	ld	r20, Z
    1530:	51 81       	ldd	r21, Z+1	; 0x01
    1532:	29 81       	ldd	r18, Y+1	; 0x01
    1534:	3a 81       	ldd	r19, Y+2	; 0x02
    1536:	c9 01       	movw	r24, r18
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	82 0f       	add	r24, r18
    1546:	93 1f       	adc	r25, r19
    1548:	fa 01       	movw	r30, r20
    154a:	e8 0f       	add	r30, r24
    154c:	f9 1f       	adc	r31, r25
    154e:	82 81       	ldd	r24, Z+2	; 0x02
    1550:	93 81       	ldd	r25, Z+3	; 0x03
    1552:	11 96       	adiw	r26, 0x01	; 1
    1554:	9c 93       	st	X, r25
    1556:	8e 93       	st	-X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    1558:	af e4       	ldi	r26, 0x4F	; 79
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ef e4       	ldi	r30, 0x4F	; 79
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 60       	ori	r24, 0x08	; 8
    1564:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    1566:	af e4       	ldi	r26, 0x4F	; 79
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ef e4       	ldi	r30, 0x4F	; 79
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	84 60       	ori	r24, 0x04	; 4
    1572:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << TOIE1);
    1574:	a9 e5       	ldi	r26, 0x59	; 89
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e9 e5       	ldi	r30, 0x59	; 89
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	83 7e       	andi	r24, 0xE3	; 227
    1580:	84 60       	ori	r24, 0x04	; 4
    1582:	8c 93       	st	X, r24
    1584:	3e c4       	rjmp	.+2172   	; 0x1e02 <TIMER_init+0xd1c>

		break;
		case  TIMER1_CTC_OCR:
		/* Choose the CTC Mode With OCR */
		CLR_BIT(TCCR1A, WGM10);
    1586:	af e4       	ldi	r26, 0x4F	; 79
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e4       	ldi	r30, 0x4F	; 79
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8e 7f       	andi	r24, 0xFE	; 254
    1592:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    1594:	af e4       	ldi	r26, 0x4F	; 79
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ef e4       	ldi	r30, 0x4F	; 79
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8d 7f       	andi	r24, 0xFD	; 253
    15a0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    15a2:	ae e4       	ldi	r26, 0x4E	; 78
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ee e4       	ldi	r30, 0x4E	; 78
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 60       	ori	r24, 0x08	; 8
    15ae:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    15b0:	ae e4       	ldi	r26, 0x4E	; 78
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	ee e4       	ldi	r30, 0x4E	; 78
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	8f 7e       	andi	r24, 0xEF	; 239
    15bc:	8c 93       	st	X, r24

		TCNT1 = Config_Ptr->Units[i].Initial_value;
    15be:	ac e4       	ldi	r26, 0x4C	; 76
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	eb 81       	ldd	r30, Y+3	; 0x03
    15c4:	fc 81       	ldd	r31, Y+4	; 0x04
    15c6:	40 81       	ld	r20, Z
    15c8:	51 81       	ldd	r21, Z+1	; 0x01
    15ca:	29 81       	ldd	r18, Y+1	; 0x01
    15cc:	3a 81       	ldd	r19, Y+2	; 0x02
    15ce:	c9 01       	movw	r24, r18
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	82 0f       	add	r24, r18
    15de:	93 1f       	adc	r25, r19
    15e0:	fa 01       	movw	r30, r20
    15e2:	e8 0f       	add	r30, r24
    15e4:	f9 1f       	adc	r31, r25
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	11 96       	adiw	r26, 0x01	; 1
    15ec:	9c 93       	st	X, r25
    15ee:	8e 93       	st	-X, r24
		OCR1A = Config_Ptr->Units[i].Compare_value;
    15f0:	aa e4       	ldi	r26, 0x4A	; 74
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	eb 81       	ldd	r30, Y+3	; 0x03
    15f6:	fc 81       	ldd	r31, Y+4	; 0x04
    15f8:	40 81       	ld	r20, Z
    15fa:	51 81       	ldd	r21, Z+1	; 0x01
    15fc:	29 81       	ldd	r18, Y+1	; 0x01
    15fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1600:	c9 01       	movw	r24, r18
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	82 0f       	add	r24, r18
    1610:	93 1f       	adc	r25, r19
    1612:	fa 01       	movw	r30, r20
    1614:	e8 0f       	add	r30, r24
    1616:	f9 1f       	adc	r31, r25
    1618:	87 81       	ldd	r24, Z+7	; 0x07
    161a:	90 85       	ldd	r25, Z+8	; 0x08
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	9c 93       	st	X, r25
    1620:	8e 93       	st	-X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    1622:	af e4       	ldi	r26, 0x4F	; 79
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ef e4       	ldi	r30, 0x4F	; 79
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	88 60       	ori	r24, 0x08	; 8
    162e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    1630:	af e4       	ldi	r26, 0x4F	; 79
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	ef e4       	ldi	r30, 0x4F	; 79
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	84 60       	ori	r24, 0x04	; 4
    163c:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << OCIE1A);
    163e:	a9 e5       	ldi	r26, 0x59	; 89
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e9 e5       	ldi	r30, 0x59	; 89
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	83 7e       	andi	r24, 0xE3	; 227
    164a:	80 61       	ori	r24, 0x10	; 16
    164c:	8c 93       	st	X, r24

		/* Choose the OC1A , OC1B State in CTC */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].CtcMode)<<COM1B0) | ((Config_Ptr->Units[i].CtcMode)<<COM1A0);
    164e:	af e4       	ldi	r26, 0x4F	; 79
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e3 e5       	ldi	r30, 0x53	; 83
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	68 2f       	mov	r22, r24
    165a:	6f 70       	andi	r22, 0x0F	; 15
    165c:	eb 81       	ldd	r30, Y+3	; 0x03
    165e:	fc 81       	ldd	r31, Y+4	; 0x04
    1660:	40 81       	ld	r20, Z
    1662:	51 81       	ldd	r21, Z+1	; 0x01
    1664:	29 81       	ldd	r18, Y+1	; 0x01
    1666:	3a 81       	ldd	r19, Y+2	; 0x02
    1668:	c9 01       	movw	r24, r18
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	82 0f       	add	r24, r18
    1678:	93 1f       	adc	r25, r19
    167a:	fa 01       	movw	r30, r20
    167c:	e8 0f       	add	r30, r24
    167e:	f9 1f       	adc	r31, r25
    1680:	86 81       	ldd	r24, Z+6	; 0x06
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	82 95       	swap	r24
    1688:	92 95       	swap	r25
    168a:	90 7f       	andi	r25, 0xF0	; 240
    168c:	98 27       	eor	r25, r24
    168e:	80 7f       	andi	r24, 0xF0	; 240
    1690:	98 27       	eor	r25, r24
    1692:	68 2b       	or	r22, r24
    1694:	eb 81       	ldd	r30, Y+3	; 0x03
    1696:	fc 81       	ldd	r31, Y+4	; 0x04
    1698:	40 81       	ld	r20, Z
    169a:	51 81       	ldd	r21, Z+1	; 0x01
    169c:	29 81       	ldd	r18, Y+1	; 0x01
    169e:	3a 81       	ldd	r19, Y+2	; 0x02
    16a0:	c9 01       	movw	r24, r18
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	82 0f       	add	r24, r18
    16b0:	93 1f       	adc	r25, r19
    16b2:	fa 01       	movw	r30, r20
    16b4:	e8 0f       	add	r30, r24
    16b6:	f9 1f       	adc	r31, r25
    16b8:	86 81       	ldd	r24, Z+6	; 0x06
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	00 24       	eor	r0, r0
    16c0:	96 95       	lsr	r25
    16c2:	87 95       	ror	r24
    16c4:	07 94       	ror	r0
    16c6:	96 95       	lsr	r25
    16c8:	87 95       	ror	r24
    16ca:	07 94       	ror	r0
    16cc:	98 2f       	mov	r25, r24
    16ce:	80 2d       	mov	r24, r0
    16d0:	86 2b       	or	r24, r22
    16d2:	8c 93       	st	X, r24
    16d4:	96 c3       	rjmp	.+1836   	; 0x1e02 <TIMER_init+0xd1c>
		break;

		case   TIMER1_FAST_PWM_8BIT :
		/* Choose the Fast Pwm With 8bit Range */
		SET_BIT(TCCR1A, WGM10);
    16d6:	af e4       	ldi	r26, 0x4F	; 79
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ef e4       	ldi	r30, 0x4F	; 79
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	81 60       	ori	r24, 0x01	; 1
    16e2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    16e4:	af e4       	ldi	r26, 0x4F	; 79
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	ef e4       	ldi	r30, 0x4F	; 79
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8d 7f       	andi	r24, 0xFD	; 253
    16f0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    16f2:	ae e4       	ldi	r26, 0x4E	; 78
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ee e4       	ldi	r30, 0x4E	; 78
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	88 60       	ori	r24, 0x08	; 8
    16fe:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    1700:	ae e4       	ldi	r26, 0x4E	; 78
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	ee e4       	ldi	r30, 0x4E	; 78
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 7e       	andi	r24, 0xEF	; 239
    170c:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    170e:	af e4       	ldi	r26, 0x4F	; 79
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e3 e5       	ldi	r30, 0x53	; 83
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	68 2f       	mov	r22, r24
    171a:	6f 70       	andi	r22, 0x0F	; 15
    171c:	eb 81       	ldd	r30, Y+3	; 0x03
    171e:	fc 81       	ldd	r31, Y+4	; 0x04
    1720:	40 81       	ld	r20, Z
    1722:	51 81       	ldd	r21, Z+1	; 0x01
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	3a 81       	ldd	r19, Y+2	; 0x02
    1728:	c9 01       	movw	r24, r18
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	82 0f       	add	r24, r18
    1738:	93 1f       	adc	r25, r19
    173a:	fa 01       	movw	r30, r20
    173c:	e8 0f       	add	r30, r24
    173e:	f9 1f       	adc	r31, r25
    1740:	85 81       	ldd	r24, Z+5	; 0x05
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	82 95       	swap	r24
    1748:	92 95       	swap	r25
    174a:	90 7f       	andi	r25, 0xF0	; 240
    174c:	98 27       	eor	r25, r24
    174e:	80 7f       	andi	r24, 0xF0	; 240
    1750:	98 27       	eor	r25, r24
    1752:	68 2b       	or	r22, r24
    1754:	eb 81       	ldd	r30, Y+3	; 0x03
    1756:	fc 81       	ldd	r31, Y+4	; 0x04
    1758:	40 81       	ld	r20, Z
    175a:	51 81       	ldd	r21, Z+1	; 0x01
    175c:	29 81       	ldd	r18, Y+1	; 0x01
    175e:	3a 81       	ldd	r19, Y+2	; 0x02
    1760:	c9 01       	movw	r24, r18
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	82 0f       	add	r24, r18
    1770:	93 1f       	adc	r25, r19
    1772:	fa 01       	movw	r30, r20
    1774:	e8 0f       	add	r30, r24
    1776:	f9 1f       	adc	r31, r25
    1778:	85 81       	ldd	r24, Z+5	; 0x05
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	00 24       	eor	r0, r0
    1780:	96 95       	lsr	r25
    1782:	87 95       	ror	r24
    1784:	07 94       	ror	r0
    1786:	96 95       	lsr	r25
    1788:	87 95       	ror	r24
    178a:	07 94       	ror	r0
    178c:	98 2f       	mov	r25, r24
    178e:	80 2d       	mov	r24, r0
    1790:	86 2b       	or	r24, r22
    1792:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	64 e0       	ldi	r22, 0x04	; 4
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	65 e0       	ldi	r22, 0x05	; 5
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    17a8:	2c c3       	rjmp	.+1624   	; 0x1e02 <TIMER_init+0xd1c>
		break;

		case    TIMER1_FAST_PWM_9BIT :
		/* Choose the Fast Pwm With 9bit Range */
		CLR_BIT(TCCR1A, WGM10);
    17aa:	af e4       	ldi	r26, 0x4F	; 79
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	ef e4       	ldi	r30, 0x4F	; 79
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8e 7f       	andi	r24, 0xFE	; 254
    17b6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    17b8:	af e4       	ldi	r26, 0x4F	; 79
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ef e4       	ldi	r30, 0x4F	; 79
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	82 60       	ori	r24, 0x02	; 2
    17c4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    17c6:	ae e4       	ldi	r26, 0x4E	; 78
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	ee e4       	ldi	r30, 0x4E	; 78
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	88 60       	ori	r24, 0x08	; 8
    17d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    17d4:	ae e4       	ldi	r26, 0x4E	; 78
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ee e4       	ldi	r30, 0x4E	; 78
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8f 7e       	andi	r24, 0xEF	; 239
    17e0:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    17e2:	af e4       	ldi	r26, 0x4F	; 79
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e3 e5       	ldi	r30, 0x53	; 83
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	68 2f       	mov	r22, r24
    17ee:	6f 70       	andi	r22, 0x0F	; 15
    17f0:	eb 81       	ldd	r30, Y+3	; 0x03
    17f2:	fc 81       	ldd	r31, Y+4	; 0x04
    17f4:	40 81       	ld	r20, Z
    17f6:	51 81       	ldd	r21, Z+1	; 0x01
    17f8:	29 81       	ldd	r18, Y+1	; 0x01
    17fa:	3a 81       	ldd	r19, Y+2	; 0x02
    17fc:	c9 01       	movw	r24, r18
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	82 0f       	add	r24, r18
    180c:	93 1f       	adc	r25, r19
    180e:	fa 01       	movw	r30, r20
    1810:	e8 0f       	add	r30, r24
    1812:	f9 1f       	adc	r31, r25
    1814:	85 81       	ldd	r24, Z+5	; 0x05
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	82 95       	swap	r24
    181c:	92 95       	swap	r25
    181e:	90 7f       	andi	r25, 0xF0	; 240
    1820:	98 27       	eor	r25, r24
    1822:	80 7f       	andi	r24, 0xF0	; 240
    1824:	98 27       	eor	r25, r24
    1826:	68 2b       	or	r22, r24
    1828:	eb 81       	ldd	r30, Y+3	; 0x03
    182a:	fc 81       	ldd	r31, Y+4	; 0x04
    182c:	40 81       	ld	r20, Z
    182e:	51 81       	ldd	r21, Z+1	; 0x01
    1830:	29 81       	ldd	r18, Y+1	; 0x01
    1832:	3a 81       	ldd	r19, Y+2	; 0x02
    1834:	c9 01       	movw	r24, r18
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	82 0f       	add	r24, r18
    1844:	93 1f       	adc	r25, r19
    1846:	fa 01       	movw	r30, r20
    1848:	e8 0f       	add	r30, r24
    184a:	f9 1f       	adc	r31, r25
    184c:	85 81       	ldd	r24, Z+5	; 0x05
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	00 24       	eor	r0, r0
    1854:	96 95       	lsr	r25
    1856:	87 95       	ror	r24
    1858:	07 94       	ror	r0
    185a:	96 95       	lsr	r25
    185c:	87 95       	ror	r24
    185e:	07 94       	ror	r0
    1860:	98 2f       	mov	r25, r24
    1862:	80 2d       	mov	r24, r0
    1864:	86 2b       	or	r24, r22
    1866:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	64 e0       	ldi	r22, 0x04	; 4
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1872:	83 e0       	ldi	r24, 0x03	; 3
    1874:	65 e0       	ldi	r22, 0x05	; 5
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    187c:	c2 c2       	rjmp	.+1412   	; 0x1e02 <TIMER_init+0xd1c>
		break;

		case    TIMER1_FAST_PWM_10BIT :
		/* Choose the Fast Pwm With 10bit Range */
		SET_BIT(TCCR1A, WGM10);
    187e:	af e4       	ldi	r26, 0x4F	; 79
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ef e4       	ldi	r30, 0x4F	; 79
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    188c:	af e4       	ldi	r26, 0x4F	; 79
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ef e4       	ldi	r30, 0x4F	; 79
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	82 60       	ori	r24, 0x02	; 2
    1898:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    189a:	ae e4       	ldi	r26, 0x4E	; 78
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ee e4       	ldi	r30, 0x4E	; 78
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B, WGM13);
    18a8:	ae e4       	ldi	r26, 0x4E	; 78
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ee e4       	ldi	r30, 0x4E	; 78
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 7e       	andi	r24, 0xEF	; 239
    18b4:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    18b6:	af e4       	ldi	r26, 0x4F	; 79
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e3 e5       	ldi	r30, 0x53	; 83
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	68 2f       	mov	r22, r24
    18c2:	6f 70       	andi	r22, 0x0F	; 15
    18c4:	eb 81       	ldd	r30, Y+3	; 0x03
    18c6:	fc 81       	ldd	r31, Y+4	; 0x04
    18c8:	40 81       	ld	r20, Z
    18ca:	51 81       	ldd	r21, Z+1	; 0x01
    18cc:	29 81       	ldd	r18, Y+1	; 0x01
    18ce:	3a 81       	ldd	r19, Y+2	; 0x02
    18d0:	c9 01       	movw	r24, r18
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	82 0f       	add	r24, r18
    18e0:	93 1f       	adc	r25, r19
    18e2:	fa 01       	movw	r30, r20
    18e4:	e8 0f       	add	r30, r24
    18e6:	f9 1f       	adc	r31, r25
    18e8:	85 81       	ldd	r24, Z+5	; 0x05
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	82 95       	swap	r24
    18f0:	92 95       	swap	r25
    18f2:	90 7f       	andi	r25, 0xF0	; 240
    18f4:	98 27       	eor	r25, r24
    18f6:	80 7f       	andi	r24, 0xF0	; 240
    18f8:	98 27       	eor	r25, r24
    18fa:	68 2b       	or	r22, r24
    18fc:	eb 81       	ldd	r30, Y+3	; 0x03
    18fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1900:	40 81       	ld	r20, Z
    1902:	51 81       	ldd	r21, Z+1	; 0x01
    1904:	29 81       	ldd	r18, Y+1	; 0x01
    1906:	3a 81       	ldd	r19, Y+2	; 0x02
    1908:	c9 01       	movw	r24, r18
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	82 0f       	add	r24, r18
    1918:	93 1f       	adc	r25, r19
    191a:	fa 01       	movw	r30, r20
    191c:	e8 0f       	add	r30, r24
    191e:	f9 1f       	adc	r31, r25
    1920:	85 81       	ldd	r24, Z+5	; 0x05
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	00 24       	eor	r0, r0
    1928:	96 95       	lsr	r25
    192a:	87 95       	ror	r24
    192c:	07 94       	ror	r0
    192e:	96 95       	lsr	r25
    1930:	87 95       	ror	r24
    1932:	07 94       	ror	r0
    1934:	98 2f       	mov	r25, r24
    1936:	80 2d       	mov	r24, r0
    1938:	86 2b       	or	r24, r22
    193a:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	64 e0       	ldi	r22, 0x04	; 4
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	65 e0       	ldi	r22, 0x05	; 5
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    1950:	58 c2       	rjmp	.+1200   	; 0x1e02 <TIMER_init+0xd1c>
		break;

		case    TIMER1_CTC_ICR :
		/* Choose the CTC Mode With ICR */
		CLR_BIT(TCCR1A, WGM10);
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8e 7f       	andi	r24, 0xFE	; 254
    195e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, WGM11);
    1960:	af e4       	ldi	r26, 0x4F	; 79
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ef e4       	ldi	r30, 0x4F	; 79
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	8d 7f       	andi	r24, 0xFD	; 253
    196c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 60       	ori	r24, 0x08	; 8
    197a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    197c:	ae e4       	ldi	r26, 0x4E	; 78
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ee e4       	ldi	r30, 0x4E	; 78
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 61       	ori	r24, 0x10	; 16
    1988:	8c 93       	st	X, r24

		TCNT1 = Config_Ptr->Units[i].Initial_value;
    198a:	ac e4       	ldi	r26, 0x4C	; 76
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	eb 81       	ldd	r30, Y+3	; 0x03
    1990:	fc 81       	ldd	r31, Y+4	; 0x04
    1992:	40 81       	ld	r20, Z
    1994:	51 81       	ldd	r21, Z+1	; 0x01
    1996:	29 81       	ldd	r18, Y+1	; 0x01
    1998:	3a 81       	ldd	r19, Y+2	; 0x02
    199a:	c9 01       	movw	r24, r18
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	82 0f       	add	r24, r18
    19aa:	93 1f       	adc	r25, r19
    19ac:	fa 01       	movw	r30, r20
    19ae:	e8 0f       	add	r30, r24
    19b0:	f9 1f       	adc	r31, r25
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	9c 93       	st	X, r25
    19ba:	8e 93       	st	-X, r24
		ICR1 = Config_Ptr->Units[i].Compare_value;
    19bc:	a6 e4       	ldi	r26, 0x46	; 70
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	eb 81       	ldd	r30, Y+3	; 0x03
    19c2:	fc 81       	ldd	r31, Y+4	; 0x04
    19c4:	40 81       	ld	r20, Z
    19c6:	51 81       	ldd	r21, Z+1	; 0x01
    19c8:	29 81       	ldd	r18, Y+1	; 0x01
    19ca:	3a 81       	ldd	r19, Y+2	; 0x02
    19cc:	c9 01       	movw	r24, r18
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	82 0f       	add	r24, r18
    19dc:	93 1f       	adc	r25, r19
    19de:	fa 01       	movw	r30, r20
    19e0:	e8 0f       	add	r30, r24
    19e2:	f9 1f       	adc	r31, r25
    19e4:	87 81       	ldd	r24, Z+7	; 0x07
    19e6:	90 85       	ldd	r25, Z+8	; 0x08
    19e8:	11 96       	adiw	r26, 0x01	; 1
    19ea:	9c 93       	st	X, r25
    19ec:	8e 93       	st	-X, r24

		/* Enabling the FOC1A & FOC1B To Choose Non Pwm Mode */
		SET_BIT(TCCR1A, FOC1A);
    19ee:	af e4       	ldi	r26, 0x4F	; 79
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ef e4       	ldi	r30, 0x4F	; 79
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	88 60       	ori	r24, 0x08	; 8
    19fa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, FOC1B);
    19fc:	af e4       	ldi	r26, 0x4F	; 79
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ef e4       	ldi	r30, 0x4F	; 79
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	84 60       	ori	r24, 0x04	; 4
    1a08:	8c 93       	st	X, r24

		/* Enabling the Overflow Interrupt Enable */
		TIMSK = (TIMSK & 0xE3)  | (1 << OCIE1A);
    1a0a:	a9 e5       	ldi	r26, 0x59	; 89
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e9 e5       	ldi	r30, 0x59	; 89
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	83 7e       	andi	r24, 0xE3	; 227
    1a16:	80 61       	ori	r24, 0x10	; 16
    1a18:	8c 93       	st	X, r24

		/* Choose the OC1A , OC1B State in CTC */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].CtcMode)<<COM1B0) | ((Config_Ptr->Units[i].CtcMode)<<COM1A0);
    1a1a:	af e4       	ldi	r26, 0x4F	; 79
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e3 e5       	ldi	r30, 0x53	; 83
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	68 2f       	mov	r22, r24
    1a26:	6f 70       	andi	r22, 0x0F	; 15
    1a28:	eb 81       	ldd	r30, Y+3	; 0x03
    1a2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a2c:	40 81       	ld	r20, Z
    1a2e:	51 81       	ldd	r21, Z+1	; 0x01
    1a30:	29 81       	ldd	r18, Y+1	; 0x01
    1a32:	3a 81       	ldd	r19, Y+2	; 0x02
    1a34:	c9 01       	movw	r24, r18
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	82 0f       	add	r24, r18
    1a44:	93 1f       	adc	r25, r19
    1a46:	fa 01       	movw	r30, r20
    1a48:	e8 0f       	add	r30, r24
    1a4a:	f9 1f       	adc	r31, r25
    1a4c:	86 81       	ldd	r24, Z+6	; 0x06
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	82 95       	swap	r24
    1a54:	92 95       	swap	r25
    1a56:	90 7f       	andi	r25, 0xF0	; 240
    1a58:	98 27       	eor	r25, r24
    1a5a:	80 7f       	andi	r24, 0xF0	; 240
    1a5c:	98 27       	eor	r25, r24
    1a5e:	68 2b       	or	r22, r24
    1a60:	eb 81       	ldd	r30, Y+3	; 0x03
    1a62:	fc 81       	ldd	r31, Y+4	; 0x04
    1a64:	40 81       	ld	r20, Z
    1a66:	51 81       	ldd	r21, Z+1	; 0x01
    1a68:	29 81       	ldd	r18, Y+1	; 0x01
    1a6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a6c:	c9 01       	movw	r24, r18
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	fa 01       	movw	r30, r20
    1a80:	e8 0f       	add	r30, r24
    1a82:	f9 1f       	adc	r31, r25
    1a84:	86 81       	ldd	r24, Z+6	; 0x06
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	00 24       	eor	r0, r0
    1a8c:	96 95       	lsr	r25
    1a8e:	87 95       	ror	r24
    1a90:	07 94       	ror	r0
    1a92:	96 95       	lsr	r25
    1a94:	87 95       	ror	r24
    1a96:	07 94       	ror	r0
    1a98:	98 2f       	mov	r25, r24
    1a9a:	80 2d       	mov	r24, r0
    1a9c:	86 2b       	or	r24, r22
    1a9e:	8c 93       	st	X, r24
    1aa0:	b0 c1       	rjmp	.+864    	; 0x1e02 <TIMER_init+0xd1c>
		break;

		case    TIMER1_FAST_PWM_ICR	 :
		/* Choose the Fast Pwm With ICR REG */
		CLR_BIT(TCCR1A, WGM10);
    1aa2:	af e4       	ldi	r26, 0x4F	; 79
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ef e4       	ldi	r30, 0x4F	; 79
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8e 7f       	andi	r24, 0xFE	; 254
    1aae:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    1ab0:	af e4       	ldi	r26, 0x4F	; 79
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ef e4       	ldi	r30, 0x4F	; 79
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    1abe:	ae e4       	ldi	r26, 0x4E	; 78
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ee e4       	ldi	r30, 0x4E	; 78
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	88 60       	ori	r24, 0x08	; 8
    1aca:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    1acc:	ae e4       	ldi	r26, 0x4E	; 78
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ee e4       	ldi	r30, 0x4E	; 78
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 61       	ori	r24, 0x10	; 16
    1ad8:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    1ada:	af e4       	ldi	r26, 0x4F	; 79
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e3 e5       	ldi	r30, 0x53	; 83
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	68 2f       	mov	r22, r24
    1ae6:	6f 70       	andi	r22, 0x0F	; 15
    1ae8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aea:	fc 81       	ldd	r31, Y+4	; 0x04
    1aec:	40 81       	ld	r20, Z
    1aee:	51 81       	ldd	r21, Z+1	; 0x01
    1af0:	29 81       	ldd	r18, Y+1	; 0x01
    1af2:	3a 81       	ldd	r19, Y+2	; 0x02
    1af4:	c9 01       	movw	r24, r18
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	82 0f       	add	r24, r18
    1b04:	93 1f       	adc	r25, r19
    1b06:	fa 01       	movw	r30, r20
    1b08:	e8 0f       	add	r30, r24
    1b0a:	f9 1f       	adc	r31, r25
    1b0c:	85 81       	ldd	r24, Z+5	; 0x05
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	82 95       	swap	r24
    1b14:	92 95       	swap	r25
    1b16:	90 7f       	andi	r25, 0xF0	; 240
    1b18:	98 27       	eor	r25, r24
    1b1a:	80 7f       	andi	r24, 0xF0	; 240
    1b1c:	98 27       	eor	r25, r24
    1b1e:	68 2b       	or	r22, r24
    1b20:	eb 81       	ldd	r30, Y+3	; 0x03
    1b22:	fc 81       	ldd	r31, Y+4	; 0x04
    1b24:	40 81       	ld	r20, Z
    1b26:	51 81       	ldd	r21, Z+1	; 0x01
    1b28:	29 81       	ldd	r18, Y+1	; 0x01
    1b2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b2c:	c9 01       	movw	r24, r18
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	82 0f       	add	r24, r18
    1b3c:	93 1f       	adc	r25, r19
    1b3e:	fa 01       	movw	r30, r20
    1b40:	e8 0f       	add	r30, r24
    1b42:	f9 1f       	adc	r31, r25
    1b44:	85 81       	ldd	r24, Z+5	; 0x05
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	00 24       	eor	r0, r0
    1b4c:	96 95       	lsr	r25
    1b4e:	87 95       	ror	r24
    1b50:	07 94       	ror	r0
    1b52:	96 95       	lsr	r25
    1b54:	87 95       	ror	r24
    1b56:	07 94       	ror	r0
    1b58:	98 2f       	mov	r25, r24
    1b5a:	80 2d       	mov	r24, r0
    1b5c:	86 2b       	or	r24, r22
    1b5e:	8c 93       	st	X, r24

		/* Defining ICR Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
    1b60:	83 e0       	ldi	r24, 0x03	; 3
    1b62:	66 e0       	ldi	r22, 0x06	; 6
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    1b6a:	4b c1       	rjmp	.+662    	; 0x1e02 <TIMER_init+0xd1c>
		break;

		case	 TIMER1_FAST_PWM_OCR :
		/* Choose the Fast Pwm With 0CR REG */
		SET_BIT(TCCR1A, WGM10);
    1b6c:	af e4       	ldi	r26, 0x4F	; 79
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ef e4       	ldi	r30, 0x4F	; 79
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	81 60       	ori	r24, 0x01	; 1
    1b78:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, WGM11);
    1b7a:	af e4       	ldi	r26, 0x4F	; 79
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	ef e4       	ldi	r30, 0x4F	; 79
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	82 60       	ori	r24, 0x02	; 2
    1b86:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    1b88:	ae e4       	ldi	r26, 0x4E	; 78
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	ee e4       	ldi	r30, 0x4E	; 78
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	88 60       	ori	r24, 0x08	; 8
    1b94:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM13);
    1b96:	ae e4       	ldi	r26, 0x4E	; 78
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	ee e4       	ldi	r30, 0x4E	; 78
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	80 61       	ori	r24, 0x10	; 16
    1ba2:	8c 93       	st	X, r24

		/* Choose the PWM Working Mode */
		TCCR1A = (TCCR0 & 0x0F) | ((Config_Ptr->Units[i].PwmMode)<<COM1B0) | ((Config_Ptr->Units[i].PwmMode)<<COM1A0);
    1ba4:	af e4       	ldi	r26, 0x4F	; 79
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e3 e5       	ldi	r30, 0x53	; 83
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	68 2f       	mov	r22, r24
    1bb0:	6f 70       	andi	r22, 0x0F	; 15
    1bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb6:	40 81       	ld	r20, Z
    1bb8:	51 81       	ldd	r21, Z+1	; 0x01
    1bba:	29 81       	ldd	r18, Y+1	; 0x01
    1bbc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bbe:	c9 01       	movw	r24, r18
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	82 0f       	add	r24, r18
    1bce:	93 1f       	adc	r25, r19
    1bd0:	fa 01       	movw	r30, r20
    1bd2:	e8 0f       	add	r30, r24
    1bd4:	f9 1f       	adc	r31, r25
    1bd6:	85 81       	ldd	r24, Z+5	; 0x05
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	82 95       	swap	r24
    1bde:	92 95       	swap	r25
    1be0:	90 7f       	andi	r25, 0xF0	; 240
    1be2:	98 27       	eor	r25, r24
    1be4:	80 7f       	andi	r24, 0xF0	; 240
    1be6:	98 27       	eor	r25, r24
    1be8:	68 2b       	or	r22, r24
    1bea:	eb 81       	ldd	r30, Y+3	; 0x03
    1bec:	fc 81       	ldd	r31, Y+4	; 0x04
    1bee:	40 81       	ld	r20, Z
    1bf0:	51 81       	ldd	r21, Z+1	; 0x01
    1bf2:	29 81       	ldd	r18, Y+1	; 0x01
    1bf4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf6:	c9 01       	movw	r24, r18
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	82 0f       	add	r24, r18
    1c06:	93 1f       	adc	r25, r19
    1c08:	fa 01       	movw	r30, r20
    1c0a:	e8 0f       	add	r30, r24
    1c0c:	f9 1f       	adc	r31, r25
    1c0e:	85 81       	ldd	r24, Z+5	; 0x05
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	00 24       	eor	r0, r0
    1c16:	96 95       	lsr	r25
    1c18:	87 95       	ror	r24
    1c1a:	07 94       	ror	r0
    1c1c:	96 95       	lsr	r25
    1c1e:	87 95       	ror	r24
    1c20:	07 94       	ror	r0
    1c22:	98 2f       	mov	r25, r24
    1c24:	80 2d       	mov	r24, r0
    1c26:	86 2b       	or	r24, r22
    1c28:	8c 93       	st	X, r24

		/* Defining OC1A / OC1B Pin As an Output */
		GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
    1c2a:	83 e0       	ldi	r24, 0x03	; 3
    1c2c:	64 e0       	ldi	r22, 0x04	; 4
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	65 e0       	ldi	r22, 0x05	; 5
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    1c3e:	e1 c0       	rjmp	.+450    	; 0x1e02 <TIMER_init+0xd1c>
		}
		break;

		/*Timer2 initiaillitation*/
	case TIMER2:
		TCCR2 |= Config_Ptr->Units[i].Prescaler;
    1c40:	a5 e4       	ldi	r26, 0x45	; 69
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e4       	ldi	r30, 0x45	; 69
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	60 81       	ld	r22, Z
    1c4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c4e:	40 81       	ld	r20, Z
    1c50:	51 81       	ldd	r21, Z+1	; 0x01
    1c52:	29 81       	ldd	r18, Y+1	; 0x01
    1c54:	3a 81       	ldd	r19, Y+2	; 0x02
    1c56:	c9 01       	movw	r24, r18
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	fa 01       	movw	r30, r20
    1c6a:	e8 0f       	add	r30, r24
    1c6c:	f9 1f       	adc	r31, r25
    1c6e:	81 81       	ldd	r24, Z+1	; 0x01
    1c70:	86 2b       	or	r24, r22
    1c72:	8c 93       	st	X, r24
		switch(Config_Ptr->Units[i].Mode)
    1c74:	eb 81       	ldd	r30, Y+3	; 0x03
    1c76:	fc 81       	ldd	r31, Y+4	; 0x04
    1c78:	40 81       	ld	r20, Z
    1c7a:	51 81       	ldd	r21, Z+1	; 0x01
    1c7c:	29 81       	ldd	r18, Y+1	; 0x01
    1c7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c80:	c9 01       	movw	r24, r18
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	82 0f       	add	r24, r18
    1c90:	93 1f       	adc	r25, r19
    1c92:	fa 01       	movw	r30, r20
    1c94:	e8 0f       	add	r30, r24
    1c96:	f9 1f       	adc	r31, r25
    1c98:	84 81       	ldd	r24, Z+4	; 0x04
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	3e 83       	std	Y+6, r19	; 0x06
    1ca0:	2d 83       	std	Y+5, r18	; 0x05
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	91 05       	cpc	r25, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <TIMER_init+0xbc8>
    1cac:	97 c0       	rjmp	.+302    	; 0x1ddc <TIMER_init+0xcf6>
    1cae:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb0:	3e 81       	ldd	r19, Y+6	; 0x06
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <TIMER_init+0xbdc>
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	61 f0       	breq	.+24     	; 0x1cd8 <TIMER_init+0xbf2>
    1cc0:	a0 c0       	rjmp	.+320    	; 0x1e02 <TIMER_init+0xd1c>
    1cc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	21 f1       	breq	.+72     	; 0x1d14 <TIMER_init+0xc2e>
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	83 30       	cpi	r24, 0x03	; 3
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	e9 f1       	breq	.+122    	; 0x1d50 <TIMER_init+0xc6a>
    1cd6:	95 c0       	rjmp	.+298    	; 0x1e02 <TIMER_init+0xd1c>
			{
			case TIMER2_OVF:
			/* Choose the Normal Mode  */
			CLR_BIT(TCCR2, WGM20);
    1cd8:	a5 e4       	ldi	r26, 0x45	; 69
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e5 e4       	ldi	r30, 0x45	; 69
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	8f 7b       	andi	r24, 0xBF	; 191
    1ce4:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, WGM21);
    1ce6:	a5 e4       	ldi	r26, 0x45	; 69
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e5 e4       	ldi	r30, 0x45	; 69
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	87 7f       	andi	r24, 0xF7	; 247
    1cf2:	8c 93       	st	X, r24

			/* Enabling the Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F) | (1 << TOIE2);
    1cf4:	a9 e5       	ldi	r26, 0x59	; 89
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e9 e5       	ldi	r30, 0x59	; 89
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8f 73       	andi	r24, 0x3F	; 63
    1d00:	80 64       	ori	r24, 0x40	; 64
    1d02:	8c 93       	st	X, r24
			/* Enabling the FOC2 As To Choose Non Pwm Mode */
			SET_BIT(TCCR2, FOC2);
    1d04:	a5 e4       	ldi	r26, 0x45	; 69
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e5 e4       	ldi	r30, 0x45	; 69
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 68       	ori	r24, 0x80	; 128
    1d10:	8c 93       	st	X, r24
    1d12:	77 c0       	rjmp	.+238    	; 0x1e02 <TIMER_init+0xd1c>
			break;

			case TIMER2_CTC:
			/* Choose the Compare Match Mode */
			CLR_BIT(TCCR2, WGM20);
    1d14:	a5 e4       	ldi	r26, 0x45	; 69
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e5 e4       	ldi	r30, 0x45	; 69
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8f 7b       	andi	r24, 0xBF	; 191
    1d20:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    1d22:	a5 e4       	ldi	r26, 0x45	; 69
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e5 e4       	ldi	r30, 0x45	; 69
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 60       	ori	r24, 0x08	; 8
    1d2e:	8c 93       	st	X, r24

			/* Enabling the Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F) | (1 << OCIE2);
    1d30:	a9 e5       	ldi	r26, 0x59	; 89
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e9 e5       	ldi	r30, 0x59	; 89
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 73       	andi	r24, 0x3F	; 63
    1d3c:	80 68       	ori	r24, 0x80	; 128
    1d3e:	8c 93       	st	X, r24
			/* Enabling the FOC2 As To Choose Non Pwm Mode */
			SET_BIT(TCCR2, FOC2);
    1d40:	a5 e4       	ldi	r26, 0x45	; 69
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e5 e4       	ldi	r30, 0x45	; 69
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	80 68       	ori	r24, 0x80	; 128
    1d4c:	8c 93       	st	X, r24
    1d4e:	59 c0       	rjmp	.+178    	; 0x1e02 <TIMER_init+0xd1c>
			break;

			case TIMER2_FAST_PWM :
			/* Choose the FAST PWM */
			SET_BIT(TCCR2, WGM20);
    1d50:	a5 e4       	ldi	r26, 0x45	; 69
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e5 e4       	ldi	r30, 0x45	; 69
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 64       	ori	r24, 0x40	; 64
    1d5c:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM21);
    1d5e:	a5 e4       	ldi	r26, 0x45	; 69
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 e4       	ldi	r30, 0x45	; 69
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	88 60       	ori	r24, 0x08	; 8
    1d6a:	8c 93       	st	X, r24

			/* Choose the Fast Pwm Working Mode */
			TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Units[i].PwmMode)<<COM20) ;
    1d6c:	a5 e4       	ldi	r26, 0x45	; 69
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e5 e4       	ldi	r30, 0x45	; 69
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	68 2f       	mov	r22, r24
    1d78:	6f 7c       	andi	r22, 0xCF	; 207
    1d7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7e:	40 81       	ld	r20, Z
    1d80:	51 81       	ldd	r21, Z+1	; 0x01
    1d82:	29 81       	ldd	r18, Y+1	; 0x01
    1d84:	3a 81       	ldd	r19, Y+2	; 0x02
    1d86:	c9 01       	movw	r24, r18
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	82 0f       	add	r24, r18
    1d96:	93 1f       	adc	r25, r19
    1d98:	fa 01       	movw	r30, r20
    1d9a:	e8 0f       	add	r30, r24
    1d9c:	f9 1f       	adc	r31, r25
    1d9e:	85 81       	ldd	r24, Z+5	; 0x05
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	82 95       	swap	r24
    1da6:	92 95       	swap	r25
    1da8:	90 7f       	andi	r25, 0xF0	; 240
    1daa:	98 27       	eor	r25, r24
    1dac:	80 7f       	andi	r24, 0xF0	; 240
    1dae:	98 27       	eor	r25, r24
    1db0:	86 2b       	or	r24, r22
    1db2:	8c 93       	st	X, r24

			/* Disabling the CTC , Overflow Interrupt Enable */
			TIMSK = (TIMSK & 0x3F);
    1db4:	a9 e5       	ldi	r26, 0x59	; 89
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e9 e5       	ldi	r30, 0x59	; 89
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8f 73       	andi	r24, 0x3F	; 63
    1dc0:	8c 93       	st	X, r24

			/* Disabling the FOCO As i Choose a Pwm Mode */
			CLR_BIT(TCCR2, FOC2);
    1dc2:	a5 e4       	ldi	r26, 0x45	; 69
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e4       	ldi	r30, 0x45	; 69
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8f 77       	andi	r24, 0x7F	; 127
    1dce:	8c 93       	st	X, r24

			/* Defining OC2 Pin As an Output */
			GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	67 e0       	ldi	r22, 0x07	; 7
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    1dda:	13 c0       	rjmp	.+38     	; 0x1e02 <TIMER_init+0xd1c>
			break;

		    case TIMER2_PHASE_PWM :
		    /* Choose the Phase PWM */
			SET_BIT(TCCR2, WGM20);
    1ddc:	a5 e4       	ldi	r26, 0x45	; 69
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e5 e4       	ldi	r30, 0x45	; 69
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	80 64       	ori	r24, 0x40	; 64
    1de8:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, WGM21);
    1dea:	a5 e4       	ldi	r26, 0x45	; 69
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e5 e4       	ldi	r30, 0x45	; 69
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	87 7f       	andi	r24, 0xF7	; 247
    1df6:	8c 93       	st	X, r24

			/* Defining OC2 Pin As an Output */
			GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    1df8:	83 e0       	ldi	r24, 0x03	; 3
    1dfa:	67 e0       	ldi	r22, 0x07	; 7
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
 * @return none
 */
void TIMER_init(const TIMER_ConfigType *Config_Ptr)
{
	int i;
	for(i=0;i<NUMBER_OF_USED_TIMERS;i++)
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	18 16       	cp	r1, r24
    1e12:	19 06       	cpc	r1, r25
    1e14:	0c f0       	brlt	.+2      	; 0x1e18 <TIMER_init+0xd32>
    1e16:	76 c9       	rjmp	.-3348   	; 0x1104 <TIMER_init+0x1e>
		 default :
				 /* Wrong Timer Num */
		 break;
	}
	}
}
    1e18:	2c 96       	adiw	r28, 0x0c	; 12
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <TIMER_read>:
 *
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @return     Type uint8    The current count value of the specified timer
 */
uint8 TIMER_read(Timer_ID Timer_num)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <TIMER_read+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <TIMER_read+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	89 83       	std	Y+1, r24	; 0x01
	/* Read the current count value of the specified timer */
	switch(Timer_num)
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3c 83       	std	Y+4, r19	; 0x04
    1e40:	2b 83       	std	Y+3, r18	; 0x03
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	71 f0       	breq	.+28     	; 0x1e68 <TIMER_read+0x3e>
    1e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	79 f0       	breq	.+30     	; 0x1e74 <TIMER_read+0x4a>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <TIMER_read+0x54>
	{
		case TIMER0:
			return TCNT0; /* Return the current count value of TIMER0 */
    1e5e:	e2 e5       	ldi	r30, 0x52	; 82
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	90 81       	ld	r25, Z
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	0c c0       	rjmp	.+24     	; 0x1e80 <TIMER_read+0x56>
			break;

		case TIMER1:
			return TCNT1; /* Return the current count value of TIMER1 */
    1e68:	ec e4       	ldi	r30, 0x4C	; 76
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	8a 83       	std	Y+2, r24	; 0x02
    1e72:	06 c0       	rjmp	.+12     	; 0x1e80 <TIMER_read+0x56>
			break;

		case TIMER2:
			return TCNT2; /* Return the current count value of TIMER2 */
    1e74:	e4 e4       	ldi	r30, 0x44	; 68
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	20 81       	ld	r18, Z
    1e7a:	2a 83       	std	Y+2, r18	; 0x02
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <TIMER_read+0x56>
			break;

		default:
			/* Wrong Timer Num: Invalid timer number specified */
			return 0;
    1e7e:	1a 82       	std	Y+2, r1	; 0x02
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
			break;
	}
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <TIMER_setPreloadValue>:
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @param[in]  Preload       Type uint16       Range 0 to 65535
 * @return None
 */
void TIMER_setPreloadValue(Timer_ID Timer_num, uint16 Preload)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <TIMER_setPreloadValue+0x6>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <TIMER_setPreloadValue+0x8>
    1e98:	0f 92       	push	r0
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	7b 83       	std	Y+3, r23	; 0x03
    1ea2:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the preload value for the specified timer */
	switch(Timer_num)
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	3d 83       	std	Y+5, r19	; 0x05
    1eac:	2c 83       	std	Y+4, r18	; 0x04
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb2:	81 30       	cpi	r24, 0x01	; 1
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	71 f0       	breq	.+28     	; 0x1ed4 <TIMER_setPreloadValue+0x44>
    1eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eba:	3d 81       	ldd	r19, Y+5	; 0x05
    1ebc:	22 30       	cpi	r18, 0x02	; 2
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	81 f0       	breq	.+32     	; 0x1ee2 <TIMER_setPreloadValue+0x52>
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	81 f4       	brne	.+32     	; 0x1eea <TIMER_setPreloadValue+0x5a>
	{
		case TIMER0:
			TCNT0 = Preload; /* Set the preload value for TIMER0 */
    1eca:	e2 e5       	ldi	r30, 0x52	; 82
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	80 83       	st	Z, r24
    1ed2:	0b c0       	rjmp	.+22     	; 0x1eea <TIMER_setPreloadValue+0x5a>
			break;

		case TIMER1:
			TCNT1 = Preload; /* Set the preload value for TIMER1 */
    1ed4:	ec e4       	ldi	r30, 0x4C	; 76
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	9b 81       	ldd	r25, Y+3	; 0x03
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	80 83       	st	Z, r24
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <TIMER_setPreloadValue+0x5a>
			break;

		case TIMER2:
			TCNT2 = Preload; /* Set the preload value for TIMER2 */
    1ee2:	e4 e4       	ldi	r30, 0x44	; 68
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	80 83       	st	Z, r24

		default:
			/* Wrong Timer Num: Invalid timer number specified */
			break;
	}
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <TIMER_setCompareMatch>:
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @param[in]  Value         Type uint16       Range 0 to 65535
 * @return None
 */
void TIMER_setCompareMatch(Timer_ID Timer_num, uint16 Value)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <TIMER_setCompareMatch+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <TIMER_setCompareMatch+0x8>
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	7b 83       	std	Y+3, r23	; 0x03
    1f0c:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the compare match value for the specified timer */
	switch(Timer_num)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3d 83       	std	Y+5, r19	; 0x05
    1f16:	2c 83       	std	Y+4, r18	; 0x04
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	71 f0       	breq	.+28     	; 0x1f3e <TIMER_setCompareMatch+0x44>
    1f22:	2c 81       	ldd	r18, Y+4	; 0x04
    1f24:	3d 81       	ldd	r19, Y+5	; 0x05
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	f9 f0       	breq	.+62     	; 0x1f6a <TIMER_setCompareMatch+0x70>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	f9 f4       	brne	.+62     	; 0x1f72 <TIMER_setCompareMatch+0x78>
	{
		case TIMER0:
			OCR0 = Value; /* Set the compare match value for TIMER0 */
    1f34:	ec e5       	ldi	r30, 0x5C	; 92
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	80 83       	st	Z, r24
    1f3c:	1a c0       	rjmp	.+52     	; 0x1f72 <TIMER_setCompareMatch+0x78>
			break;

		case TIMER1:
			/* Check the mode of TIMER1 and set the compare match value accordingly */
			if (Timer1_Mode == TIMER1_CTC_OCR)
    1f3e:	80 91 b7 02 	lds	r24, 0x02B7
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	39 f4       	brne	.+14     	; 0x1f54 <TIMER_setCompareMatch+0x5a>
			{
				OCR1A = Value; /* Set the compare match value for TIMER1 in CTC mode with OCR1A */
    1f46:	ea e4       	ldi	r30, 0x4A	; 74
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <TIMER_setCompareMatch+0x78>
			}
			else if (Timer1_Mode == TIMER1_CTC_ICR)
    1f54:	80 91 b7 02 	lds	r24, 0x02B7
    1f58:	8c 30       	cpi	r24, 0x0C	; 12
    1f5a:	59 f4       	brne	.+22     	; 0x1f72 <TIMER_setCompareMatch+0x78>
			{
				ICR1 = Value; /* Set the compare match value for TIMER1 in CTC mode with ICR1 Reg*/
    1f5c:	e6 e4       	ldi	r30, 0x46	; 70
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	9b 81       	ldd	r25, Y+3	; 0x03
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <TIMER_setCompareMatch+0x78>
			}
			break;

		case TIMER2:
			OCR2 = Value; /* Set the compare match value for TIMER2 */
    1f6a:	e3 e4       	ldi	r30, 0x43	; 67
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	80 83       	st	Z, r24

		default:
			/* Wrong Timer Num: Invalid timer number specified */
			break;
	}
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <TIMER_setCallBack>:
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @param[in]  copy_ptr      Type pointer to function   Range Any function pointer
 * @return None
 */
void TIMER_setCallBack(Timer_ID Timer_num , void (*copy_ptr)(void))
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <TIMER_setCallBack+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <TIMER_setCallBack+0x8>
    1f8a:	0f 92       	push	r0
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	7b 83       	std	Y+3, r23	; 0x03
    1f94:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the callback function for the specified timer */
	switch(Timer_num)
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	3d 83       	std	Y+5, r19	; 0x05
    1f9e:	2c 83       	std	Y+4, r18	; 0x04
    1fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	81 f0       	breq	.+32     	; 0x1fca <TIMER_setCallBack+0x48>
    1faa:	2c 81       	ldd	r18, Y+4	; 0x04
    1fac:	3d 81       	ldd	r19, Y+5	; 0x05
    1fae:	22 30       	cpi	r18, 0x02	; 2
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	91 f0       	breq	.+36     	; 0x1fd8 <TIMER_setCallBack+0x56>
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	a1 f4       	brne	.+40     	; 0x1fe4 <TIMER_setCallBack+0x62>
	{
		case TIMER0:
			TIMER0_PtrCallBack = copy_ptr; /* Set the callback function for TIMER0 */
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	90 93 ae 02 	sts	0x02AE, r25
    1fc4:	80 93 ad 02 	sts	0x02AD, r24
    1fc8:	0d c0       	rjmp	.+26     	; 0x1fe4 <TIMER_setCallBack+0x62>
			break;
		case TIMER1:
			TIMER1_PtrCallBack = copy_ptr; /* Set the callback function for TIMER1 */
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	90 93 b0 02 	sts	0x02B0, r25
    1fd2:	80 93 af 02 	sts	0x02AF, r24
    1fd6:	06 c0       	rjmp	.+12     	; 0x1fe4 <TIMER_setCallBack+0x62>
			break;
		case TIMER2:
			TIMER2_PtrCallBack = copy_ptr; /* Set the callback function for TIMER2 */
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	9b 81       	ldd	r25, Y+3	; 0x03
    1fdc:	90 93 b2 02 	sts	0x02B2, r25
    1fe0:	80 93 b1 02 	sts	0x02B1, r24
			break;
		default :
	  		/* Wrong Timer Num: Invalid timer number specified */
			break;
	}
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <TIMER_deInit>:
 *
 * @param[in]  Timer_num     Type Timer_ID     Range TIMER0, TIMER1, TIMER2
 * @return None
 */
void TIMER_deInit(Timer_ID Timer_num)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <TIMER_deInit+0x6>
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
	/* Deinitialize the specified timer */
	switch(Timer_num)
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	3b 83       	std	Y+3, r19	; 0x03
    200a:	2a 83       	std	Y+2, r18	; 0x02
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	91 05       	cpc	r25, r1
    2014:	a1 f0       	breq	.+40     	; 0x203e <TIMER_deInit+0x4a>
    2016:	2a 81       	ldd	r18, Y+2	; 0x02
    2018:	3b 81       	ldd	r19, Y+3	; 0x03
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	e9 f0       	breq	.+58     	; 0x205a <TIMER_deInit+0x66>
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	19 f5       	brne	.+70     	; 0x206e <TIMER_deInit+0x7a>
	{
		case TIMER0:
			TCCR0 = 0;     /* Reset TIMER0 control register */
    2028:	e3 e5       	ldi	r30, 0x53	; 83
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	10 82       	st	Z, r1
			TIMSK &= 0xFC; /* Disable TIMER0 interrupts */
    202e:	a9 e5       	ldi	r26, 0x59	; 89
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e9 e5       	ldi	r30, 0x59	; 89
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8c 7f       	andi	r24, 0xFC	; 252
    203a:	8c 93       	st	X, r24
    203c:	18 c0       	rjmp	.+48     	; 0x206e <TIMER_deInit+0x7a>
			break;

		case TIMER1:
			TCCR1A = 0;    /* Reset TIMER1 control register A */
    203e:	ef e4       	ldi	r30, 0x4F	; 79
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	10 82       	st	Z, r1
			TCCR1B = 0;    /* Reset TIMER1 control register B */
    2044:	ee e4       	ldi	r30, 0x4E	; 78
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	10 82       	st	Z, r1
			TIMSK &= 0xC3; /* Disable TIMER1 interrupts */
    204a:	a9 e5       	ldi	r26, 0x59	; 89
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e9 e5       	ldi	r30, 0x59	; 89
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	83 7c       	andi	r24, 0xC3	; 195
    2056:	8c 93       	st	X, r24
    2058:	0a c0       	rjmp	.+20     	; 0x206e <TIMER_deInit+0x7a>
			break;

		case TIMER2:
			TCCR2 = 0;     /* Reset TIMER2 control register */
    205a:	e5 e4       	ldi	r30, 0x45	; 69
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	10 82       	st	Z, r1
			TIMSK &= 0x3F; /* Disable TIMER2 interrupts */
    2060:	a9 e5       	ldi	r26, 0x59	; 89
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e9 e5       	ldi	r30, 0x59	; 89
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	8f 73       	andi	r24, 0x3F	; 63
    206c:	8c 93       	st	X, r24

		default:
			/* Wrong Timer Num: Invalid timer number specified */
			break;
	}
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <TIMER0_setPwmDutyCycle>:
 *
 * @param[in]  DutyCycle   Type uint8     Range 0 to 100
 * @return None
 */
void TIMER0_setPwmDutyCycle(uint8 DutyCycle)
{
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate and set the PWM duty cycle for TIMER0 */
	OCR0 = (float32)((float32)DutyCycle / 100) * 255;
    208a:	0c e5       	ldi	r16, 0x5C	; 92
    208c:	10 e0       	ldi	r17, 0x00	; 0
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	48 ec       	ldi	r20, 0xC8	; 200
    20ae:	52 e4       	ldi	r21, 0x42	; 66
    20b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	53 e4       	ldi	r21, 0x43	; 67
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	f8 01       	movw	r30, r16
    20da:	80 83       	st	Z, r24
}
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	08 95       	ret

000020e8 <TIMER1_setPwmDutyCycle>:
 * @param[in]  DutyCycle   Type uint8     Range 0 to 100
 * @param[in]  Circuit     Type uint8     Range OCRA or OCRB
 * @return None
 */
void TIMER1_setPwmDutyCycle(uint8 DutyCycle, uint8 Circuit)
{
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	28 97       	sbiw	r28, 0x08	; 8
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the PWM duty cycle for TIMER1 based on the selected mode and circuit */
	if (Timer1_Mode == TIMER1_FAST_PWM_8BIT)
    2104:	80 91 b7 02 	lds	r24, 0x02B7
    2108:	85 30       	cpi	r24, 0x05	; 5
    210a:	09 f0       	breq	.+2      	; 0x210e <TIMER1_setPwmDutyCycle+0x26>
    210c:	66 c0       	rjmp	.+204    	; 0x21da <TIMER1_setPwmDutyCycle+0xf2>
	{
		/* Set the PWM duty cycle for TIMER1 in 8-bit fast PWM mode */
		switch(Circuit)
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	38 87       	std	Y+8, r19	; 0x08
    2116:	2f 83       	std	Y+7, r18	; 0x07
    2118:	8f 81       	ldd	r24, Y+7	; 0x07
    211a:	98 85       	ldd	r25, Y+8	; 0x08
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	91 05       	cpc	r25, r1
    2120:	31 f0       	breq	.+12     	; 0x212e <TIMER1_setPwmDutyCycle+0x46>
    2122:	ef 81       	ldd	r30, Y+7	; 0x07
    2124:	f8 85       	ldd	r31, Y+8	; 0x08
    2126:	e2 30       	cpi	r30, 0x02	; 2
    2128:	f1 05       	cpc	r31, r1
    212a:	61 f1       	breq	.+88     	; 0x2184 <TIMER1_setPwmDutyCycle+0x9c>
    212c:	72 c1       	rjmp	.+740    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
		{
			case 1:
				OCR1A = (float32)((float32)DutyCycle / 100) * 255;
    212e:	0a e4       	ldi	r16, 0x4A	; 74
    2130:	10 e0       	ldi	r17, 0x00	; 0
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a0 e0       	ldi	r26, 0x00	; 0
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	48 ec       	ldi	r20, 0xC8	; 200
    2152:	52 e4       	ldi	r21, 0x42	; 66
    2154:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	53 e4       	ldi	r21, 0x43	; 67
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	f8 01       	movw	r30, r16
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	47 c1       	rjmp	.+654    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
				break;
			case 2:
				OCR1B = (float32)((float32)DutyCycle / 100) * 255;
    2184:	08 e4       	ldi	r16, 0x48	; 72
    2186:	10 e0       	ldi	r17, 0x00	; 0
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a0 e0       	ldi	r26, 0x00	; 0
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	48 ec       	ldi	r20, 0xC8	; 200
    21a8:	52 e4       	ldi	r21, 0x42	; 66
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	53 e4       	ldi	r21, 0x43	; 67
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	f8 01       	movw	r30, r16
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    21d8:	1c c1       	rjmp	.+568    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
			default:
				/* Wrong Input: Invalid circuit specified */
				break;
		}
	}
	else if (Timer1_Mode == TIMER1_FAST_PWM_9BIT)
    21da:	80 91 b7 02 	lds	r24, 0x02B7
    21de:	86 30       	cpi	r24, 0x06	; 6
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <TIMER1_setPwmDutyCycle+0xfc>
    21e2:	66 c0       	rjmp	.+204    	; 0x22b0 <TIMER1_setPwmDutyCycle+0x1c8>
	{
		/* Set the PWM duty cycle for TIMER1 in 9-bit fast PWM mode */
		switch(Circuit)
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	3e 83       	std	Y+6, r19	; 0x06
    21ec:	2d 83       	std	Y+5, r18	; 0x05
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	91 05       	cpc	r25, r1
    21f6:	31 f0       	breq	.+12     	; 0x2204 <TIMER1_setPwmDutyCycle+0x11c>
    21f8:	ed 81       	ldd	r30, Y+5	; 0x05
    21fa:	fe 81       	ldd	r31, Y+6	; 0x06
    21fc:	e2 30       	cpi	r30, 0x02	; 2
    21fe:	f1 05       	cpc	r31, r1
    2200:	61 f1       	breq	.+88     	; 0x225a <TIMER1_setPwmDutyCycle+0x172>
    2202:	07 c1       	rjmp	.+526    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
		{
			case 1:
				OCR1A = (float32)((float32)DutyCycle / 100) * 511;
    2204:	0a e4       	ldi	r16, 0x4A	; 74
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e0       	ldi	r26, 0x00	; 0
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	48 ec       	ldi	r20, 0xC8	; 200
    2228:	52 e4       	ldi	r21, 0x42	; 66
    222a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e8       	ldi	r19, 0x80	; 128
    223a:	4f ef       	ldi	r20, 0xFF	; 255
    223c:	53 e4       	ldi	r21, 0x43	; 67
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	f8 01       	movw	r30, r16
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
    2258:	dc c0       	rjmp	.+440    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
				break;
			case 2:
				OCR1B = (float32)((float32)DutyCycle / 100) * 511;
    225a:	08 e4       	ldi	r16, 0x48	; 72
    225c:	10 e0       	ldi	r17, 0x00	; 0
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e0       	ldi	r26, 0x00	; 0
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	48 ec       	ldi	r20, 0xC8	; 200
    227e:	52 e4       	ldi	r21, 0x42	; 66
    2280:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e8       	ldi	r19, 0x80	; 128
    2290:	4f ef       	ldi	r20, 0xFF	; 255
    2292:	53 e4       	ldi	r21, 0x43	; 67
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	b1 c0       	rjmp	.+354    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
			default:
				/* Wrong Input: Invalid circuit specified */
				break;
		}
	}
	else if (Timer1_Mode == TIMER1_FAST_PWM_10BIT)
    22b0:	80 91 b7 02 	lds	r24, 0x02B7
    22b4:	87 30       	cpi	r24, 0x07	; 7
    22b6:	09 f0       	breq	.+2      	; 0x22ba <TIMER1_setPwmDutyCycle+0x1d2>
    22b8:	66 c0       	rjmp	.+204    	; 0x2386 <TIMER1_setPwmDutyCycle+0x29e>
	{
		/* Set the PWM duty cycle for TIMER1 in 10-bit fast PWM mode */
		switch(Circuit)
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	3c 83       	std	Y+4, r19	; 0x04
    22c2:	2b 83       	std	Y+3, r18	; 0x03
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	91 05       	cpc	r25, r1
    22cc:	31 f0       	breq	.+12     	; 0x22da <TIMER1_setPwmDutyCycle+0x1f2>
    22ce:	eb 81       	ldd	r30, Y+3	; 0x03
    22d0:	fc 81       	ldd	r31, Y+4	; 0x04
    22d2:	e2 30       	cpi	r30, 0x02	; 2
    22d4:	f1 05       	cpc	r31, r1
    22d6:	61 f1       	breq	.+88     	; 0x2330 <TIMER1_setPwmDutyCycle+0x248>
    22d8:	9c c0       	rjmp	.+312    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
		{
			case 1:
				OCR1A = (float32)((float32)DutyCycle / 100) * 1023;
    22da:	0a e4       	ldi	r16, 0x4A	; 74
    22dc:	10 e0       	ldi	r17, 0x00	; 0
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a0 e0       	ldi	r26, 0x00	; 0
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	48 ec       	ldi	r20, 0xC8	; 200
    22fe:	52 e4       	ldi	r21, 0x42	; 66
    2300:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 ec       	ldi	r19, 0xC0	; 192
    2310:	4f e7       	ldi	r20, 0x7F	; 127
    2312:	54 e4       	ldi	r21, 0x44	; 68
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	f8 01       	movw	r30, r16
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
    232e:	71 c0       	rjmp	.+226    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
				break;
			case 2:
				OCR1B = (float32)((float32)DutyCycle / 100) * 1023;
    2330:	08 e4       	ldi	r16, 0x48	; 72
    2332:	10 e0       	ldi	r17, 0x00	; 0
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a0 e0       	ldi	r26, 0x00	; 0
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	48 ec       	ldi	r20, 0xC8	; 200
    2354:	52 e4       	ldi	r21, 0x42	; 66
    2356:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 ec       	ldi	r19, 0xC0	; 192
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	f8 01       	movw	r30, r16
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	80 83       	st	Z, r24
    2384:	46 c0       	rjmp	.+140    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
			default:
				/* Wrong Input: Invalid circuit specified */
				break;
		}
	}
	else if (Timer1_Mode == TIMER1_FAST_PWM_ICR)
    2386:	80 91 b7 02 	lds	r24, 0x02B7
    238a:	8e 30       	cpi	r24, 0x0E	; 14
    238c:	71 f4       	brne	.+28     	; 0x23aa <TIMER1_setPwmDutyCycle+0x2c2>
	{
		/* Set the PWM duty cycle for TIMER1 in fast PWM mode with ICR as top value */
		ICR1 = 2499; /* Assuming 2500 as TOP value for ICR1 */
    238e:	e6 e4       	ldi	r30, 0x46	; 70
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	83 ec       	ldi	r24, 0xC3	; 195
    2394:	99 e0       	ldi	r25, 0x09	; 9
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
		OCR1A = DutyCycle; /* Set OCR1A with the provided duty cycle */
    239a:	ea e4       	ldi	r30, 0x4A	; 74
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
    23a8:	34 c0       	rjmp	.+104    	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
	}
	else if (Timer1_Mode == TIMER1_FAST_PWM_OCR)
    23aa:	80 91 b7 02 	lds	r24, 0x02B7
    23ae:	8f 30       	cpi	r24, 0x0F	; 15
    23b0:	81 f5       	brne	.+96     	; 0x2412 <TIMER1_setPwmDutyCycle+0x32a>
	{
		/* Set the PWM duty cycle for TIMER1 in fast PWM mode with OCR1 as top value */
		OCR1A = 65535; /* Setting the maximum value for OCR1A */
    23b2:	ea e4       	ldi	r30, 0x4A	; 74
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	8f ef       	ldi	r24, 0xFF	; 255
    23b8:	9f ef       	ldi	r25, 0xFF	; 255
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
		OCR1B = (float32)((float32)DutyCycle / 100) * 65535; /* Set OCR1B with the provided duty cycle */
    23be:	08 e4       	ldi	r16, 0x48	; 72
    23c0:	10 e0       	ldi	r17, 0x00	; 0
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a0 e0       	ldi	r26, 0x00	; 0
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	48 ec       	ldi	r20, 0xC8	; 200
    23e2:	52 e4       	ldi	r21, 0x42	; 66
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	3f ef       	ldi	r19, 0xFF	; 255
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	57 e4       	ldi	r21, 0x47	; 71
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	f8 01       	movw	r30, r16
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	80 83       	st	Z, r24
	}
}
    2412:	28 96       	adiw	r28, 0x08	; 8
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <TIMER2_setPwmDutyCycle>:
 *
 * @param[in]  DutyCycle   Type uint8     Range 0 to 100
 * @return None
 */
void TIMER2_setPwmDutyCycle(uint8 DutyCycle)
{
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	0f 92       	push	r0
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate and set the PWM duty cycle for TIMER2 */
	OCR2 = (float32)((float32)DutyCycle / 100) * 255;
    2438:	03 e4       	ldi	r16, 0x43	; 67
    243a:	10 e0       	ldi	r17, 0x00	; 0
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e0       	ldi	r26, 0x00	; 0
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	48 ec       	ldi	r20, 0xC8	; 200
    245c:	52 e4       	ldi	r21, 0x42	; 66
    245e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	53 e4       	ldi	r21, 0x43	; 67
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	f8 01       	movw	r30, r16
    2488:	80 83       	st	Z, r24
}
    248a:	0f 90       	pop	r0
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	08 95       	ret

00002496 <__vector_4>:
									   	   	   ISR
   ===================================================================================================*/

/*TIMER2 COMP ISR*/
void __vector_4(void)
{
    2496:	1f 92       	push	r1
    2498:	0f 92       	push	r0
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	0f 92       	push	r0
    249e:	11 24       	eor	r1, r1
    24a0:	2f 93       	push	r18
    24a2:	3f 93       	push	r19
    24a4:	4f 93       	push	r20
    24a6:	5f 93       	push	r21
    24a8:	6f 93       	push	r22
    24aa:	7f 93       	push	r23
    24ac:	8f 93       	push	r24
    24ae:	9f 93       	push	r25
    24b0:	af 93       	push	r26
    24b2:	bf 93       	push	r27
    24b4:	ef 93       	push	r30
    24b6:	ff 93       	push	r31
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62

	if (TIMER2_PtrCallBack != NULL_PTR)
    24c0:	80 91 b1 02 	lds	r24, 0x02B1
    24c4:	90 91 b2 02 	lds	r25, 0x02B2
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	29 f0       	breq	.+10     	; 0x24d6 <__vector_4+0x40>
			{
			TIMER2_PtrCallBack();
    24cc:	e0 91 b1 02 	lds	r30, 0x02B1
    24d0:	f0 91 b2 02 	lds	r31, 0x02B2
    24d4:	09 95       	icall
			}
	else
			{
			/* Do Nothing */
			}
}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	ff 91       	pop	r31
    24dc:	ef 91       	pop	r30
    24de:	bf 91       	pop	r27
    24e0:	af 91       	pop	r26
    24e2:	9f 91       	pop	r25
    24e4:	8f 91       	pop	r24
    24e6:	7f 91       	pop	r23
    24e8:	6f 91       	pop	r22
    24ea:	5f 91       	pop	r21
    24ec:	4f 91       	pop	r20
    24ee:	3f 91       	pop	r19
    24f0:	2f 91       	pop	r18
    24f2:	0f 90       	pop	r0
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	0f 90       	pop	r0
    24f8:	1f 90       	pop	r1
    24fa:	18 95       	reti

000024fc <__vector_5>:
/*TIMER2 OVF ISR*/
void __vector_5(void)
{
    24fc:	1f 92       	push	r1
    24fe:	0f 92       	push	r0
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	0f 92       	push	r0
    2504:	11 24       	eor	r1, r1
    2506:	2f 93       	push	r18
    2508:	3f 93       	push	r19
    250a:	4f 93       	push	r20
    250c:	5f 93       	push	r21
    250e:	6f 93       	push	r22
    2510:	7f 93       	push	r23
    2512:	8f 93       	push	r24
    2514:	9f 93       	push	r25
    2516:	af 93       	push	r26
    2518:	bf 93       	push	r27
    251a:	ef 93       	push	r30
    251c:	ff 93       	push	r31
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
		if (TIMER2_PtrCallBack != NULL_PTR)
    2526:	80 91 b1 02 	lds	r24, 0x02B1
    252a:	90 91 b2 02 	lds	r25, 0x02B2
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	29 f0       	breq	.+10     	; 0x253c <__vector_5+0x40>
		{
			TIMER2_PtrCallBack();
    2532:	e0 91 b1 02 	lds	r30, 0x02B1
    2536:	f0 91 b2 02 	lds	r31, 0x02B2
    253a:	09 95       	icall
		else
		{
			/* Do Nothing */
		}

}
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	ff 91       	pop	r31
    2542:	ef 91       	pop	r30
    2544:	bf 91       	pop	r27
    2546:	af 91       	pop	r26
    2548:	9f 91       	pop	r25
    254a:	8f 91       	pop	r24
    254c:	7f 91       	pop	r23
    254e:	6f 91       	pop	r22
    2550:	5f 91       	pop	r21
    2552:	4f 91       	pop	r20
    2554:	3f 91       	pop	r19
    2556:	2f 91       	pop	r18
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <__vector_7>:

/* TIMER1 COMPA ISR */
void __vector_7(void)
{
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	2f 93       	push	r18
    256e:	3f 93       	push	r19
    2570:	4f 93       	push	r20
    2572:	5f 93       	push	r21
    2574:	6f 93       	push	r22
    2576:	7f 93       	push	r23
    2578:	8f 93       	push	r24
    257a:	9f 93       	push	r25
    257c:	af 93       	push	r26
    257e:	bf 93       	push	r27
    2580:	ef 93       	push	r30
    2582:	ff 93       	push	r31
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
if (TIMER1_PtrCallBack != NULL_PTR)
    258c:	80 91 af 02 	lds	r24, 0x02AF
    2590:	90 91 b0 02 	lds	r25, 0x02B0
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	29 f0       	breq	.+10     	; 0x25a2 <__vector_7+0x40>
			{
	TIMER1_PtrCallBack();
    2598:	e0 91 af 02 	lds	r30, 0x02AF
    259c:	f0 91 b0 02 	lds	r31, 0x02B0
    25a0:	09 95       	icall
			else
			{
			/* Do Nothing */
			}

}
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	ff 91       	pop	r31
    25a8:	ef 91       	pop	r30
    25aa:	bf 91       	pop	r27
    25ac:	af 91       	pop	r26
    25ae:	9f 91       	pop	r25
    25b0:	8f 91       	pop	r24
    25b2:	7f 91       	pop	r23
    25b4:	6f 91       	pop	r22
    25b6:	5f 91       	pop	r21
    25b8:	4f 91       	pop	r20
    25ba:	3f 91       	pop	r19
    25bc:	2f 91       	pop	r18
    25be:	0f 90       	pop	r0
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	0f 90       	pop	r0
    25c4:	1f 90       	pop	r1
    25c6:	18 95       	reti

000025c8 <__vector_8>:

/* TIMER1 COMPB ISR */
void __vector_8(void)
{
    25c8:	1f 92       	push	r1
    25ca:	0f 92       	push	r0
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	0f 92       	push	r0
    25d0:	11 24       	eor	r1, r1
    25d2:	2f 93       	push	r18
    25d4:	3f 93       	push	r19
    25d6:	4f 93       	push	r20
    25d8:	5f 93       	push	r21
    25da:	6f 93       	push	r22
    25dc:	7f 93       	push	r23
    25de:	8f 93       	push	r24
    25e0:	9f 93       	push	r25
    25e2:	af 93       	push	r26
    25e4:	bf 93       	push	r27
    25e6:	ef 93       	push	r30
    25e8:	ff 93       	push	r31
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
	TIMER1_PtrCallBack();
    25f2:	e0 91 af 02 	lds	r30, 0x02AF
    25f6:	f0 91 b0 02 	lds	r31, 0x02B0
    25fa:	09 95       	icall
}
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	ff 91       	pop	r31
    2602:	ef 91       	pop	r30
    2604:	bf 91       	pop	r27
    2606:	af 91       	pop	r26
    2608:	9f 91       	pop	r25
    260a:	8f 91       	pop	r24
    260c:	7f 91       	pop	r23
    260e:	6f 91       	pop	r22
    2610:	5f 91       	pop	r21
    2612:	4f 91       	pop	r20
    2614:	3f 91       	pop	r19
    2616:	2f 91       	pop	r18
    2618:	0f 90       	pop	r0
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	0f 90       	pop	r0
    261e:	1f 90       	pop	r1
    2620:	18 95       	reti

00002622 <__vector_9>:

/*TIMER1 OVF ISR*/
void __vector_9(void)
{
    2622:	1f 92       	push	r1
    2624:	0f 92       	push	r0
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	0f 92       	push	r0
    262a:	11 24       	eor	r1, r1
    262c:	2f 93       	push	r18
    262e:	3f 93       	push	r19
    2630:	4f 93       	push	r20
    2632:	5f 93       	push	r21
    2634:	6f 93       	push	r22
    2636:	7f 93       	push	r23
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25
    263c:	af 93       	push	r26
    263e:	bf 93       	push	r27
    2640:	ef 93       	push	r30
    2642:	ff 93       	push	r31
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
	TIMER1_PtrCallBack();
    264c:	e0 91 af 02 	lds	r30, 0x02AF
    2650:	f0 91 b0 02 	lds	r31, 0x02B0
    2654:	09 95       	icall
}
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	ff 91       	pop	r31
    265c:	ef 91       	pop	r30
    265e:	bf 91       	pop	r27
    2660:	af 91       	pop	r26
    2662:	9f 91       	pop	r25
    2664:	8f 91       	pop	r24
    2666:	7f 91       	pop	r23
    2668:	6f 91       	pop	r22
    266a:	5f 91       	pop	r21
    266c:	4f 91       	pop	r20
    266e:	3f 91       	pop	r19
    2670:	2f 91       	pop	r18
    2672:	0f 90       	pop	r0
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	0f 90       	pop	r0
    2678:	1f 90       	pop	r1
    267a:	18 95       	reti

0000267c <__vector_10>:

/*TIMER0 COMP ISR*/
void __vector_10(void)
{
    267c:	1f 92       	push	r1
    267e:	0f 92       	push	r0
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	0f 92       	push	r0
    2684:	11 24       	eor	r1, r1
    2686:	2f 93       	push	r18
    2688:	3f 93       	push	r19
    268a:	4f 93       	push	r20
    268c:	5f 93       	push	r21
    268e:	6f 93       	push	r22
    2690:	7f 93       	push	r23
    2692:	8f 93       	push	r24
    2694:	9f 93       	push	r25
    2696:	af 93       	push	r26
    2698:	bf 93       	push	r27
    269a:	ef 93       	push	r30
    269c:	ff 93       	push	r31
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_PtrCallBack != NULL_PTR)
    26a6:	80 91 ad 02 	lds	r24, 0x02AD
    26aa:	90 91 ae 02 	lds	r25, 0x02AE
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	29 f0       	breq	.+10     	; 0x26bc <__vector_10+0x40>
			{
	TIMER0_PtrCallBack();
    26b2:	e0 91 ad 02 	lds	r30, 0x02AD
    26b6:	f0 91 ae 02 	lds	r31, 0x02AE
    26ba:	09 95       	icall
			}
	else
			{
			/* Do Nothing */
			}
}
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	ff 91       	pop	r31
    26c2:	ef 91       	pop	r30
    26c4:	bf 91       	pop	r27
    26c6:	af 91       	pop	r26
    26c8:	9f 91       	pop	r25
    26ca:	8f 91       	pop	r24
    26cc:	7f 91       	pop	r23
    26ce:	6f 91       	pop	r22
    26d0:	5f 91       	pop	r21
    26d2:	4f 91       	pop	r20
    26d4:	3f 91       	pop	r19
    26d6:	2f 91       	pop	r18
    26d8:	0f 90       	pop	r0
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	0f 90       	pop	r0
    26de:	1f 90       	pop	r1
    26e0:	18 95       	reti

000026e2 <__vector_11>:

/* TIMER0 OVF ISR */
void __vector_11(void)
{
    26e2:	1f 92       	push	r1
    26e4:	0f 92       	push	r0
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	0f 92       	push	r0
    26ea:	11 24       	eor	r1, r1
    26ec:	2f 93       	push	r18
    26ee:	3f 93       	push	r19
    26f0:	4f 93       	push	r20
    26f2:	5f 93       	push	r21
    26f4:	6f 93       	push	r22
    26f6:	7f 93       	push	r23
    26f8:	8f 93       	push	r24
    26fa:	9f 93       	push	r25
    26fc:	af 93       	push	r26
    26fe:	bf 93       	push	r27
    2700:	ef 93       	push	r30
    2702:	ff 93       	push	r31
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62

		if (TIMER0_PtrCallBack != NULL_PTR)
    270c:	80 91 ad 02 	lds	r24, 0x02AD
    2710:	90 91 ae 02 	lds	r25, 0x02AE
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	29 f0       	breq	.+10     	; 0x2722 <__vector_11+0x40>
		{
			TIMER0_PtrCallBack();
    2718:	e0 91 ad 02 	lds	r30, 0x02AD
    271c:	f0 91 ae 02 	lds	r31, 0x02AE
    2720:	09 95       	icall
		}
		else
		{
			/* Do Nothing */
		}
}
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	ff 91       	pop	r31
    2728:	ef 91       	pop	r30
    272a:	bf 91       	pop	r27
    272c:	af 91       	pop	r26
    272e:	9f 91       	pop	r25
    2730:	8f 91       	pop	r24
    2732:	7f 91       	pop	r23
    2734:	6f 91       	pop	r22
    2736:	5f 91       	pop	r21
    2738:	4f 91       	pop	r20
    273a:	3f 91       	pop	r19
    273c:	2f 91       	pop	r18
    273e:	0f 90       	pop	r0
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	0f 90       	pop	r0
    2744:	1f 90       	pop	r1
    2746:	18 95       	reti

00002748 <GPIO_setupPinDirection>:
 * @param[in]  pin_num      Type GPIO_Pin      Range 0:7
 * @param[in]  direction    Type uint8         Range 0:255
 * @return none
 */
void GPIO_setupPinDirection(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num, uint8 a_direction)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	00 d0       	rcall	.+0      	; 0x274e <GPIO_setupPinDirection+0x6>
    274e:	00 d0       	rcall	.+0      	; 0x2750 <GPIO_setupPinDirection+0x8>
    2750:	0f 92       	push	r0
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	6a 83       	std	Y+2, r22	; 0x02
    275a:	4b 83       	std	Y+3, r20	; 0x03
	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	84 30       	cpi	r24, 0x04	; 4
    2760:	08 f0       	brcs	.+2      	; 0x2764 <GPIO_setupPinDirection+0x1c>
    2762:	e4 c0       	rjmp	.+456    	; 0x292c <GPIO_setupPinDirection+0x1e4>
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	88 30       	cpi	r24, 0x08	; 8
    2768:	08 f0       	brcs	.+2      	; 0x276c <GPIO_setupPinDirection+0x24>
    276a:	e0 c0       	rjmp	.+448    	; 0x292c <GPIO_setupPinDirection+0x1e4>
	{
		/* Wrong Input*/
	}
	else
	{
		  switch(a_port_num)
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	3d 83       	std	Y+5, r19	; 0x05
    2774:	2c 83       	std	Y+4, r18	; 0x04
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	9d 81       	ldd	r25, Y+5	; 0x05
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	91 05       	cpc	r25, r1
    277e:	09 f4       	brne	.+2      	; 0x2782 <GPIO_setupPinDirection+0x3a>
    2780:	47 c0       	rjmp	.+142    	; 0x2810 <GPIO_setupPinDirection+0xc8>
    2782:	2c 81       	ldd	r18, Y+4	; 0x04
    2784:	3d 81       	ldd	r19, Y+5	; 0x05
    2786:	22 30       	cpi	r18, 0x02	; 2
    2788:	31 05       	cpc	r19, r1
    278a:	2c f4       	brge	.+10     	; 0x2796 <GPIO_setupPinDirection+0x4e>
    278c:	8c 81       	ldd	r24, Y+4	; 0x04
    278e:	9d 81       	ldd	r25, Y+5	; 0x05
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	71 f0       	breq	.+28     	; 0x27b0 <GPIO_setupPinDirection+0x68>
    2794:	cb c0       	rjmp	.+406    	; 0x292c <GPIO_setupPinDirection+0x1e4>
    2796:	2c 81       	ldd	r18, Y+4	; 0x04
    2798:	3d 81       	ldd	r19, Y+5	; 0x05
    279a:	22 30       	cpi	r18, 0x02	; 2
    279c:	31 05       	cpc	r19, r1
    279e:	09 f4       	brne	.+2      	; 0x27a2 <GPIO_setupPinDirection+0x5a>
    27a0:	67 c0       	rjmp	.+206    	; 0x2870 <GPIO_setupPinDirection+0x128>
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9d 81       	ldd	r25, Y+5	; 0x05
    27a6:	83 30       	cpi	r24, 0x03	; 3
    27a8:	91 05       	cpc	r25, r1
    27aa:	09 f4       	brne	.+2      	; 0x27ae <GPIO_setupPinDirection+0x66>
    27ac:	91 c0       	rjmp	.+290    	; 0x28d0 <GPIO_setupPinDirection+0x188>
    27ae:	be c0       	rjmp	.+380    	; 0x292c <GPIO_setupPinDirection+0x1e4>
	  {
		case PORTA_ID:
			if(a_direction==PIN_OUTPUT)
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	a1 f4       	brne	.+40     	; 0x27de <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
    27b6:	aa e3       	ldi	r26, 0x3A	; 58
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	ea e3       	ldi	r30, 0x3A	; 58
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	48 2f       	mov	r20, r24
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	02 2e       	mov	r0, r18
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <GPIO_setupPinDirection+0x8c>
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	0a 94       	dec	r0
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <GPIO_setupPinDirection+0x88>
    27d8:	84 2b       	or	r24, r20
    27da:	8c 93       	st	X, r24
    27dc:	a7 c0       	rjmp	.+334    	; 0x292c <GPIO_setupPinDirection+0x1e4>
			}
			else if(a_direction==PIN_INPUT)
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	88 23       	and	r24, r24
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <GPIO_setupPinDirection+0x9e>
    27e4:	a3 c0       	rjmp	.+326    	; 0x292c <GPIO_setupPinDirection+0x1e4>
			{
				CLR_BIT(DDRA,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
    27e6:	aa e3       	ldi	r26, 0x3A	; 58
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ea e3       	ldi	r30, 0x3A	; 58
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	48 2f       	mov	r20, r24
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	02 2e       	mov	r0, r18
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <GPIO_setupPinDirection+0xbc>
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	0a 94       	dec	r0
    2806:	e2 f7       	brpl	.-8      	; 0x2800 <GPIO_setupPinDirection+0xb8>
    2808:	80 95       	com	r24
    280a:	84 23       	and	r24, r20
    280c:	8c 93       	st	X, r24
    280e:	8e c0       	rjmp	.+284    	; 0x292c <GPIO_setupPinDirection+0x1e4>
			{
				/*Wrong a_direction Error*/
			}
			break;
		case PORTB_ID:
			if(a_direction==PIN_OUTPUT)
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	a1 f4       	brne	.+40     	; 0x283e <GPIO_setupPinDirection+0xf6>
				{
					SET_BIT(DDRB,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
    2816:	a7 e3       	ldi	r26, 0x37	; 55
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e7 e3       	ldi	r30, 0x37	; 55
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	48 2f       	mov	r20, r24
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	28 2f       	mov	r18, r24
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	02 2e       	mov	r0, r18
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <GPIO_setupPinDirection+0xec>
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	0a 94       	dec	r0
    2836:	e2 f7       	brpl	.-8      	; 0x2830 <GPIO_setupPinDirection+0xe8>
    2838:	84 2b       	or	r24, r20
    283a:	8c 93       	st	X, r24
    283c:	77 c0       	rjmp	.+238    	; 0x292c <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	88 23       	and	r24, r24
    2842:	09 f0       	breq	.+2      	; 0x2846 <GPIO_setupPinDirection+0xfe>
    2844:	73 c0       	rjmp	.+230    	; 0x292c <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRB,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
    2846:	a7 e3       	ldi	r26, 0x37	; 55
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e7 e3       	ldi	r30, 0x37	; 55
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	48 2f       	mov	r20, r24
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	02 2e       	mov	r0, r18
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <GPIO_setupPinDirection+0x11c>
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	0a 94       	dec	r0
    2866:	e2 f7       	brpl	.-8      	; 0x2860 <GPIO_setupPinDirection+0x118>
    2868:	80 95       	com	r24
    286a:	84 23       	and	r24, r20
    286c:	8c 93       	st	X, r24
    286e:	5e c0       	rjmp	.+188    	; 0x292c <GPIO_setupPinDirection+0x1e4>
				{
					/*Wrong a_direction Error*/
				}
				break;
		case PORTC_ID:
			if(a_direction==PIN_OUTPUT)
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	a1 f4       	brne	.+40     	; 0x289e <GPIO_setupPinDirection+0x156>
				{
					SET_BIT(DDRC,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
    2876:	a4 e3       	ldi	r26, 0x34	; 52
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e4 e3       	ldi	r30, 0x34	; 52
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	48 2f       	mov	r20, r24
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	02 2e       	mov	r0, r18
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <GPIO_setupPinDirection+0x14c>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	0a 94       	dec	r0
    2896:	e2 f7       	brpl	.-8      	; 0x2890 <GPIO_setupPinDirection+0x148>
    2898:	84 2b       	or	r24, r20
    289a:	8c 93       	st	X, r24
    289c:	47 c0       	rjmp	.+142    	; 0x292c <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	88 23       	and	r24, r24
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <GPIO_setupPinDirection+0x15e>
    28a4:	43 c0       	rjmp	.+134    	; 0x292c <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRC,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
    28a6:	a4 e3       	ldi	r26, 0x34	; 52
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e4 e3       	ldi	r30, 0x34	; 52
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	48 2f       	mov	r20, r24
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 2e       	mov	r0, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <GPIO_setupPinDirection+0x17c>
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	0a 94       	dec	r0
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <GPIO_setupPinDirection+0x178>
    28c8:	80 95       	com	r24
    28ca:	84 23       	and	r24, r20
    28cc:	8c 93       	st	X, r24
    28ce:	2e c0       	rjmp	.+92     	; 0x292c <GPIO_setupPinDirection+0x1e4>
				{
					/*Wrong a_direction Error*/
				}
				break;
		case PORTD_ID:
			if(a_direction==PIN_OUTPUT)
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	a1 f4       	brne	.+40     	; 0x28fe <GPIO_setupPinDirection+0x1b6>
				{
					SET_BIT(DDRD,a_pin_num);/* Setting the Required pin on DDR Register to be output*/
    28d6:	a1 e3       	ldi	r26, 0x31	; 49
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e1 e3       	ldi	r30, 0x31	; 49
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	48 2f       	mov	r20, r24
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	02 2e       	mov	r0, r18
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <GPIO_setupPinDirection+0x1ac>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	0a 94       	dec	r0
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <GPIO_setupPinDirection+0x1a8>
    28f8:	84 2b       	or	r24, r20
    28fa:	8c 93       	st	X, r24
    28fc:	17 c0       	rjmp	.+46     	; 0x292c <GPIO_setupPinDirection+0x1e4>
				}
				else if(a_direction==PIN_INPUT)
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	88 23       	and	r24, r24
    2902:	a1 f4       	brne	.+40     	; 0x292c <GPIO_setupPinDirection+0x1e4>
				{
					CLR_BIT(DDRD,a_pin_num);/* Clearing the Required pin on DDR Register to be input*/
    2904:	a1 e3       	ldi	r26, 0x31	; 49
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e1 e3       	ldi	r30, 0x31	; 49
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	48 2f       	mov	r20, r24
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	02 2e       	mov	r0, r18
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <GPIO_setupPinDirection+0x1da>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <GPIO_setupPinDirection+0x1d6>
    2926:	80 95       	com	r24
    2928:	84 23       	and	r24, r20
    292a:	8c 93       	st	X, r24
		default:
			/*Wrong Port Error*/
		break;
	  }
	  }
	}
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <GPIO_writePin>:
 * @param[in]  pin_num      Type GPIO_Pin      Range 0:7
 * @param[in]  direction    Type uint8         Range 0:255
 * @return none
 */
void GPIO_writePin(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num, uint8 a_level)
{
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	00 d0       	rcall	.+0      	; 0x2942 <GPIO_writePin+0x6>
    2942:	00 d0       	rcall	.+0      	; 0x2944 <GPIO_writePin+0x8>
    2944:	0f 92       	push	r0
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	89 83       	std	Y+1, r24	; 0x01
    294c:	6a 83       	std	Y+2, r22	; 0x02
    294e:	4b 83       	std	Y+3, r20	; 0x03
	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	84 30       	cpi	r24, 0x04	; 4
    2954:	08 f0       	brcs	.+2      	; 0x2958 <GPIO_writePin+0x1c>
    2956:	d5 c0       	rjmp	.+426    	; 0x2b02 <GPIO_writePin+0x1c6>
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	88 30       	cpi	r24, 0x08	; 8
    295c:	08 f0       	brcs	.+2      	; 0x2960 <GPIO_writePin+0x24>
    295e:	d1 c0       	rjmp	.+418    	; 0x2b02 <GPIO_writePin+0x1c6>
	{
		/* Wrong Input*/
	}
	else
	{
		  switch(a_port_num)
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	3d 83       	std	Y+5, r19	; 0x05
    2968:	2c 83       	std	Y+4, r18	; 0x04
    296a:	8c 81       	ldd	r24, Y+4	; 0x04
    296c:	9d 81       	ldd	r25, Y+5	; 0x05
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	91 05       	cpc	r25, r1
    2972:	09 f4       	brne	.+2      	; 0x2976 <GPIO_writePin+0x3a>
    2974:	43 c0       	rjmp	.+134    	; 0x29fc <GPIO_writePin+0xc0>
    2976:	2c 81       	ldd	r18, Y+4	; 0x04
    2978:	3d 81       	ldd	r19, Y+5	; 0x05
    297a:	22 30       	cpi	r18, 0x02	; 2
    297c:	31 05       	cpc	r19, r1
    297e:	2c f4       	brge	.+10     	; 0x298a <GPIO_writePin+0x4e>
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	9d 81       	ldd	r25, Y+5	; 0x05
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	71 f0       	breq	.+28     	; 0x29a4 <GPIO_writePin+0x68>
    2988:	bc c0       	rjmp	.+376    	; 0x2b02 <GPIO_writePin+0x1c6>
    298a:	2c 81       	ldd	r18, Y+4	; 0x04
    298c:	3d 81       	ldd	r19, Y+5	; 0x05
    298e:	22 30       	cpi	r18, 0x02	; 2
    2990:	31 05       	cpc	r19, r1
    2992:	09 f4       	brne	.+2      	; 0x2996 <GPIO_writePin+0x5a>
    2994:	5f c0       	rjmp	.+190    	; 0x2a54 <GPIO_writePin+0x118>
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	9d 81       	ldd	r25, Y+5	; 0x05
    299a:	83 30       	cpi	r24, 0x03	; 3
    299c:	91 05       	cpc	r25, r1
    299e:	09 f4       	brne	.+2      	; 0x29a2 <GPIO_writePin+0x66>
    29a0:	85 c0       	rjmp	.+266    	; 0x2aac <GPIO_writePin+0x170>
    29a2:	af c0       	rjmp	.+350    	; 0x2b02 <GPIO_writePin+0x1c6>
	  {
		case PORTA_ID:
			if(a_level == LOGIC_HIGH)
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	81 30       	cpi	r24, 0x01	; 1
    29a8:	a1 f4       	brne	.+40     	; 0x29d2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    29aa:	ab e3       	ldi	r26, 0x3B	; 59
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	eb e3       	ldi	r30, 0x3B	; 59
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	48 2f       	mov	r20, r24
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	02 2e       	mov	r0, r18
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <GPIO_writePin+0x8c>
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	0a 94       	dec	r0
    29ca:	e2 f7       	brpl	.-8      	; 0x29c4 <GPIO_writePin+0x88>
    29cc:	84 2b       	or	r24, r20
    29ce:	8c 93       	st	X, r24
    29d0:	98 c0       	rjmp	.+304    	; 0x2b02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    29d2:	ab e3       	ldi	r26, 0x3B	; 59
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	eb e3       	ldi	r30, 0x3B	; 59
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	48 2f       	mov	r20, r24
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	02 2e       	mov	r0, r18
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <GPIO_writePin+0xb4>
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	0a 94       	dec	r0
    29f2:	e2 f7       	brpl	.-8      	; 0x29ec <GPIO_writePin+0xb0>
    29f4:	80 95       	com	r24
    29f6:	84 23       	and	r24, r20
    29f8:	8c 93       	st	X, r24
    29fa:	83 c0       	rjmp	.+262    	; 0x2b02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(a_level == LOGIC_HIGH)
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	a1 f4       	brne	.+40     	; 0x2a2a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    2a02:	a8 e3       	ldi	r26, 0x38	; 56
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e8 e3       	ldi	r30, 0x38	; 56
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	48 2f       	mov	r20, r24
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	02 2e       	mov	r0, r18
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <GPIO_writePin+0xe4>
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	0a 94       	dec	r0
    2a22:	e2 f7       	brpl	.-8      	; 0x2a1c <GPIO_writePin+0xe0>
    2a24:	84 2b       	or	r24, r20
    2a26:	8c 93       	st	X, r24
    2a28:	6c c0       	rjmp	.+216    	; 0x2b02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    2a2a:	a8 e3       	ldi	r26, 0x38	; 56
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e8 e3       	ldi	r30, 0x38	; 56
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	48 2f       	mov	r20, r24
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	02 2e       	mov	r0, r18
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <GPIO_writePin+0x10c>
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	0a 94       	dec	r0
    2a4a:	e2 f7       	brpl	.-8      	; 0x2a44 <GPIO_writePin+0x108>
    2a4c:	80 95       	com	r24
    2a4e:	84 23       	and	r24, r20
    2a50:	8c 93       	st	X, r24
    2a52:	57 c0       	rjmp	.+174    	; 0x2b02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(a_level == LOGIC_HIGH)
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	a1 f4       	brne	.+40     	; 0x2a82 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    2a5a:	a5 e3       	ldi	r26, 0x35	; 53
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e5 e3       	ldi	r30, 0x35	; 53
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	48 2f       	mov	r20, r24
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	02 2e       	mov	r0, r18
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <GPIO_writePin+0x13c>
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	0a 94       	dec	r0
    2a7a:	e2 f7       	brpl	.-8      	; 0x2a74 <GPIO_writePin+0x138>
    2a7c:	84 2b       	or	r24, r20
    2a7e:	8c 93       	st	X, r24
    2a80:	40 c0       	rjmp	.+128    	; 0x2b02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    2a82:	a5 e3       	ldi	r26, 0x35	; 53
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e5 e3       	ldi	r30, 0x35	; 53
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	48 2f       	mov	r20, r24
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	02 2e       	mov	r0, r18
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <GPIO_writePin+0x164>
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	0a 94       	dec	r0
    2aa2:	e2 f7       	brpl	.-8      	; 0x2a9c <GPIO_writePin+0x160>
    2aa4:	80 95       	com	r24
    2aa6:	84 23       	and	r24, r20
    2aa8:	8c 93       	st	X, r24
    2aaa:	2b c0       	rjmp	.+86     	; 0x2b02 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(a_level == LOGIC_HIGH)
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	a1 f4       	brne	.+40     	; 0x2ada <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,a_pin_num);/* Setting the Required pin on Port Register to Output a High logic 1 */
    2ab2:	a2 e3       	ldi	r26, 0x32	; 50
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e2 e3       	ldi	r30, 0x32	; 50
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	48 2f       	mov	r20, r24
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	02 2e       	mov	r0, r18
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <GPIO_writePin+0x194>
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	0a 94       	dec	r0
    2ad2:	e2 f7       	brpl	.-8      	; 0x2acc <GPIO_writePin+0x190>
    2ad4:	84 2b       	or	r24, r20
    2ad6:	8c 93       	st	X, r24
    2ad8:	14 c0       	rjmp	.+40     	; 0x2b02 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,a_pin_num);/* clearing the Required pin on Port Register to Output a low logic 0 */
    2ada:	a2 e3       	ldi	r26, 0x32	; 50
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e2 e3       	ldi	r30, 0x32	; 50
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	48 2f       	mov	r20, r24
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	02 2e       	mov	r0, r18
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <GPIO_writePin+0x1bc>
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	0a 94       	dec	r0
    2afa:	e2 f7       	brpl	.-8      	; 0x2af4 <GPIO_writePin+0x1b8>
    2afc:	80 95       	com	r24
    2afe:	84 23       	and	r24, r20
    2b00:	8c 93       	st	X, r24
		default:
			/*Wrong Port Error*/
		    break;
	  }
}
}
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <GPIO_readPin>:
 * @param[in]  port_num     Type GPIO_Port     Range 0:3
 * @param[in]  pin_num      Type GPIO_Pin      Range 0:7
 * @return none
 */
uint8 GPIO_readPin(const GPIO_Port a_port_num, const GPIO_Pin a_pin_num)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <GPIO_readPin+0x6>
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <GPIO_readPin+0x8>
    2b1a:	0f 92       	push	r0
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	6a 83       	std	Y+2, r22	; 0x02
	/* Check if the provided port number or pin number is out of range */
	if(a_port_num >= NUM_OF_PORTS || a_pin_num >= NUM_OF_PINS_PER_PORT)
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	84 30       	cpi	r24, 0x04	; 4
    2b28:	08 f0       	brcs	.+2      	; 0x2b2c <GPIO_readPin+0x1a>
    2b2a:	70 c0       	rjmp	.+224    	; 0x2c0c <GPIO_readPin+0xfa>
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	88 30       	cpi	r24, 0x08	; 8
    2b30:	08 f0       	brcs	.+2      	; 0x2b34 <GPIO_readPin+0x22>
    2b32:	6c c0       	rjmp	.+216    	; 0x2c0c <GPIO_readPin+0xfa>
		/* Wrong Input: Port number or pin number out of range */
	}
	else
	{
		/* Select the appropriate GPIO port based on a_port_num and read the state of the specified pin */
		switch(a_port_num)
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	3d 83       	std	Y+5, r19	; 0x05
    2b3c:	2c 83       	std	Y+4, r18	; 0x04
    2b3e:	4c 81       	ldd	r20, Y+4	; 0x04
    2b40:	5d 81       	ldd	r21, Y+5	; 0x05
    2b42:	41 30       	cpi	r20, 0x01	; 1
    2b44:	51 05       	cpc	r21, r1
    2b46:	49 f1       	breq	.+82     	; 0x2b9a <GPIO_readPin+0x88>
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4c:	82 30       	cpi	r24, 0x02	; 2
    2b4e:	91 05       	cpc	r25, r1
    2b50:	34 f4       	brge	.+12     	; 0x2b5e <GPIO_readPin+0x4c>
    2b52:	2c 81       	ldd	r18, Y+4	; 0x04
    2b54:	3d 81       	ldd	r19, Y+5	; 0x05
    2b56:	21 15       	cp	r18, r1
    2b58:	31 05       	cpc	r19, r1
    2b5a:	61 f0       	breq	.+24     	; 0x2b74 <GPIO_readPin+0x62>
    2b5c:	57 c0       	rjmp	.+174    	; 0x2c0c <GPIO_readPin+0xfa>
    2b5e:	4c 81       	ldd	r20, Y+4	; 0x04
    2b60:	5d 81       	ldd	r21, Y+5	; 0x05
    2b62:	42 30       	cpi	r20, 0x02	; 2
    2b64:	51 05       	cpc	r21, r1
    2b66:	61 f1       	breq	.+88     	; 0x2bc0 <GPIO_readPin+0xae>
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6c:	83 30       	cpi	r24, 0x03	; 3
    2b6e:	91 05       	cpc	r25, r1
    2b70:	d1 f1       	breq	.+116    	; 0x2be6 <GPIO_readPin+0xd4>
    2b72:	4c c0       	rjmp	.+152    	; 0x2c0c <GPIO_readPin+0xfa>
		{
			case PORTA_ID:
				return GET_BIT(PINA,a_pin_num);
    2b74:	e9 e3       	ldi	r30, 0x39	; 57
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a9 01       	movw	r20, r18
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <GPIO_readPin+0x7a>
    2b88:	55 95       	asr	r21
    2b8a:	47 95       	ror	r20
    2b8c:	8a 95       	dec	r24
    2b8e:	e2 f7       	brpl	.-8      	; 0x2b88 <GPIO_readPin+0x76>
    2b90:	ca 01       	movw	r24, r20
    2b92:	58 2f       	mov	r21, r24
    2b94:	51 70       	andi	r21, 0x01	; 1
    2b96:	5b 83       	std	Y+3, r21	; 0x03
    2b98:	3a c0       	rjmp	.+116    	; 0x2c0e <GPIO_readPin+0xfc>
			case PORTB_ID:
				return GET_BIT(PINB,a_pin_num);
    2b9a:	e6 e3       	ldi	r30, 0x36	; 54
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	a9 01       	movw	r20, r18
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <GPIO_readPin+0xa0>
    2bae:	55 95       	asr	r21
    2bb0:	47 95       	ror	r20
    2bb2:	8a 95       	dec	r24
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <GPIO_readPin+0x9c>
    2bb6:	ca 01       	movw	r24, r20
    2bb8:	58 2f       	mov	r21, r24
    2bba:	51 70       	andi	r21, 0x01	; 1
    2bbc:	5b 83       	std	Y+3, r21	; 0x03
    2bbe:	27 c0       	rjmp	.+78     	; 0x2c0e <GPIO_readPin+0xfc>
			case PORTC_ID:
				return GET_BIT(PINC,a_pin_num);
    2bc0:	e3 e3       	ldi	r30, 0x33	; 51
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	a9 01       	movw	r20, r18
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <GPIO_readPin+0xc6>
    2bd4:	55 95       	asr	r21
    2bd6:	47 95       	ror	r20
    2bd8:	8a 95       	dec	r24
    2bda:	e2 f7       	brpl	.-8      	; 0x2bd4 <GPIO_readPin+0xc2>
    2bdc:	ca 01       	movw	r24, r20
    2bde:	58 2f       	mov	r21, r24
    2be0:	51 70       	andi	r21, 0x01	; 1
    2be2:	5b 83       	std	Y+3, r21	; 0x03
    2be4:	14 c0       	rjmp	.+40     	; 0x2c0e <GPIO_readPin+0xfc>
			case PORTD_ID:
				return GET_BIT(PIND,a_pin_num);
    2be6:	e0 e3       	ldi	r30, 0x30	; 48
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	88 2f       	mov	r24, r24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a9 01       	movw	r20, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <GPIO_readPin+0xec>
    2bfa:	55 95       	asr	r21
    2bfc:	47 95       	ror	r20
    2bfe:	8a 95       	dec	r24
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <GPIO_readPin+0xe8>
    2c02:	ca 01       	movw	r24, r20
    2c04:	58 2f       	mov	r21, r24
    2c06:	51 70       	andi	r21, 0x01	; 1
    2c08:	5b 83       	std	Y+3, r21	; 0x03
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <GPIO_readPin+0xfc>
				/* Wrong Port Error: Invalid GPIO port */
				break;
		}
	}
	/* Default return if any error occurred */
	return 0;
    2c0c:	1b 82       	std	Y+3, r1	; 0x03
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <GPIO_setupPortDirection>:
 * @param[in]  port_num     Type GPIO_Port     Range 0:3
 * @param[in]  direction    Type uint8         Range 0:255
 * @return none
 */
void GPIO_setupPortDirection(GPIO_Port a_port_num, uint8 a_direction)
{
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	00 d0       	rcall	.+0      	; 0x2c26 <GPIO_setupPortDirection+0x6>
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <GPIO_setupPortDirection+0x8>
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	6a 83       	std	Y+2, r22	; 0x02
	if(a_port_num >= NUM_OF_PORTS)
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	84 30       	cpi	r24, 0x04	; 4
    2c34:	90 f5       	brcc	.+100    	; 0x2c9a <GPIO_setupPortDirection+0x7a>
		/* Wrong Input: Port number out of range */
	}
	else
	{
		/* Set the direction of all pins in the specified GPIO port */
		switch(a_port_num)
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	3c 83       	std	Y+4, r19	; 0x04
    2c3e:	2b 83       	std	Y+3, r18	; 0x03
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	9c 81       	ldd	r25, Y+4	; 0x04
    2c44:	81 30       	cpi	r24, 0x01	; 1
    2c46:	91 05       	cpc	r25, r1
    2c48:	d1 f0       	breq	.+52     	; 0x2c7e <GPIO_setupPortDirection+0x5e>
    2c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c4e:	22 30       	cpi	r18, 0x02	; 2
    2c50:	31 05       	cpc	r19, r1
    2c52:	2c f4       	brge	.+10     	; 0x2c5e <GPIO_setupPortDirection+0x3e>
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	9c 81       	ldd	r25, Y+4	; 0x04
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	61 f0       	breq	.+24     	; 0x2c74 <GPIO_setupPortDirection+0x54>
    2c5c:	1e c0       	rjmp	.+60     	; 0x2c9a <GPIO_setupPortDirection+0x7a>
    2c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c60:	3c 81       	ldd	r19, Y+4	; 0x04
    2c62:	22 30       	cpi	r18, 0x02	; 2
    2c64:	31 05       	cpc	r19, r1
    2c66:	81 f0       	breq	.+32     	; 0x2c88 <GPIO_setupPortDirection+0x68>
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6c:	83 30       	cpi	r24, 0x03	; 3
    2c6e:	91 05       	cpc	r25, r1
    2c70:	81 f0       	breq	.+32     	; 0x2c92 <GPIO_setupPortDirection+0x72>
    2c72:	13 c0       	rjmp	.+38     	; 0x2c9a <GPIO_setupPortDirection+0x7a>
		{
			case PORTA_ID:
				DDRA = a_direction;
    2c74:	ea e3       	ldi	r30, 0x3A	; 58
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	80 83       	st	Z, r24
    2c7c:	0e c0       	rjmp	.+28     	; 0x2c9a <GPIO_setupPortDirection+0x7a>
				break;
			case PORTB_ID:
				DDRB = a_direction;
    2c7e:	e7 e3       	ldi	r30, 0x37	; 55
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	80 83       	st	Z, r24
    2c86:	09 c0       	rjmp	.+18     	; 0x2c9a <GPIO_setupPortDirection+0x7a>
				break;
			case PORTC_ID:
				DDRC = a_direction;
    2c88:	e4 e3       	ldi	r30, 0x34	; 52
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	80 83       	st	Z, r24
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <GPIO_setupPortDirection+0x7a>
				break;
			case PORTD_ID:
				DDRD = a_direction;
    2c92:	e1 e3       	ldi	r30, 0x31	; 49
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	80 83       	st	Z, r24
			default:
				/* Wrong Port Error: Invalid GPIO port */
				break;
		}
	}
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <GPIO_writePort>:
 * @param[in]  port_num     Type GPIO_Port     Range 0:3
 * @param[in]  Level        Type uint8         Range 0:255
 * @return none
 */
void GPIO_writePort(GPIO_Port a_port_num, uint8 a_level)
{
    2ca8:	df 93       	push	r29
    2caa:	cf 93       	push	r28
    2cac:	00 d0       	rcall	.+0      	; 0x2cae <GPIO_writePort+0x6>
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <GPIO_writePort+0x8>
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	6a 83       	std	Y+2, r22	; 0x02
	if(a_port_num >= NUM_OF_PORTS)
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	84 30       	cpi	r24, 0x04	; 4
    2cbc:	90 f5       	brcc	.+100    	; 0x2d22 <GPIO_writePort+0x7a>
		/* Wrong Input: Port number out of range */
	}
	else
	{
		/* Write the specified logic level to all pins in the specified GPIO port */
		switch(a_port_num)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	3c 83       	std	Y+4, r19	; 0x04
    2cc6:	2b 83       	std	Y+3, r18	; 0x03
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	81 30       	cpi	r24, 0x01	; 1
    2cce:	91 05       	cpc	r25, r1
    2cd0:	d1 f0       	breq	.+52     	; 0x2d06 <GPIO_writePort+0x5e>
    2cd2:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd4:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd6:	22 30       	cpi	r18, 0x02	; 2
    2cd8:	31 05       	cpc	r19, r1
    2cda:	2c f4       	brge	.+10     	; 0x2ce6 <GPIO_writePort+0x3e>
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	61 f0       	breq	.+24     	; 0x2cfc <GPIO_writePort+0x54>
    2ce4:	1e c0       	rjmp	.+60     	; 0x2d22 <GPIO_writePort+0x7a>
    2ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    2cea:	22 30       	cpi	r18, 0x02	; 2
    2cec:	31 05       	cpc	r19, r1
    2cee:	81 f0       	breq	.+32     	; 0x2d10 <GPIO_writePort+0x68>
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf4:	83 30       	cpi	r24, 0x03	; 3
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	81 f0       	breq	.+32     	; 0x2d1a <GPIO_writePort+0x72>
    2cfa:	13 c0       	rjmp	.+38     	; 0x2d22 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = a_level; /* Write the specified logic level to all pins in PORTA */
    2cfc:	eb e3       	ldi	r30, 0x3B	; 59
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	80 83       	st	Z, r24
    2d04:	0e c0       	rjmp	.+28     	; 0x2d22 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB = a_level; /* Write the specified logic level to all pins in PORTB */
    2d06:	e8 e3       	ldi	r30, 0x38	; 56
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	80 83       	st	Z, r24
    2d0e:	09 c0       	rjmp	.+18     	; 0x2d22 <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC = a_level; /* Write the specified logic level to all pins in PORTC */
    2d10:	e5 e3       	ldi	r30, 0x35	; 53
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	80 83       	st	Z, r24
    2d18:	04 c0       	rjmp	.+8      	; 0x2d22 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD = a_level; /* Write the specified logic level to all pins in PORTD */
    2d1a:	e2 e3       	ldi	r30, 0x32	; 50
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	80 83       	st	Z, r24
			default:
				/* Wrong Port Error: Invalid GPIO port */
				break;
		}
	}
}
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	08 95       	ret

00002d30 <GPIO_readPort>:
 *
 * @param[in]  port_num     Type GPIO_Port     Range 0:3
 * @return none
 */
uint8 GPIO_readPort(GPIO_Port a_port_num)
{
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	00 d0       	rcall	.+0      	; 0x2d36 <GPIO_readPort+0x6>
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <GPIO_readPort+0x8>
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	89 83       	std	Y+1, r24	; 0x01
	if(a_port_num >= NUM_OF_PORTS)
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	84 30       	cpi	r24, 0x04	; 4
    2d42:	98 f5       	brcc	.+102    	; 0x2daa <GPIO_readPort+0x7a>
		/* Wrong Input: Port number out of range */
	}
	else
	{
		/* Read the state of all pins in the specified GPIO port */
		switch(a_port_num)
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	3c 83       	std	Y+4, r19	; 0x04
    2d4c:	2b 83       	std	Y+3, r18	; 0x03
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	81 30       	cpi	r24, 0x01	; 1
    2d54:	91 05       	cpc	r25, r1
    2d56:	d1 f0       	breq	.+52     	; 0x2d8c <GPIO_readPort+0x5c>
    2d58:	2b 81       	ldd	r18, Y+3	; 0x03
    2d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d5c:	22 30       	cpi	r18, 0x02	; 2
    2d5e:	31 05       	cpc	r19, r1
    2d60:	2c f4       	brge	.+10     	; 0x2d6c <GPIO_readPort+0x3c>
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	9c 81       	ldd	r25, Y+4	; 0x04
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	61 f0       	breq	.+24     	; 0x2d82 <GPIO_readPort+0x52>
    2d6a:	1f c0       	rjmp	.+62     	; 0x2daa <GPIO_readPort+0x7a>
    2d6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d70:	22 30       	cpi	r18, 0x02	; 2
    2d72:	31 05       	cpc	r19, r1
    2d74:	81 f0       	breq	.+32     	; 0x2d96 <GPIO_readPort+0x66>
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	83 30       	cpi	r24, 0x03	; 3
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	81 f0       	breq	.+32     	; 0x2da0 <GPIO_readPort+0x70>
    2d80:	14 c0       	rjmp	.+40     	; 0x2daa <GPIO_readPort+0x7a>
		{
			case PORTA_ID:
				return PINA;
    2d82:	e9 e3       	ldi	r30, 0x39	; 57
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	90 81       	ld	r25, Z
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	10 c0       	rjmp	.+32     	; 0x2dac <GPIO_readPort+0x7c>
			case PORTB_ID:
				return PINB;
    2d8c:	e6 e3       	ldi	r30, 0x36	; 54
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	20 81       	ld	r18, Z
    2d92:	2a 83       	std	Y+2, r18	; 0x02
    2d94:	0b c0       	rjmp	.+22     	; 0x2dac <GPIO_readPort+0x7c>
			case PORTC_ID:
				return PINC;
    2d96:	e3 e3       	ldi	r30, 0x33	; 51
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	30 81       	ld	r19, Z
    2d9c:	3a 83       	std	Y+2, r19	; 0x02
    2d9e:	06 c0       	rjmp	.+12     	; 0x2dac <GPIO_readPort+0x7c>
			case PORTD_ID:
				return PIND;
    2da0:	e0 e3       	ldi	r30, 0x30	; 48
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	8a 83       	std	Y+2, r24	; 0x02
    2da8:	01 c0       	rjmp	.+2      	; 0x2dac <GPIO_readPort+0x7c>
				/* Wrong Port Error: Invalid GPIO port */
				break;
		}
	}
	/* Default return if any error occurred */
	return 0;
    2daa:	1a 82       	std	Y+2, r1	; 0x02
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <LCD_init>:
 * @param[out] none
 * @return none
 */

void LCD_init(void)
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	2e 97       	sbiw	r28, 0x0e	; 14
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
/* Set The RS Pin As Output */
GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2dd0:	83 e0       	ldi	r24, 0x03	; 3
    2dd2:	62 e0       	ldi	r22, 0x02	; 2
    2dd4:	41 e0       	ldi	r20, 0x01	; 1
    2dd6:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>

/* Set The E Pin As Output */
GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2dda:	83 e0       	ldi	r24, 0x03	; 3
    2ddc:	63 e0       	ldi	r22, 0x03	; 3
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	a0 ea       	ldi	r26, 0xA0	; 160
    2dea:	b1 e4       	ldi	r27, 0x41	; 65
    2dec:	8b 87       	std	Y+11, r24	; 0x0b
    2dee:	9c 87       	std	Y+12, r25	; 0x0c
    2df0:	ad 87       	std	Y+13, r26	; 0x0d
    2df2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	4a ef       	ldi	r20, 0xFA	; 250
    2e02:	54 e4       	ldi	r21, 0x44	; 68
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	8f 83       	std	Y+7, r24	; 0x07
    2e0e:	98 87       	std	Y+8, r25	; 0x08
    2e10:	a9 87       	std	Y+9, r26	; 0x09
    2e12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e14:	6f 81       	ldd	r22, Y+7	; 0x07
    2e16:	78 85       	ldd	r23, Y+8	; 0x08
    2e18:	89 85       	ldd	r24, Y+9	; 0x09
    2e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e8       	ldi	r20, 0x80	; 128
    2e22:	5f e3       	ldi	r21, 0x3F	; 63
    2e24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e28:	88 23       	and	r24, r24
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <LCD_init+0x7a>
		__ticks = 1;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
    2e34:	3f c0       	rjmp	.+126    	; 0x2eb4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2e36:	6f 81       	ldd	r22, Y+7	; 0x07
    2e38:	78 85       	ldd	r23, Y+8	; 0x08
    2e3a:	89 85       	ldd	r24, Y+9	; 0x09
    2e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	3f ef       	ldi	r19, 0xFF	; 255
    2e42:	4f e7       	ldi	r20, 0x7F	; 127
    2e44:	57 e4       	ldi	r21, 0x47	; 71
    2e46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e4a:	18 16       	cp	r1, r24
    2e4c:	4c f5       	brge	.+82     	; 0x2ea0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e2       	ldi	r20, 0x20	; 32
    2e5c:	51 e4       	ldi	r21, 0x41	; 65
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	bc 01       	movw	r22, r24
    2e68:	cd 01       	movw	r24, r26
    2e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	9e 83       	std	Y+6, r25	; 0x06
    2e74:	8d 83       	std	Y+5, r24	; 0x05
    2e76:	0f c0       	rjmp	.+30     	; 0x2e96 <LCD_init+0xda>
    2e78:	88 ec       	ldi	r24, 0xC8	; 200
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	9c 83       	std	Y+4, r25	; 0x04
    2e7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <LCD_init+0xc8>
    2e88:	9c 83       	std	Y+4, r25	; 0x04
    2e8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	9e 83       	std	Y+6, r25	; 0x06
    2e94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	69 f7       	brne	.-38     	; 0x2e78 <LCD_init+0xbc>
    2e9e:	14 c0       	rjmp	.+40     	; 0x2ec8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea2:	78 85       	ldd	r23, Y+8	; 0x08
    2ea4:	89 85       	ldd	r24, Y+9	; 0x09
    2ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	9a 83       	std	Y+2, r25	; 0x02
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <LCD_init+0x104>
    2ec4:	9a 83       	std	Y+2, r25	; 0x02
    2ec6:	89 83       	std	Y+1, r24	; 0x01
LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);


#elif (LCD_DATA_MODE==LCD_FOUR_BIT_DATA_MODE)
/* initialize the lCD 4 bit Mode Pins */
GPIO_setupPinDirection(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN1, PIN_OUTPUT);
    2ec8:	83 e0       	ldi	r24, 0x03	; 3
    2eca:	64 e0       	ldi	r22, 0x04	; 4
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
GPIO_setupPinDirection(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN2, PIN_OUTPUT);
    2ed2:	83 e0       	ldi	r24, 0x03	; 3
    2ed4:	65 e0       	ldi	r22, 0x05	; 5
    2ed6:	41 e0       	ldi	r20, 0x01	; 1
    2ed8:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
GPIO_setupPinDirection(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN3, PIN_OUTPUT);
    2edc:	83 e0       	ldi	r24, 0x03	; 3
    2ede:	66 e0       	ldi	r22, 0x06	; 6
    2ee0:	41 e0       	ldi	r20, 0x01	; 1
    2ee2:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
GPIO_setupPinDirection(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN4, PIN_OUTPUT);
    2ee6:	83 e0       	ldi	r24, 0x03	; 3
    2ee8:	67 e0       	ldi	r22, 0x07	; 7
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>

/* initialize the lCD by 4 bit data Mode */
LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2ef0:	83 e3       	ldi	r24, 0x33	; 51
    2ef2:	0e 94 90 17 	call	0x2f20	; 0x2f20 <LCD_sendCommand>
LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2ef6:	82 e3       	ldi	r24, 0x32	; 50
    2ef8:	0e 94 90 17 	call	0x2f20	; 0x2f20 <LCD_sendCommand>

/* Use 2-lines LCD and 4 Bit Mode */
LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2efc:	88 e2       	ldi	r24, 0x28	; 40
    2efe:	0e 94 90 17 	call	0x2f20	; 0x2f20 <LCD_sendCommand>
#endif

/* Set cursor and clear the screen */
LCD_sendCommand(LCD_CURSOR_OFF);
    2f02:	8c e0       	ldi	r24, 0x0C	; 12
    2f04:	0e 94 90 17 	call	0x2f20	; 0x2f20 <LCD_sendCommand>
LCD_sendCommand(LCD_CLEAR_SCREEN);
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	0e 94 90 17 	call	0x2f20	; 0x2f20 <LCD_sendCommand>

}
    2f0e:	2e 96       	adiw	r28, 0x0e	; 14
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	08 95       	ret

00002f20 <LCD_sendCommand>:
 *
 * @param[in]  a_command     Type uint8     Range 0x00:0xFF
 * @return none
 */
void LCD_sendCommand(uint8 a_command)
{
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	c3 56       	subi	r28, 0x63	; 99
    2f2e:	d0 40       	sbci	r29, 0x00	; 0
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ed 59       	subi	r30, 0x9D	; 157
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 83       	st	Z, r24
GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2f42:	83 e0       	ldi	r24, 0x03	; 3
    2f44:	62 e0       	ldi	r22, 0x02	; 2
    2f46:	40 e0       	ldi	r20, 0x00	; 0
    2f48:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e1 5a       	subi	r30, 0xA1	; 161
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e8       	ldi	r26, 0x80	; 128
    2f58:	bf e3       	ldi	r27, 0x3F	; 63
    2f5a:	80 83       	st	Z, r24
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	a2 83       	std	Z+2, r26	; 0x02
    2f60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	8e 01       	movw	r16, r28
    2f64:	05 5a       	subi	r16, 0xA5	; 165
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e1 5a       	subi	r30, 0xA1	; 161
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4a ef       	ldi	r20, 0xFA	; 250
    2f7c:	54 e4       	ldi	r21, 0x44	; 68
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	f8 01       	movw	r30, r16
    2f88:	80 83       	st	Z, r24
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	a2 83       	std	Z+2, r26	; 0x02
    2f8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f90:	fe 01       	movw	r30, r28
    2f92:	e5 5a       	subi	r30, 0xA5	; 165
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	60 81       	ld	r22, Z
    2f98:	71 81       	ldd	r23, Z+1	; 0x01
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e8       	ldi	r20, 0x80	; 128
    2fa4:	5f e3       	ldi	r21, 0x3F	; 63
    2fa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2faa:	88 23       	and	r24, r24
    2fac:	44 f4       	brge	.+16     	; 0x2fbe <LCD_sendCommand+0x9e>
		__ticks = 1;
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e7 5a       	subi	r30, 0xA7	; 167
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	80 83       	st	Z, r24
    2fbc:	64 c0       	rjmp	.+200    	; 0x3086 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e5 5a       	subi	r30, 0xA5	; 165
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	60 81       	ld	r22, Z
    2fc6:	71 81       	ldd	r23, Z+1	; 0x01
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	3f ef       	ldi	r19, 0xFF	; 255
    2fd0:	4f e7       	ldi	r20, 0x7F	; 127
    2fd2:	57 e4       	ldi	r21, 0x47	; 71
    2fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd8:	18 16       	cp	r1, r24
    2fda:	0c f0       	brlt	.+2      	; 0x2fde <LCD_sendCommand+0xbe>
    2fdc:	43 c0       	rjmp	.+134    	; 0x3064 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e1 5a       	subi	r30, 0xA1	; 161
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e2       	ldi	r20, 0x20	; 32
    2ff2:	51 e4       	ldi	r21, 0x41	; 65
    2ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	8e 01       	movw	r16, r28
    2ffe:	07 5a       	subi	r16, 0xA7	; 167
    3000:	1f 4f       	sbci	r17, 0xFF	; 255
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	f8 01       	movw	r30, r16
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
    3014:	1f c0       	rjmp	.+62     	; 0x3054 <LCD_sendCommand+0x134>
    3016:	fe 01       	movw	r30, r28
    3018:	e9 5a       	subi	r30, 0xA9	; 169
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	88 ec       	ldi	r24, 0xC8	; 200
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	80 83       	st	Z, r24
    3024:	fe 01       	movw	r30, r28
    3026:	e9 5a       	subi	r30, 0xA9	; 169
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	80 81       	ld	r24, Z
    302c:	91 81       	ldd	r25, Z+1	; 0x01
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <LCD_sendCommand+0x10e>
    3032:	fe 01       	movw	r30, r28
    3034:	e9 5a       	subi	r30, 0xA9	; 169
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303c:	de 01       	movw	r26, r28
    303e:	a7 5a       	subi	r26, 0xA7	; 167
    3040:	bf 4f       	sbci	r27, 0xFF	; 255
    3042:	fe 01       	movw	r30, r28
    3044:	e7 5a       	subi	r30, 0xA7	; 167
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	80 81       	ld	r24, Z
    304a:	91 81       	ldd	r25, Z+1	; 0x01
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	11 96       	adiw	r26, 0x01	; 1
    3050:	9c 93       	st	X, r25
    3052:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3054:	fe 01       	movw	r30, r28
    3056:	e7 5a       	subi	r30, 0xA7	; 167
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	d1 f6       	brne	.-76     	; 0x3016 <LCD_sendCommand+0xf6>
    3062:	27 c0       	rjmp	.+78     	; 0x30b2 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3064:	8e 01       	movw	r16, r28
    3066:	07 5a       	subi	r16, 0xA7	; 167
    3068:	1f 4f       	sbci	r17, 0xFF	; 255
    306a:	fe 01       	movw	r30, r28
    306c:	e5 5a       	subi	r30, 0xA5	; 165
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	f8 01       	movw	r30, r16
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	80 83       	st	Z, r24
    3086:	de 01       	movw	r26, r28
    3088:	ab 5a       	subi	r26, 0xAB	; 171
    308a:	bf 4f       	sbci	r27, 0xFF	; 255
    308c:	fe 01       	movw	r30, r28
    308e:	e7 5a       	subi	r30, 0xA7	; 167
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	80 81       	ld	r24, Z
    3094:	91 81       	ldd	r25, Z+1	; 0x01
    3096:	8d 93       	st	X+, r24
    3098:	9c 93       	st	X, r25
    309a:	fe 01       	movw	r30, r28
    309c:	eb 5a       	subi	r30, 0xAB	; 171
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <LCD_sendCommand+0x184>
    30a8:	fe 01       	movw	r30, r28
    30aa:	eb 5a       	subi	r30, 0xAB	; 171
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	91 83       	std	Z+1, r25	; 0x01
    30b0:	80 83       	st	Z, r24
_delay_ms(1);  /* delay for processing Tas = 50ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    30b2:	83 e0       	ldi	r24, 0x03	; 3
    30b4:	63 e0       	ldi	r22, 0x03	; 3
    30b6:	41 e0       	ldi	r20, 0x01	; 1
    30b8:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    30bc:	fe 01       	movw	r30, r28
    30be:	ef 5a       	subi	r30, 0xAF	; 175
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	a0 e8       	ldi	r26, 0x80	; 128
    30c8:	bf e3       	ldi	r27, 0x3F	; 63
    30ca:	80 83       	st	Z, r24
    30cc:	91 83       	std	Z+1, r25	; 0x01
    30ce:	a2 83       	std	Z+2, r26	; 0x02
    30d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	8e 01       	movw	r16, r28
    30d4:	03 5b       	subi	r16, 0xB3	; 179
    30d6:	1f 4f       	sbci	r17, 0xFF	; 255
    30d8:	fe 01       	movw	r30, r28
    30da:	ef 5a       	subi	r30, 0xAF	; 175
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	60 81       	ld	r22, Z
    30e0:	71 81       	ldd	r23, Z+1	; 0x01
    30e2:	82 81       	ldd	r24, Z+2	; 0x02
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	4a ef       	ldi	r20, 0xFA	; 250
    30ec:	54 e4       	ldi	r21, 0x44	; 68
    30ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	f8 01       	movw	r30, r16
    30f8:	80 83       	st	Z, r24
    30fa:	91 83       	std	Z+1, r25	; 0x01
    30fc:	a2 83       	std	Z+2, r26	; 0x02
    30fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3100:	fe 01       	movw	r30, r28
    3102:	e3 5b       	subi	r30, 0xB3	; 179
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	60 81       	ld	r22, Z
    3108:	71 81       	ldd	r23, Z+1	; 0x01
    310a:	82 81       	ldd	r24, Z+2	; 0x02
    310c:	93 81       	ldd	r25, Z+3	; 0x03
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e8       	ldi	r20, 0x80	; 128
    3114:	5f e3       	ldi	r21, 0x3F	; 63
    3116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    311a:	88 23       	and	r24, r24
    311c:	44 f4       	brge	.+16     	; 0x312e <LCD_sendCommand+0x20e>
		__ticks = 1;
    311e:	fe 01       	movw	r30, r28
    3120:	e5 5b       	subi	r30, 0xB5	; 181
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
    312c:	64 c0       	rjmp	.+200    	; 0x31f6 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    312e:	fe 01       	movw	r30, r28
    3130:	e3 5b       	subi	r30, 0xB3	; 179
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	60 81       	ld	r22, Z
    3136:	71 81       	ldd	r23, Z+1	; 0x01
    3138:	82 81       	ldd	r24, Z+2	; 0x02
    313a:	93 81       	ldd	r25, Z+3	; 0x03
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	3f ef       	ldi	r19, 0xFF	; 255
    3140:	4f e7       	ldi	r20, 0x7F	; 127
    3142:	57 e4       	ldi	r21, 0x47	; 71
    3144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3148:	18 16       	cp	r1, r24
    314a:	0c f0       	brlt	.+2      	; 0x314e <LCD_sendCommand+0x22e>
    314c:	43 c0       	rjmp	.+134    	; 0x31d4 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314e:	fe 01       	movw	r30, r28
    3150:	ef 5a       	subi	r30, 0xAF	; 175
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	60 81       	ld	r22, Z
    3156:	71 81       	ldd	r23, Z+1	; 0x01
    3158:	82 81       	ldd	r24, Z+2	; 0x02
    315a:	93 81       	ldd	r25, Z+3	; 0x03
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	40 e2       	ldi	r20, 0x20	; 32
    3162:	51 e4       	ldi	r21, 0x41	; 65
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	8e 01       	movw	r16, r28
    316e:	05 5b       	subi	r16, 0xB5	; 181
    3170:	1f 4f       	sbci	r17, 0xFF	; 255
    3172:	bc 01       	movw	r22, r24
    3174:	cd 01       	movw	r24, r26
    3176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	f8 01       	movw	r30, r16
    3180:	91 83       	std	Z+1, r25	; 0x01
    3182:	80 83       	st	Z, r24
    3184:	1f c0       	rjmp	.+62     	; 0x31c4 <LCD_sendCommand+0x2a4>
    3186:	fe 01       	movw	r30, r28
    3188:	e7 5b       	subi	r30, 0xB7	; 183
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	88 ec       	ldi	r24, 0xC8	; 200
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
    3194:	fe 01       	movw	r30, r28
    3196:	e7 5b       	subi	r30, 0xB7	; 183
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <LCD_sendCommand+0x27e>
    31a2:	fe 01       	movw	r30, r28
    31a4:	e7 5b       	subi	r30, 0xB7	; 183
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ac:	de 01       	movw	r26, r28
    31ae:	a5 5b       	subi	r26, 0xB5	; 181
    31b0:	bf 4f       	sbci	r27, 0xFF	; 255
    31b2:	fe 01       	movw	r30, r28
    31b4:	e5 5b       	subi	r30, 0xB5	; 181
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	80 81       	ld	r24, Z
    31ba:	91 81       	ldd	r25, Z+1	; 0x01
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	11 96       	adiw	r26, 0x01	; 1
    31c0:	9c 93       	st	X, r25
    31c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c4:	fe 01       	movw	r30, r28
    31c6:	e5 5b       	subi	r30, 0xB5	; 181
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	80 81       	ld	r24, Z
    31cc:	91 81       	ldd	r25, Z+1	; 0x01
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	d1 f6       	brne	.-76     	; 0x3186 <LCD_sendCommand+0x266>
    31d2:	27 c0       	rjmp	.+78     	; 0x3222 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d4:	8e 01       	movw	r16, r28
    31d6:	05 5b       	subi	r16, 0xB5	; 181
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	fe 01       	movw	r30, r28
    31dc:	e3 5b       	subi	r30, 0xB3	; 179
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	f8 01       	movw	r30, r16
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	80 83       	st	Z, r24
    31f6:	de 01       	movw	r26, r28
    31f8:	a9 5b       	subi	r26, 0xB9	; 185
    31fa:	bf 4f       	sbci	r27, 0xFF	; 255
    31fc:	fe 01       	movw	r30, r28
    31fe:	e5 5b       	subi	r30, 0xB5	; 181
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	80 81       	ld	r24, Z
    3204:	91 81       	ldd	r25, Z+1	; 0x01
    3206:	8d 93       	st	X+, r24
    3208:	9c 93       	st	X, r25
    320a:	fe 01       	movw	r30, r28
    320c:	e9 5b       	subi	r30, 0xB9	; 185
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <LCD_sendCommand+0x2f4>
    3218:	fe 01       	movw	r30, r28
    321a:	e9 5b       	subi	r30, 0xB9	; 185
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_MODE==LCD_FOUR_BIT_DATA_MODE)

GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN1, GET_BIT(a_command,4));
    3222:	fe 01       	movw	r30, r28
    3224:	ed 59       	subi	r30, 0x9D	; 157
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 81       	ld	r24, Z
    322a:	82 95       	swap	r24
    322c:	8f 70       	andi	r24, 0x0F	; 15
    322e:	98 2f       	mov	r25, r24
    3230:	91 70       	andi	r25, 0x01	; 1
    3232:	83 e0       	ldi	r24, 0x03	; 3
    3234:	64 e0       	ldi	r22, 0x04	; 4
    3236:	49 2f       	mov	r20, r25
    3238:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN2, GET_BIT(a_command,5));
    323c:	fe 01       	movw	r30, r28
    323e:	ed 59       	subi	r30, 0x9D	; 157
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	82 95       	swap	r24
    3246:	86 95       	lsr	r24
    3248:	87 70       	andi	r24, 0x07	; 7
    324a:	98 2f       	mov	r25, r24
    324c:	91 70       	andi	r25, 0x01	; 1
    324e:	83 e0       	ldi	r24, 0x03	; 3
    3250:	65 e0       	ldi	r22, 0x05	; 5
    3252:	49 2f       	mov	r20, r25
    3254:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN3, GET_BIT(a_command,6));
    3258:	fe 01       	movw	r30, r28
    325a:	ed 59       	subi	r30, 0x9D	; 157
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	80 81       	ld	r24, Z
    3260:	82 95       	swap	r24
    3262:	86 95       	lsr	r24
    3264:	86 95       	lsr	r24
    3266:	83 70       	andi	r24, 0x03	; 3
    3268:	98 2f       	mov	r25, r24
    326a:	91 70       	andi	r25, 0x01	; 1
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	66 e0       	ldi	r22, 0x06	; 6
    3270:	49 2f       	mov	r20, r25
    3272:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN4, GET_BIT(a_command,7));
    3276:	fe 01       	movw	r30, r28
    3278:	ed 59       	subi	r30, 0x9D	; 157
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	98 2f       	mov	r25, r24
    3280:	99 1f       	adc	r25, r25
    3282:	99 27       	eor	r25, r25
    3284:	99 1f       	adc	r25, r25
    3286:	83 e0       	ldi	r24, 0x03	; 3
    3288:	67 e0       	ldi	r22, 0x07	; 7
    328a:	49 2f       	mov	r20, r25
    328c:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    3290:	fe 01       	movw	r30, r28
    3292:	ed 5b       	subi	r30, 0xBD	; 189
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	a0 e8       	ldi	r26, 0x80	; 128
    329c:	bf e3       	ldi	r27, 0x3F	; 63
    329e:	80 83       	st	Z, r24
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	a2 83       	std	Z+2, r26	; 0x02
    32a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a6:	8e 01       	movw	r16, r28
    32a8:	01 5c       	subi	r16, 0xC1	; 193
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	ed 5b       	subi	r30, 0xBD	; 189
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	4a ef       	ldi	r20, 0xFA	; 250
    32c0:	54 e4       	ldi	r21, 0x44	; 68
    32c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	f8 01       	movw	r30, r16
    32cc:	80 83       	st	Z, r24
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	a2 83       	std	Z+2, r26	; 0x02
    32d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32d4:	fe 01       	movw	r30, r28
    32d6:	ff 96       	adiw	r30, 0x3f	; 63
    32d8:	60 81       	ld	r22, Z
    32da:	71 81       	ldd	r23, Z+1	; 0x01
    32dc:	82 81       	ldd	r24, Z+2	; 0x02
    32de:	93 81       	ldd	r25, Z+3	; 0x03
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e8       	ldi	r20, 0x80	; 128
    32e6:	5f e3       	ldi	r21, 0x3F	; 63
    32e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ec:	88 23       	and	r24, r24
    32ee:	2c f4       	brge	.+10     	; 0x32fa <LCD_sendCommand+0x3da>
		__ticks = 1;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	9e af       	std	Y+62, r25	; 0x3e
    32f6:	8d af       	std	Y+61, r24	; 0x3d
    32f8:	46 c0       	rjmp	.+140    	; 0x3386 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    32fa:	fe 01       	movw	r30, r28
    32fc:	ff 96       	adiw	r30, 0x3f	; 63
    32fe:	60 81       	ld	r22, Z
    3300:	71 81       	ldd	r23, Z+1	; 0x01
    3302:	82 81       	ldd	r24, Z+2	; 0x02
    3304:	93 81       	ldd	r25, Z+3	; 0x03
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	3f ef       	ldi	r19, 0xFF	; 255
    330a:	4f e7       	ldi	r20, 0x7F	; 127
    330c:	57 e4       	ldi	r21, 0x47	; 71
    330e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3312:	18 16       	cp	r1, r24
    3314:	64 f5       	brge	.+88     	; 0x336e <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3316:	fe 01       	movw	r30, r28
    3318:	ed 5b       	subi	r30, 0xBD	; 189
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	60 81       	ld	r22, Z
    331e:	71 81       	ldd	r23, Z+1	; 0x01
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	93 81       	ldd	r25, Z+3	; 0x03
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e2       	ldi	r20, 0x20	; 32
    332a:	51 e4       	ldi	r21, 0x41	; 65
    332c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	bc 01       	movw	r22, r24
    3336:	cd 01       	movw	r24, r26
    3338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9e af       	std	Y+62, r25	; 0x3e
    3342:	8d af       	std	Y+61, r24	; 0x3d
    3344:	0f c0       	rjmp	.+30     	; 0x3364 <LCD_sendCommand+0x444>
    3346:	88 ec       	ldi	r24, 0xC8	; 200
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	9c af       	std	Y+60, r25	; 0x3c
    334c:	8b af       	std	Y+59, r24	; 0x3b
    334e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3350:	9c ad       	ldd	r25, Y+60	; 0x3c
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <LCD_sendCommand+0x432>
    3356:	9c af       	std	Y+60, r25	; 0x3c
    3358:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335a:	8d ad       	ldd	r24, Y+61	; 0x3d
    335c:	9e ad       	ldd	r25, Y+62	; 0x3e
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	9e af       	std	Y+62, r25	; 0x3e
    3362:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3364:	8d ad       	ldd	r24, Y+61	; 0x3d
    3366:	9e ad       	ldd	r25, Y+62	; 0x3e
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	69 f7       	brne	.-38     	; 0x3346 <LCD_sendCommand+0x426>
    336c:	16 c0       	rjmp	.+44     	; 0x339a <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336e:	fe 01       	movw	r30, r28
    3370:	ff 96       	adiw	r30, 0x3f	; 63
    3372:	60 81       	ld	r22, Z
    3374:	71 81       	ldd	r23, Z+1	; 0x01
    3376:	82 81       	ldd	r24, Z+2	; 0x02
    3378:	93 81       	ldd	r25, Z+3	; 0x03
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	9e af       	std	Y+62, r25	; 0x3e
    3384:	8d af       	std	Y+61, r24	; 0x3d
    3386:	8d ad       	ldd	r24, Y+61	; 0x3d
    3388:	9e ad       	ldd	r25, Y+62	; 0x3e
    338a:	9a af       	std	Y+58, r25	; 0x3a
    338c:	89 af       	std	Y+57, r24	; 0x39
    338e:	89 ad       	ldd	r24, Y+57	; 0x39
    3390:	9a ad       	ldd	r25, Y+58	; 0x3a
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	f1 f7       	brne	.-4      	; 0x3392 <LCD_sendCommand+0x472>
    3396:	9a af       	std	Y+58, r25	; 0x3a
    3398:	89 af       	std	Y+57, r24	; 0x39

_delay_ms(1); /* delay for processing Tdsw = 100ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	63 e0       	ldi	r22, 0x03	; 3
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	a0 e8       	ldi	r26, 0x80	; 128
    33aa:	bf e3       	ldi	r27, 0x3F	; 63
    33ac:	8d ab       	std	Y+53, r24	; 0x35
    33ae:	9e ab       	std	Y+54, r25	; 0x36
    33b0:	af ab       	std	Y+55, r26	; 0x37
    33b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	6d a9       	ldd	r22, Y+53	; 0x35
    33b6:	7e a9       	ldd	r23, Y+54	; 0x36
    33b8:	8f a9       	ldd	r24, Y+55	; 0x37
    33ba:	98 ad       	ldd	r25, Y+56	; 0x38
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a ef       	ldi	r20, 0xFA	; 250
    33c2:	54 e4       	ldi	r21, 0x44	; 68
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	89 ab       	std	Y+49, r24	; 0x31
    33ce:	9a ab       	std	Y+50, r25	; 0x32
    33d0:	ab ab       	std	Y+51, r26	; 0x33
    33d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33d4:	69 a9       	ldd	r22, Y+49	; 0x31
    33d6:	7a a9       	ldd	r23, Y+50	; 0x32
    33d8:	8b a9       	ldd	r24, Y+51	; 0x33
    33da:	9c a9       	ldd	r25, Y+52	; 0x34
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	5f e3       	ldi	r21, 0x3F	; 63
    33e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e8:	88 23       	and	r24, r24
    33ea:	2c f4       	brge	.+10     	; 0x33f6 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	98 ab       	std	Y+48, r25	; 0x30
    33f2:	8f a7       	std	Y+47, r24	; 0x2f
    33f4:	3f c0       	rjmp	.+126    	; 0x3474 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    33f6:	69 a9       	ldd	r22, Y+49	; 0x31
    33f8:	7a a9       	ldd	r23, Y+50	; 0x32
    33fa:	8b a9       	ldd	r24, Y+51	; 0x33
    33fc:	9c a9       	ldd	r25, Y+52	; 0x34
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	4c f5       	brge	.+82     	; 0x3460 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	6d a9       	ldd	r22, Y+53	; 0x35
    3410:	7e a9       	ldd	r23, Y+54	; 0x36
    3412:	8f a9       	ldd	r24, Y+55	; 0x37
    3414:	98 ad       	ldd	r25, Y+56	; 0x38
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e2       	ldi	r20, 0x20	; 32
    341c:	51 e4       	ldi	r21, 0x41	; 65
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	98 ab       	std	Y+48, r25	; 0x30
    3434:	8f a7       	std	Y+47, r24	; 0x2f
    3436:	0f c0       	rjmp	.+30     	; 0x3456 <LCD_sendCommand+0x536>
    3438:	88 ec       	ldi	r24, 0xC8	; 200
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9e a7       	std	Y+46, r25	; 0x2e
    343e:	8d a7       	std	Y+45, r24	; 0x2d
    3440:	8d a5       	ldd	r24, Y+45	; 0x2d
    3442:	9e a5       	ldd	r25, Y+46	; 0x2e
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <LCD_sendCommand+0x524>
    3448:	9e a7       	std	Y+46, r25	; 0x2e
    344a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	8f a5       	ldd	r24, Y+47	; 0x2f
    344e:	98 a9       	ldd	r25, Y+48	; 0x30
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	98 ab       	std	Y+48, r25	; 0x30
    3454:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	8f a5       	ldd	r24, Y+47	; 0x2f
    3458:	98 a9       	ldd	r25, Y+48	; 0x30
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	69 f7       	brne	.-38     	; 0x3438 <LCD_sendCommand+0x518>
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	69 a9       	ldd	r22, Y+49	; 0x31
    3462:	7a a9       	ldd	r23, Y+50	; 0x32
    3464:	8b a9       	ldd	r24, Y+51	; 0x33
    3466:	9c a9       	ldd	r25, Y+52	; 0x34
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	98 ab       	std	Y+48, r25	; 0x30
    3472:	8f a7       	std	Y+47, r24	; 0x2f
    3474:	8f a5       	ldd	r24, Y+47	; 0x2f
    3476:	98 a9       	ldd	r25, Y+48	; 0x30
    3478:	9c a7       	std	Y+44, r25	; 0x2c
    347a:	8b a7       	std	Y+43, r24	; 0x2b
    347c:	8b a5       	ldd	r24, Y+43	; 0x2b
    347e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <LCD_sendCommand+0x560>
    3484:	9c a7       	std	Y+44, r25	; 0x2c
    3486:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(1); /* delay for processing Th = 13ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3488:	83 e0       	ldi	r24, 0x03	; 3
    348a:	63 e0       	ldi	r22, 0x03	; 3
    348c:	41 e0       	ldi	r20, 0x01	; 1
    348e:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	a0 e8       	ldi	r26, 0x80	; 128
    3498:	bf e3       	ldi	r27, 0x3F	; 63
    349a:	8f a3       	std	Y+39, r24	; 0x27
    349c:	98 a7       	std	Y+40, r25	; 0x28
    349e:	a9 a7       	std	Y+41, r26	; 0x29
    34a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a2:	6f a1       	ldd	r22, Y+39	; 0x27
    34a4:	78 a5       	ldd	r23, Y+40	; 0x28
    34a6:	89 a5       	ldd	r24, Y+41	; 0x29
    34a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	4a ef       	ldi	r20, 0xFA	; 250
    34b0:	54 e4       	ldi	r21, 0x44	; 68
    34b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	8b a3       	std	Y+35, r24	; 0x23
    34bc:	9c a3       	std	Y+36, r25	; 0x24
    34be:	ad a3       	std	Y+37, r26	; 0x25
    34c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34c2:	6b a1       	ldd	r22, Y+35	; 0x23
    34c4:	7c a1       	ldd	r23, Y+36	; 0x24
    34c6:	8d a1       	ldd	r24, Y+37	; 0x25
    34c8:	9e a1       	ldd	r25, Y+38	; 0x26
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e8       	ldi	r20, 0x80	; 128
    34d0:	5f e3       	ldi	r21, 0x3F	; 63
    34d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d6:	88 23       	and	r24, r24
    34d8:	2c f4       	brge	.+10     	; 0x34e4 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	9a a3       	std	Y+34, r25	; 0x22
    34e0:	89 a3       	std	Y+33, r24	; 0x21
    34e2:	3f c0       	rjmp	.+126    	; 0x3562 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    34e4:	6b a1       	ldd	r22, Y+35	; 0x23
    34e6:	7c a1       	ldd	r23, Y+36	; 0x24
    34e8:	8d a1       	ldd	r24, Y+37	; 0x25
    34ea:	9e a1       	ldd	r25, Y+38	; 0x26
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	3f ef       	ldi	r19, 0xFF	; 255
    34f0:	4f e7       	ldi	r20, 0x7F	; 127
    34f2:	57 e4       	ldi	r21, 0x47	; 71
    34f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34f8:	18 16       	cp	r1, r24
    34fa:	4c f5       	brge	.+82     	; 0x354e <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fc:	6f a1       	ldd	r22, Y+39	; 0x27
    34fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3500:	89 a5       	ldd	r24, Y+41	; 0x29
    3502:	9a a5       	ldd	r25, Y+42	; 0x2a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e2       	ldi	r20, 0x20	; 32
    350a:	51 e4       	ldi	r21, 0x41	; 65
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	bc 01       	movw	r22, r24
    3516:	cd 01       	movw	r24, r26
    3518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	9a a3       	std	Y+34, r25	; 0x22
    3522:	89 a3       	std	Y+33, r24	; 0x21
    3524:	0f c0       	rjmp	.+30     	; 0x3544 <LCD_sendCommand+0x624>
    3526:	88 ec       	ldi	r24, 0xC8	; 200
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	98 a3       	std	Y+32, r25	; 0x20
    352c:	8f 8f       	std	Y+31, r24	; 0x1f
    352e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3530:	98 a1       	ldd	r25, Y+32	; 0x20
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <LCD_sendCommand+0x612>
    3536:	98 a3       	std	Y+32, r25	; 0x20
    3538:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353a:	89 a1       	ldd	r24, Y+33	; 0x21
    353c:	9a a1       	ldd	r25, Y+34	; 0x22
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	9a a3       	std	Y+34, r25	; 0x22
    3542:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3544:	89 a1       	ldd	r24, Y+33	; 0x21
    3546:	9a a1       	ldd	r25, Y+34	; 0x22
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	69 f7       	brne	.-38     	; 0x3526 <LCD_sendCommand+0x606>
    354c:	14 c0       	rjmp	.+40     	; 0x3576 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354e:	6b a1       	ldd	r22, Y+35	; 0x23
    3550:	7c a1       	ldd	r23, Y+36	; 0x24
    3552:	8d a1       	ldd	r24, Y+37	; 0x25
    3554:	9e a1       	ldd	r25, Y+38	; 0x26
    3556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	9a a3       	std	Y+34, r25	; 0x22
    3560:	89 a3       	std	Y+33, r24	; 0x21
    3562:	89 a1       	ldd	r24, Y+33	; 0x21
    3564:	9a a1       	ldd	r25, Y+34	; 0x22
    3566:	9e 8f       	std	Y+30, r25	; 0x1e
    3568:	8d 8f       	std	Y+29, r24	; 0x1d
    356a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    356c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	f1 f7       	brne	.-4      	; 0x356e <LCD_sendCommand+0x64e>
    3572:	9e 8f       	std	Y+30, r25	; 0x1e
    3574:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN1, GET_BIT(a_command,0));
    3576:	fe 01       	movw	r30, r28
    3578:	ed 59       	subi	r30, 0x9D	; 157
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 81       	ld	r24, Z
    357e:	98 2f       	mov	r25, r24
    3580:	91 70       	andi	r25, 0x01	; 1
    3582:	83 e0       	ldi	r24, 0x03	; 3
    3584:	64 e0       	ldi	r22, 0x04	; 4
    3586:	49 2f       	mov	r20, r25
    3588:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN2, GET_BIT(a_command,1));
    358c:	fe 01       	movw	r30, r28
    358e:	ed 59       	subi	r30, 0x9D	; 157
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	86 95       	lsr	r24
    3596:	98 2f       	mov	r25, r24
    3598:	91 70       	andi	r25, 0x01	; 1
    359a:	83 e0       	ldi	r24, 0x03	; 3
    359c:	65 e0       	ldi	r22, 0x05	; 5
    359e:	49 2f       	mov	r20, r25
    35a0:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN3, GET_BIT(a_command,2));
    35a4:	fe 01       	movw	r30, r28
    35a6:	ed 59       	subi	r30, 0x9D	; 157
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	80 81       	ld	r24, Z
    35ac:	86 95       	lsr	r24
    35ae:	86 95       	lsr	r24
    35b0:	98 2f       	mov	r25, r24
    35b2:	91 70       	andi	r25, 0x01	; 1
    35b4:	83 e0       	ldi	r24, 0x03	; 3
    35b6:	66 e0       	ldi	r22, 0x06	; 6
    35b8:	49 2f       	mov	r20, r25
    35ba:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN4, GET_BIT(a_command,3));
    35be:	fe 01       	movw	r30, r28
    35c0:	ed 59       	subi	r30, 0x9D	; 157
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 81       	ld	r24, Z
    35c6:	86 95       	lsr	r24
    35c8:	86 95       	lsr	r24
    35ca:	86 95       	lsr	r24
    35cc:	98 2f       	mov	r25, r24
    35ce:	91 70       	andi	r25, 0x01	; 1
    35d0:	83 e0       	ldi	r24, 0x03	; 3
    35d2:	67 e0       	ldi	r22, 0x07	; 7
    35d4:	49 2f       	mov	r20, r25
    35d6:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	a0 e8       	ldi	r26, 0x80	; 128
    35e0:	bf e3       	ldi	r27, 0x3F	; 63
    35e2:	89 8f       	std	Y+25, r24	; 0x19
    35e4:	9a 8f       	std	Y+26, r25	; 0x1a
    35e6:	ab 8f       	std	Y+27, r26	; 0x1b
    35e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ea:	69 8d       	ldd	r22, Y+25	; 0x19
    35ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	4a ef       	ldi	r20, 0xFA	; 250
    35f8:	54 e4       	ldi	r21, 0x44	; 68
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	8d 8b       	std	Y+21, r24	; 0x15
    3604:	9e 8b       	std	Y+22, r25	; 0x16
    3606:	af 8b       	std	Y+23, r26	; 0x17
    3608:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    360a:	6d 89       	ldd	r22, Y+21	; 0x15
    360c:	7e 89       	ldd	r23, Y+22	; 0x16
    360e:	8f 89       	ldd	r24, Y+23	; 0x17
    3610:	98 8d       	ldd	r25, Y+24	; 0x18
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e8       	ldi	r20, 0x80	; 128
    3618:	5f e3       	ldi	r21, 0x3F	; 63
    361a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    361e:	88 23       	and	r24, r24
    3620:	2c f4       	brge	.+10     	; 0x362c <LCD_sendCommand+0x70c>
		__ticks = 1;
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	9c 8b       	std	Y+20, r25	; 0x14
    3628:	8b 8b       	std	Y+19, r24	; 0x13
    362a:	3f c0       	rjmp	.+126    	; 0x36aa <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    362c:	6d 89       	ldd	r22, Y+21	; 0x15
    362e:	7e 89       	ldd	r23, Y+22	; 0x16
    3630:	8f 89       	ldd	r24, Y+23	; 0x17
    3632:	98 8d       	ldd	r25, Y+24	; 0x18
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	3f ef       	ldi	r19, 0xFF	; 255
    3638:	4f e7       	ldi	r20, 0x7F	; 127
    363a:	57 e4       	ldi	r21, 0x47	; 71
    363c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3640:	18 16       	cp	r1, r24
    3642:	4c f5       	brge	.+82     	; 0x3696 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3644:	69 8d       	ldd	r22, Y+25	; 0x19
    3646:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    364a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	40 e2       	ldi	r20, 0x20	; 32
    3652:	51 e4       	ldi	r21, 0x41	; 65
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	bc 01       	movw	r22, r24
    365e:	cd 01       	movw	r24, r26
    3660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	9c 8b       	std	Y+20, r25	; 0x14
    366a:	8b 8b       	std	Y+19, r24	; 0x13
    366c:	0f c0       	rjmp	.+30     	; 0x368c <LCD_sendCommand+0x76c>
    366e:	88 ec       	ldi	r24, 0xC8	; 200
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9a 8b       	std	Y+18, r25	; 0x12
    3674:	89 8b       	std	Y+17, r24	; 0x11
    3676:	89 89       	ldd	r24, Y+17	; 0x11
    3678:	9a 89       	ldd	r25, Y+18	; 0x12
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	f1 f7       	brne	.-4      	; 0x367a <LCD_sendCommand+0x75a>
    367e:	9a 8b       	std	Y+18, r25	; 0x12
    3680:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3682:	8b 89       	ldd	r24, Y+19	; 0x13
    3684:	9c 89       	ldd	r25, Y+20	; 0x14
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	9c 8b       	std	Y+20, r25	; 0x14
    368a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368c:	8b 89       	ldd	r24, Y+19	; 0x13
    368e:	9c 89       	ldd	r25, Y+20	; 0x14
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	69 f7       	brne	.-38     	; 0x366e <LCD_sendCommand+0x74e>
    3694:	14 c0       	rjmp	.+40     	; 0x36be <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3696:	6d 89       	ldd	r22, Y+21	; 0x15
    3698:	7e 89       	ldd	r23, Y+22	; 0x16
    369a:	8f 89       	ldd	r24, Y+23	; 0x17
    369c:	98 8d       	ldd	r25, Y+24	; 0x18
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	9c 8b       	std	Y+20, r25	; 0x14
    36a8:	8b 8b       	std	Y+19, r24	; 0x13
    36aa:	8b 89       	ldd	r24, Y+19	; 0x13
    36ac:	9c 89       	ldd	r25, Y+20	; 0x14
    36ae:	98 8b       	std	Y+16, r25	; 0x10
    36b0:	8f 87       	std	Y+15, r24	; 0x0f
    36b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36b4:	98 89       	ldd	r25, Y+16	; 0x10
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <LCD_sendCommand+0x796>
    36ba:	98 8b       	std	Y+16, r25	; 0x10
    36bc:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(1); /* delay for processing Tdsw = 100ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    36be:	83 e0       	ldi	r24, 0x03	; 3
    36c0:	63 e0       	ldi	r22, 0x03	; 3
    36c2:	40 e0       	ldi	r20, 0x00	; 0
    36c4:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a0 e8       	ldi	r26, 0x80	; 128
    36ce:	bf e3       	ldi	r27, 0x3F	; 63
    36d0:	8b 87       	std	Y+11, r24	; 0x0b
    36d2:	9c 87       	std	Y+12, r25	; 0x0c
    36d4:	ad 87       	std	Y+13, r26	; 0x0d
    36d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36da:	7c 85       	ldd	r23, Y+12	; 0x0c
    36dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36de:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	4a ef       	ldi	r20, 0xFA	; 250
    36e6:	54 e4       	ldi	r21, 0x44	; 68
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	8f 83       	std	Y+7, r24	; 0x07
    36f2:	98 87       	std	Y+8, r25	; 0x08
    36f4:	a9 87       	std	Y+9, r26	; 0x09
    36f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36f8:	6f 81       	ldd	r22, Y+7	; 0x07
    36fa:	78 85       	ldd	r23, Y+8	; 0x08
    36fc:	89 85       	ldd	r24, Y+9	; 0x09
    36fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e8       	ldi	r20, 0x80	; 128
    3706:	5f e3       	ldi	r21, 0x3F	; 63
    3708:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370c:	88 23       	and	r24, r24
    370e:	2c f4       	brge	.+10     	; 0x371a <LCD_sendCommand+0x7fa>
		__ticks = 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	9e 83       	std	Y+6, r25	; 0x06
    3716:	8d 83       	std	Y+5, r24	; 0x05
    3718:	3f c0       	rjmp	.+126    	; 0x3798 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    371a:	6f 81       	ldd	r22, Y+7	; 0x07
    371c:	78 85       	ldd	r23, Y+8	; 0x08
    371e:	89 85       	ldd	r24, Y+9	; 0x09
    3720:	9a 85       	ldd	r25, Y+10	; 0x0a
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	3f ef       	ldi	r19, 0xFF	; 255
    3726:	4f e7       	ldi	r20, 0x7F	; 127
    3728:	57 e4       	ldi	r21, 0x47	; 71
    372a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372e:	18 16       	cp	r1, r24
    3730:	4c f5       	brge	.+82     	; 0x3784 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	6b 85       	ldd	r22, Y+11	; 0x0b
    3734:	7c 85       	ldd	r23, Y+12	; 0x0c
    3736:	8d 85       	ldd	r24, Y+13	; 0x0d
    3738:	9e 85       	ldd	r25, Y+14	; 0x0e
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e2       	ldi	r20, 0x20	; 32
    3740:	51 e4       	ldi	r21, 0x41	; 65
    3742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9e 83       	std	Y+6, r25	; 0x06
    3758:	8d 83       	std	Y+5, r24	; 0x05
    375a:	0f c0       	rjmp	.+30     	; 0x377a <LCD_sendCommand+0x85a>
    375c:	88 ec       	ldi	r24, 0xC8	; 200
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9c 83       	std	Y+4, r25	; 0x04
    3762:	8b 83       	std	Y+3, r24	; 0x03
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	9c 81       	ldd	r25, Y+4	; 0x04
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <LCD_sendCommand+0x848>
    376c:	9c 83       	std	Y+4, r25	; 0x04
    376e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377a:	8d 81       	ldd	r24, Y+5	; 0x05
    377c:	9e 81       	ldd	r25, Y+6	; 0x06
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	69 f7       	brne	.-38     	; 0x375c <LCD_sendCommand+0x83c>
    3782:	14 c0       	rjmp	.+40     	; 0x37ac <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3784:	6f 81       	ldd	r22, Y+7	; 0x07
    3786:	78 85       	ldd	r23, Y+8	; 0x08
    3788:	89 85       	ldd	r24, Y+9	; 0x09
    378a:	9a 85       	ldd	r25, Y+10	; 0x0a
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9e 83       	std	Y+6, r25	; 0x06
    3796:	8d 83       	std	Y+5, r24	; 0x05
    3798:	8d 81       	ldd	r24, Y+5	; 0x05
    379a:	9e 81       	ldd	r25, Y+6	; 0x06
    379c:	9a 83       	std	Y+2, r25	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <LCD_sendCommand+0x884>
    37a8:	9a 83       	std	Y+2, r25	; 0x02
    37aa:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    37ac:	cd 59       	subi	r28, 0x9D	; 157
    37ae:	df 4f       	sbci	r29, 0xFF	; 255
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    37c2:	08 95       	ret

000037c4 <LCD_displayCharacter>:
 * @param[in]  a_data     Type uint8     Range 0x00:0xFF
 * @return none
 */

void LCD_displayCharacter(uint8 a_data)
{
    37c4:	0f 93       	push	r16
    37c6:	1f 93       	push	r17
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	c3 56       	subi	r28, 0x63	; 99
    37d2:	d0 40       	sbci	r29, 0x00	; 0
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	fe 01       	movw	r30, r28
    37e0:	ed 59       	subi	r30, 0x9D	; 157
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    37e6:	83 e0       	ldi	r24, 0x03	; 3
    37e8:	62 e0       	ldi	r22, 0x02	; 2
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    37f0:	fe 01       	movw	r30, r28
    37f2:	e1 5a       	subi	r30, 0xA1	; 161
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	a0 e8       	ldi	r26, 0x80	; 128
    37fc:	bf e3       	ldi	r27, 0x3F	; 63
    37fe:	80 83       	st	Z, r24
    3800:	91 83       	std	Z+1, r25	; 0x01
    3802:	a2 83       	std	Z+2, r26	; 0x02
    3804:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3806:	8e 01       	movw	r16, r28
    3808:	05 5a       	subi	r16, 0xA5	; 165
    380a:	1f 4f       	sbci	r17, 0xFF	; 255
    380c:	fe 01       	movw	r30, r28
    380e:	e1 5a       	subi	r30, 0xA1	; 161
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	60 81       	ld	r22, Z
    3814:	71 81       	ldd	r23, Z+1	; 0x01
    3816:	82 81       	ldd	r24, Z+2	; 0x02
    3818:	93 81       	ldd	r25, Z+3	; 0x03
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	4a ef       	ldi	r20, 0xFA	; 250
    3820:	54 e4       	ldi	r21, 0x44	; 68
    3822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	f8 01       	movw	r30, r16
    382c:	80 83       	st	Z, r24
    382e:	91 83       	std	Z+1, r25	; 0x01
    3830:	a2 83       	std	Z+2, r26	; 0x02
    3832:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3834:	fe 01       	movw	r30, r28
    3836:	e5 5a       	subi	r30, 0xA5	; 165
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	60 81       	ld	r22, Z
    383c:	71 81       	ldd	r23, Z+1	; 0x01
    383e:	82 81       	ldd	r24, Z+2	; 0x02
    3840:	93 81       	ldd	r25, Z+3	; 0x03
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	40 e8       	ldi	r20, 0x80	; 128
    3848:	5f e3       	ldi	r21, 0x3F	; 63
    384a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    384e:	88 23       	and	r24, r24
    3850:	44 f4       	brge	.+16     	; 0x3862 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3852:	fe 01       	movw	r30, r28
    3854:	e7 5a       	subi	r30, 0xA7	; 167
    3856:	ff 4f       	sbci	r31, 0xFF	; 255
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	80 83       	st	Z, r24
    3860:	64 c0       	rjmp	.+200    	; 0x392a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3862:	fe 01       	movw	r30, r28
    3864:	e5 5a       	subi	r30, 0xA5	; 165
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	60 81       	ld	r22, Z
    386a:	71 81       	ldd	r23, Z+1	; 0x01
    386c:	82 81       	ldd	r24, Z+2	; 0x02
    386e:	93 81       	ldd	r25, Z+3	; 0x03
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	4f e7       	ldi	r20, 0x7F	; 127
    3876:	57 e4       	ldi	r21, 0x47	; 71
    3878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    387c:	18 16       	cp	r1, r24
    387e:	0c f0       	brlt	.+2      	; 0x3882 <LCD_displayCharacter+0xbe>
    3880:	43 c0       	rjmp	.+134    	; 0x3908 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3882:	fe 01       	movw	r30, r28
    3884:	e1 5a       	subi	r30, 0xA1	; 161
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	60 81       	ld	r22, Z
    388a:	71 81       	ldd	r23, Z+1	; 0x01
    388c:	82 81       	ldd	r24, Z+2	; 0x02
    388e:	93 81       	ldd	r25, Z+3	; 0x03
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e2       	ldi	r20, 0x20	; 32
    3896:	51 e4       	ldi	r21, 0x41	; 65
    3898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	8e 01       	movw	r16, r28
    38a2:	07 5a       	subi	r16, 0xA7	; 167
    38a4:	1f 4f       	sbci	r17, 0xFF	; 255
    38a6:	bc 01       	movw	r22, r24
    38a8:	cd 01       	movw	r24, r26
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	f8 01       	movw	r30, r16
    38b4:	91 83       	std	Z+1, r25	; 0x01
    38b6:	80 83       	st	Z, r24
    38b8:	1f c0       	rjmp	.+62     	; 0x38f8 <LCD_displayCharacter+0x134>
    38ba:	fe 01       	movw	r30, r28
    38bc:	e9 5a       	subi	r30, 0xA9	; 169
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	88 ec       	ldi	r24, 0xC8	; 200
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
    38c8:	fe 01       	movw	r30, r28
    38ca:	e9 5a       	subi	r30, 0xA9	; 169
    38cc:	ff 4f       	sbci	r31, 0xFF	; 255
    38ce:	80 81       	ld	r24, Z
    38d0:	91 81       	ldd	r25, Z+1	; 0x01
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	f1 f7       	brne	.-4      	; 0x38d2 <LCD_displayCharacter+0x10e>
    38d6:	fe 01       	movw	r30, r28
    38d8:	e9 5a       	subi	r30, 0xA9	; 169
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e0:	de 01       	movw	r26, r28
    38e2:	a7 5a       	subi	r26, 0xA7	; 167
    38e4:	bf 4f       	sbci	r27, 0xFF	; 255
    38e6:	fe 01       	movw	r30, r28
    38e8:	e7 5a       	subi	r30, 0xA7	; 167
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	11 96       	adiw	r26, 0x01	; 1
    38f4:	9c 93       	st	X, r25
    38f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f8:	fe 01       	movw	r30, r28
    38fa:	e7 5a       	subi	r30, 0xA7	; 167
    38fc:	ff 4f       	sbci	r31, 0xFF	; 255
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	00 97       	sbiw	r24, 0x00	; 0
    3904:	d1 f6       	brne	.-76     	; 0x38ba <LCD_displayCharacter+0xf6>
    3906:	27 c0       	rjmp	.+78     	; 0x3956 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3908:	8e 01       	movw	r16, r28
    390a:	07 5a       	subi	r16, 0xA7	; 167
    390c:	1f 4f       	sbci	r17, 0xFF	; 255
    390e:	fe 01       	movw	r30, r28
    3910:	e5 5a       	subi	r30, 0xA5	; 165
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	60 81       	ld	r22, Z
    3916:	71 81       	ldd	r23, Z+1	; 0x01
    3918:	82 81       	ldd	r24, Z+2	; 0x02
    391a:	93 81       	ldd	r25, Z+3	; 0x03
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	f8 01       	movw	r30, r16
    3926:	91 83       	std	Z+1, r25	; 0x01
    3928:	80 83       	st	Z, r24
    392a:	de 01       	movw	r26, r28
    392c:	ab 5a       	subi	r26, 0xAB	; 171
    392e:	bf 4f       	sbci	r27, 0xFF	; 255
    3930:	fe 01       	movw	r30, r28
    3932:	e7 5a       	subi	r30, 0xA7	; 167
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	80 81       	ld	r24, Z
    3938:	91 81       	ldd	r25, Z+1	; 0x01
    393a:	8d 93       	st	X+, r24
    393c:	9c 93       	st	X, r25
    393e:	fe 01       	movw	r30, r28
    3940:	eb 5a       	subi	r30, 0xAB	; 171
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 81       	ld	r24, Z
    3946:	91 81       	ldd	r25, Z+1	; 0x01
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	f1 f7       	brne	.-4      	; 0x3948 <LCD_displayCharacter+0x184>
    394c:	fe 01       	movw	r30, r28
    394e:	eb 5a       	subi	r30, 0xAB	; 171
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3956:	83 e0       	ldi	r24, 0x03	; 3
    3958:	63 e0       	ldi	r22, 0x03	; 3
    395a:	41 e0       	ldi	r20, 0x01	; 1
    395c:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    3960:	fe 01       	movw	r30, r28
    3962:	ef 5a       	subi	r30, 0xAF	; 175
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	a0 e8       	ldi	r26, 0x80	; 128
    396c:	bf e3       	ldi	r27, 0x3F	; 63
    396e:	80 83       	st	Z, r24
    3970:	91 83       	std	Z+1, r25	; 0x01
    3972:	a2 83       	std	Z+2, r26	; 0x02
    3974:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3976:	8e 01       	movw	r16, r28
    3978:	03 5b       	subi	r16, 0xB3	; 179
    397a:	1f 4f       	sbci	r17, 0xFF	; 255
    397c:	fe 01       	movw	r30, r28
    397e:	ef 5a       	subi	r30, 0xAF	; 175
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	60 81       	ld	r22, Z
    3984:	71 81       	ldd	r23, Z+1	; 0x01
    3986:	82 81       	ldd	r24, Z+2	; 0x02
    3988:	93 81       	ldd	r25, Z+3	; 0x03
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	4a ef       	ldi	r20, 0xFA	; 250
    3990:	54 e4       	ldi	r21, 0x44	; 68
    3992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	f8 01       	movw	r30, r16
    399c:	80 83       	st	Z, r24
    399e:	91 83       	std	Z+1, r25	; 0x01
    39a0:	a2 83       	std	Z+2, r26	; 0x02
    39a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39a4:	fe 01       	movw	r30, r28
    39a6:	e3 5b       	subi	r30, 0xB3	; 179
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	60 81       	ld	r22, Z
    39ac:	71 81       	ldd	r23, Z+1	; 0x01
    39ae:	82 81       	ldd	r24, Z+2	; 0x02
    39b0:	93 81       	ldd	r25, Z+3	; 0x03
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e8       	ldi	r20, 0x80	; 128
    39b8:	5f e3       	ldi	r21, 0x3F	; 63
    39ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39be:	88 23       	and	r24, r24
    39c0:	44 f4       	brge	.+16     	; 0x39d2 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    39c2:	fe 01       	movw	r30, r28
    39c4:	e5 5b       	subi	r30, 0xB5	; 181
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	91 83       	std	Z+1, r25	; 0x01
    39ce:	80 83       	st	Z, r24
    39d0:	64 c0       	rjmp	.+200    	; 0x3a9a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    39d2:	fe 01       	movw	r30, r28
    39d4:	e3 5b       	subi	r30, 0xB3	; 179
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	60 81       	ld	r22, Z
    39da:	71 81       	ldd	r23, Z+1	; 0x01
    39dc:	82 81       	ldd	r24, Z+2	; 0x02
    39de:	93 81       	ldd	r25, Z+3	; 0x03
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	3f ef       	ldi	r19, 0xFF	; 255
    39e4:	4f e7       	ldi	r20, 0x7F	; 127
    39e6:	57 e4       	ldi	r21, 0x47	; 71
    39e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ec:	18 16       	cp	r1, r24
    39ee:	0c f0       	brlt	.+2      	; 0x39f2 <LCD_displayCharacter+0x22e>
    39f0:	43 c0       	rjmp	.+134    	; 0x3a78 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f2:	fe 01       	movw	r30, r28
    39f4:	ef 5a       	subi	r30, 0xAF	; 175
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e2       	ldi	r20, 0x20	; 32
    3a06:	51 e4       	ldi	r21, 0x41	; 65
    3a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	8e 01       	movw	r16, r28
    3a12:	05 5b       	subi	r16, 0xB5	; 181
    3a14:	1f 4f       	sbci	r17, 0xFF	; 255
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	f8 01       	movw	r30, r16
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	80 83       	st	Z, r24
    3a28:	1f c0       	rjmp	.+62     	; 0x3a68 <LCD_displayCharacter+0x2a4>
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	e7 5b       	subi	r30, 0xB7	; 183
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	88 ec       	ldi	r24, 0xC8	; 200
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	91 83       	std	Z+1, r25	; 0x01
    3a36:	80 83       	st	Z, r24
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e7 5b       	subi	r30, 0xB7	; 183
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	80 81       	ld	r24, Z
    3a40:	91 81       	ldd	r25, Z+1	; 0x01
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <LCD_displayCharacter+0x27e>
    3a46:	fe 01       	movw	r30, r28
    3a48:	e7 5b       	subi	r30, 0xB7	; 183
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	91 83       	std	Z+1, r25	; 0x01
    3a4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a50:	de 01       	movw	r26, r28
    3a52:	a5 5b       	subi	r26, 0xB5	; 181
    3a54:	bf 4f       	sbci	r27, 0xFF	; 255
    3a56:	fe 01       	movw	r30, r28
    3a58:	e5 5b       	subi	r30, 0xB5	; 181
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 81       	ld	r24, Z
    3a5e:	91 81       	ldd	r25, Z+1	; 0x01
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	11 96       	adiw	r26, 0x01	; 1
    3a64:	9c 93       	st	X, r25
    3a66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a68:	fe 01       	movw	r30, r28
    3a6a:	e5 5b       	subi	r30, 0xB5	; 181
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	80 81       	ld	r24, Z
    3a70:	91 81       	ldd	r25, Z+1	; 0x01
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	d1 f6       	brne	.-76     	; 0x3a2a <LCD_displayCharacter+0x266>
    3a76:	27 c0       	rjmp	.+78     	; 0x3ac6 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	8e 01       	movw	r16, r28
    3a7a:	05 5b       	subi	r16, 0xB5	; 181
    3a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e3 5b       	subi	r30, 0xB3	; 179
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	f8 01       	movw	r30, r16
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	de 01       	movw	r26, r28
    3a9c:	a9 5b       	subi	r26, 0xB9	; 185
    3a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e5 5b       	subi	r30, 0xB5	; 181
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	91 81       	ldd	r25, Z+1	; 0x01
    3aaa:	8d 93       	st	X+, r24
    3aac:	9c 93       	st	X, r25
    3aae:	fe 01       	movw	r30, r28
    3ab0:	e9 5b       	subi	r30, 0xB9	; 185
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <LCD_displayCharacter+0x2f4>
    3abc:	fe 01       	movw	r30, r28
    3abe:	e9 5b       	subi	r30, 0xB9	; 185
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	91 83       	std	Z+1, r25	; 0x01
    3ac4:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_DATA_MODE==LCD_FOUR_BIT_DATA_MODE)
/*sending the High 4 bits First*/
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN1, GET_BIT(a_data,4));
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	ed 59       	subi	r30, 0x9D	; 157
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	80 81       	ld	r24, Z
    3ace:	82 95       	swap	r24
    3ad0:	8f 70       	andi	r24, 0x0F	; 15
    3ad2:	98 2f       	mov	r25, r24
    3ad4:	91 70       	andi	r25, 0x01	; 1
    3ad6:	83 e0       	ldi	r24, 0x03	; 3
    3ad8:	64 e0       	ldi	r22, 0x04	; 4
    3ada:	49 2f       	mov	r20, r25
    3adc:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN2, GET_BIT(a_data,5));
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	ed 59       	subi	r30, 0x9D	; 157
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	80 81       	ld	r24, Z
    3ae8:	82 95       	swap	r24
    3aea:	86 95       	lsr	r24
    3aec:	87 70       	andi	r24, 0x07	; 7
    3aee:	98 2f       	mov	r25, r24
    3af0:	91 70       	andi	r25, 0x01	; 1
    3af2:	83 e0       	ldi	r24, 0x03	; 3
    3af4:	65 e0       	ldi	r22, 0x05	; 5
    3af6:	49 2f       	mov	r20, r25
    3af8:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN3, GET_BIT(a_data,6));
    3afc:	fe 01       	movw	r30, r28
    3afe:	ed 59       	subi	r30, 0x9D	; 157
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	82 95       	swap	r24
    3b06:	86 95       	lsr	r24
    3b08:	86 95       	lsr	r24
    3b0a:	83 70       	andi	r24, 0x03	; 3
    3b0c:	98 2f       	mov	r25, r24
    3b0e:	91 70       	andi	r25, 0x01	; 1
    3b10:	83 e0       	ldi	r24, 0x03	; 3
    3b12:	66 e0       	ldi	r22, 0x06	; 6
    3b14:	49 2f       	mov	r20, r25
    3b16:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN4, GET_BIT(a_data,7));
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	ed 59       	subi	r30, 0x9D	; 157
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	80 81       	ld	r24, Z
    3b22:	98 2f       	mov	r25, r24
    3b24:	99 1f       	adc	r25, r25
    3b26:	99 27       	eor	r25, r25
    3b28:	99 1f       	adc	r25, r25
    3b2a:	83 e0       	ldi	r24, 0x03	; 3
    3b2c:	67 e0       	ldi	r22, 0x07	; 7
    3b2e:	49 2f       	mov	r20, r25
    3b30:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    3b34:	fe 01       	movw	r30, r28
    3b36:	ed 5b       	subi	r30, 0xBD	; 189
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	a0 e8       	ldi	r26, 0x80	; 128
    3b40:	bf e3       	ldi	r27, 0x3F	; 63
    3b42:	80 83       	st	Z, r24
    3b44:	91 83       	std	Z+1, r25	; 0x01
    3b46:	a2 83       	std	Z+2, r26	; 0x02
    3b48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4a:	8e 01       	movw	r16, r28
    3b4c:	01 5c       	subi	r16, 0xC1	; 193
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b50:	fe 01       	movw	r30, r28
    3b52:	ed 5b       	subi	r30, 0xBD	; 189
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	4a ef       	ldi	r20, 0xFA	; 250
    3b64:	54 e4       	ldi	r21, 0x44	; 68
    3b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	f8 01       	movw	r30, r16
    3b70:	80 83       	st	Z, r24
    3b72:	91 83       	std	Z+1, r25	; 0x01
    3b74:	a2 83       	std	Z+2, r26	; 0x02
    3b76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b78:	fe 01       	movw	r30, r28
    3b7a:	ff 96       	adiw	r30, 0x3f	; 63
    3b7c:	60 81       	ld	r22, Z
    3b7e:	71 81       	ldd	r23, Z+1	; 0x01
    3b80:	82 81       	ldd	r24, Z+2	; 0x02
    3b82:	93 81       	ldd	r25, Z+3	; 0x03
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e8       	ldi	r20, 0x80	; 128
    3b8a:	5f e3       	ldi	r21, 0x3F	; 63
    3b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b90:	88 23       	and	r24, r24
    3b92:	2c f4       	brge	.+10     	; 0x3b9e <LCD_displayCharacter+0x3da>
		__ticks = 1;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	9e af       	std	Y+62, r25	; 0x3e
    3b9a:	8d af       	std	Y+61, r24	; 0x3d
    3b9c:	46 c0       	rjmp	.+140    	; 0x3c2a <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ff 96       	adiw	r30, 0x3f	; 63
    3ba2:	60 81       	ld	r22, Z
    3ba4:	71 81       	ldd	r23, Z+1	; 0x01
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	93 81       	ldd	r25, Z+3	; 0x03
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	3f ef       	ldi	r19, 0xFF	; 255
    3bae:	4f e7       	ldi	r20, 0x7F	; 127
    3bb0:	57 e4       	ldi	r21, 0x47	; 71
    3bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bb6:	18 16       	cp	r1, r24
    3bb8:	64 f5       	brge	.+88     	; 0x3c12 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bba:	fe 01       	movw	r30, r28
    3bbc:	ed 5b       	subi	r30, 0xBD	; 189
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	60 81       	ld	r22, Z
    3bc2:	71 81       	ldd	r23, Z+1	; 0x01
    3bc4:	82 81       	ldd	r24, Z+2	; 0x02
    3bc6:	93 81       	ldd	r25, Z+3	; 0x03
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e2       	ldi	r20, 0x20	; 32
    3bce:	51 e4       	ldi	r21, 0x41	; 65
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	bc 01       	movw	r22, r24
    3bda:	cd 01       	movw	r24, r26
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	9e af       	std	Y+62, r25	; 0x3e
    3be6:	8d af       	std	Y+61, r24	; 0x3d
    3be8:	0f c0       	rjmp	.+30     	; 0x3c08 <LCD_displayCharacter+0x444>
    3bea:	88 ec       	ldi	r24, 0xC8	; 200
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	9c af       	std	Y+60, r25	; 0x3c
    3bf0:	8b af       	std	Y+59, r24	; 0x3b
    3bf2:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bf4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	f1 f7       	brne	.-4      	; 0x3bf6 <LCD_displayCharacter+0x432>
    3bfa:	9c af       	std	Y+60, r25	; 0x3c
    3bfc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c00:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	9e af       	std	Y+62, r25	; 0x3e
    3c06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c08:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	69 f7       	brne	.-38     	; 0x3bea <LCD_displayCharacter+0x426>
    3c10:	16 c0       	rjmp	.+44     	; 0x3c3e <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c12:	fe 01       	movw	r30, r28
    3c14:	ff 96       	adiw	r30, 0x3f	; 63
    3c16:	60 81       	ld	r22, Z
    3c18:	71 81       	ldd	r23, Z+1	; 0x01
    3c1a:	82 81       	ldd	r24, Z+2	; 0x02
    3c1c:	93 81       	ldd	r25, Z+3	; 0x03
    3c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	9e af       	std	Y+62, r25	; 0x3e
    3c28:	8d af       	std	Y+61, r24	; 0x3d
    3c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c2e:	9a af       	std	Y+58, r25	; 0x3a
    3c30:	89 af       	std	Y+57, r24	; 0x39
    3c32:	89 ad       	ldd	r24, Y+57	; 0x39
    3c34:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	f1 f7       	brne	.-4      	; 0x3c36 <LCD_displayCharacter+0x472>
    3c3a:	9a af       	std	Y+58, r25	; 0x3a
    3c3c:	89 af       	std	Y+57, r24	; 0x39

/*  Then Set E=0 And ReEnable E=1 To send the Low 4 bits*/
_delay_ms(1); /* delay for processing Tdsw = 100ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3c3e:	83 e0       	ldi	r24, 0x03	; 3
    3c40:	63 e0       	ldi	r22, 0x03	; 3
    3c42:	40 e0       	ldi	r20, 0x00	; 0
    3c44:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	a0 e8       	ldi	r26, 0x80	; 128
    3c4e:	bf e3       	ldi	r27, 0x3F	; 63
    3c50:	8d ab       	std	Y+53, r24	; 0x35
    3c52:	9e ab       	std	Y+54, r25	; 0x36
    3c54:	af ab       	std	Y+55, r26	; 0x37
    3c56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c58:	6d a9       	ldd	r22, Y+53	; 0x35
    3c5a:	7e a9       	ldd	r23, Y+54	; 0x36
    3c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    3c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	4a ef       	ldi	r20, 0xFA	; 250
    3c66:	54 e4       	ldi	r21, 0x44	; 68
    3c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	89 ab       	std	Y+49, r24	; 0x31
    3c72:	9a ab       	std	Y+50, r25	; 0x32
    3c74:	ab ab       	std	Y+51, r26	; 0x33
    3c76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c78:	69 a9       	ldd	r22, Y+49	; 0x31
    3c7a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c7c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c7e:	9c a9       	ldd	r25, Y+52	; 0x34
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e8       	ldi	r20, 0x80	; 128
    3c86:	5f e3       	ldi	r21, 0x3F	; 63
    3c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c8c:	88 23       	and	r24, r24
    3c8e:	2c f4       	brge	.+10     	; 0x3c9a <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	98 ab       	std	Y+48, r25	; 0x30
    3c96:	8f a7       	std	Y+47, r24	; 0x2f
    3c98:	3f c0       	rjmp	.+126    	; 0x3d18 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    3c9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3c9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3c9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3ca0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	3f ef       	ldi	r19, 0xFF	; 255
    3ca6:	4f e7       	ldi	r20, 0x7F	; 127
    3ca8:	57 e4       	ldi	r21, 0x47	; 71
    3caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cae:	18 16       	cp	r1, r24
    3cb0:	4c f5       	brge	.+82     	; 0x3d04 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb2:	6d a9       	ldd	r22, Y+53	; 0x35
    3cb4:	7e a9       	ldd	r23, Y+54	; 0x36
    3cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    3cb8:	98 ad       	ldd	r25, Y+56	; 0x38
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e2       	ldi	r20, 0x20	; 32
    3cc0:	51 e4       	ldi	r21, 0x41	; 65
    3cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	bc 01       	movw	r22, r24
    3ccc:	cd 01       	movw	r24, r26
    3cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	98 ab       	std	Y+48, r25	; 0x30
    3cd8:	8f a7       	std	Y+47, r24	; 0x2f
    3cda:	0f c0       	rjmp	.+30     	; 0x3cfa <LCD_displayCharacter+0x536>
    3cdc:	88 ec       	ldi	r24, 0xC8	; 200
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	9e a7       	std	Y+46, r25	; 0x2e
    3ce2:	8d a7       	std	Y+45, r24	; 0x2d
    3ce4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ce6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ce8:	01 97       	sbiw	r24, 0x01	; 1
    3cea:	f1 f7       	brne	.-4      	; 0x3ce8 <LCD_displayCharacter+0x524>
    3cec:	9e a7       	std	Y+46, r25	; 0x2e
    3cee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cf2:	98 a9       	ldd	r25, Y+48	; 0x30
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	98 ab       	std	Y+48, r25	; 0x30
    3cf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cfc:	98 a9       	ldd	r25, Y+48	; 0x30
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	69 f7       	brne	.-38     	; 0x3cdc <LCD_displayCharacter+0x518>
    3d02:	14 c0       	rjmp	.+40     	; 0x3d2c <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d04:	69 a9       	ldd	r22, Y+49	; 0x31
    3d06:	7a a9       	ldd	r23, Y+50	; 0x32
    3d08:	8b a9       	ldd	r24, Y+51	; 0x33
    3d0a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	98 ab       	std	Y+48, r25	; 0x30
    3d16:	8f a7       	std	Y+47, r24	; 0x2f
    3d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3d1c:	9c a7       	std	Y+44, r25	; 0x2c
    3d1e:	8b a7       	std	Y+43, r24	; 0x2b
    3d20:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d22:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	f1 f7       	brne	.-4      	; 0x3d24 <LCD_displayCharacter+0x560>
    3d28:	9c a7       	std	Y+44, r25	; 0x2c
    3d2a:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(1); /* delay for processing Th = 13ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3d2c:	83 e0       	ldi	r24, 0x03	; 3
    3d2e:	63 e0       	ldi	r22, 0x03	; 3
    3d30:	41 e0       	ldi	r20, 0x01	; 1
    3d32:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	a0 e8       	ldi	r26, 0x80	; 128
    3d3c:	bf e3       	ldi	r27, 0x3F	; 63
    3d3e:	8f a3       	std	Y+39, r24	; 0x27
    3d40:	98 a7       	std	Y+40, r25	; 0x28
    3d42:	a9 a7       	std	Y+41, r26	; 0x29
    3d44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d46:	6f a1       	ldd	r22, Y+39	; 0x27
    3d48:	78 a5       	ldd	r23, Y+40	; 0x28
    3d4a:	89 a5       	ldd	r24, Y+41	; 0x29
    3d4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	4a ef       	ldi	r20, 0xFA	; 250
    3d54:	54 e4       	ldi	r21, 0x44	; 68
    3d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	8b a3       	std	Y+35, r24	; 0x23
    3d60:	9c a3       	std	Y+36, r25	; 0x24
    3d62:	ad a3       	std	Y+37, r26	; 0x25
    3d64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d66:	6b a1       	ldd	r22, Y+35	; 0x23
    3d68:	7c a1       	ldd	r23, Y+36	; 0x24
    3d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	40 e8       	ldi	r20, 0x80	; 128
    3d74:	5f e3       	ldi	r21, 0x3F	; 63
    3d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d7a:	88 23       	and	r24, r24
    3d7c:	2c f4       	brge	.+10     	; 0x3d88 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	9a a3       	std	Y+34, r25	; 0x22
    3d84:	89 a3       	std	Y+33, r24	; 0x21
    3d86:	3f c0       	rjmp	.+126    	; 0x3e06 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    3d88:	6b a1       	ldd	r22, Y+35	; 0x23
    3d8a:	7c a1       	ldd	r23, Y+36	; 0x24
    3d8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3d8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	3f ef       	ldi	r19, 0xFF	; 255
    3d94:	4f e7       	ldi	r20, 0x7F	; 127
    3d96:	57 e4       	ldi	r21, 0x47	; 71
    3d98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d9c:	18 16       	cp	r1, r24
    3d9e:	4c f5       	brge	.+82     	; 0x3df2 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da0:	6f a1       	ldd	r22, Y+39	; 0x27
    3da2:	78 a5       	ldd	r23, Y+40	; 0x28
    3da4:	89 a5       	ldd	r24, Y+41	; 0x29
    3da6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	40 e2       	ldi	r20, 0x20	; 32
    3dae:	51 e4       	ldi	r21, 0x41	; 65
    3db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	bc 01       	movw	r22, r24
    3dba:	cd 01       	movw	r24, r26
    3dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	9a a3       	std	Y+34, r25	; 0x22
    3dc6:	89 a3       	std	Y+33, r24	; 0x21
    3dc8:	0f c0       	rjmp	.+30     	; 0x3de8 <LCD_displayCharacter+0x624>
    3dca:	88 ec       	ldi	r24, 0xC8	; 200
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	98 a3       	std	Y+32, r25	; 0x20
    3dd0:	8f 8f       	std	Y+31, r24	; 0x1f
    3dd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dd4:	98 a1       	ldd	r25, Y+32	; 0x20
    3dd6:	01 97       	sbiw	r24, 0x01	; 1
    3dd8:	f1 f7       	brne	.-4      	; 0x3dd6 <LCD_displayCharacter+0x612>
    3dda:	98 a3       	std	Y+32, r25	; 0x20
    3ddc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dde:	89 a1       	ldd	r24, Y+33	; 0x21
    3de0:	9a a1       	ldd	r25, Y+34	; 0x22
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	9a a3       	std	Y+34, r25	; 0x22
    3de6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de8:	89 a1       	ldd	r24, Y+33	; 0x21
    3dea:	9a a1       	ldd	r25, Y+34	; 0x22
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	69 f7       	brne	.-38     	; 0x3dca <LCD_displayCharacter+0x606>
    3df0:	14 c0       	rjmp	.+40     	; 0x3e1a <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df2:	6b a1       	ldd	r22, Y+35	; 0x23
    3df4:	7c a1       	ldd	r23, Y+36	; 0x24
    3df6:	8d a1       	ldd	r24, Y+37	; 0x25
    3df8:	9e a1       	ldd	r25, Y+38	; 0x26
    3dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	9a a3       	std	Y+34, r25	; 0x22
    3e04:	89 a3       	std	Y+33, r24	; 0x21
    3e06:	89 a1       	ldd	r24, Y+33	; 0x21
    3e08:	9a a1       	ldd	r25, Y+34	; 0x22
    3e0a:	9e 8f       	std	Y+30, r25	; 0x1e
    3e0c:	8d 8f       	std	Y+29, r24	; 0x1d
    3e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e12:	01 97       	sbiw	r24, 0x01	; 1
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <LCD_displayCharacter+0x64e>
    3e16:	9e 8f       	std	Y+30, r25	; 0x1e
    3e18:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

/*sending the Low 4 bits*/
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN1, GET_BIT(a_data,0));
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	ed 59       	subi	r30, 0x9D	; 157
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	80 81       	ld	r24, Z
    3e22:	98 2f       	mov	r25, r24
    3e24:	91 70       	andi	r25, 0x01	; 1
    3e26:	83 e0       	ldi	r24, 0x03	; 3
    3e28:	64 e0       	ldi	r22, 0x04	; 4
    3e2a:	49 2f       	mov	r20, r25
    3e2c:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN2, GET_BIT(a_data,1));
    3e30:	fe 01       	movw	r30, r28
    3e32:	ed 59       	subi	r30, 0x9D	; 157
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	80 81       	ld	r24, Z
    3e38:	86 95       	lsr	r24
    3e3a:	98 2f       	mov	r25, r24
    3e3c:	91 70       	andi	r25, 0x01	; 1
    3e3e:	83 e0       	ldi	r24, 0x03	; 3
    3e40:	65 e0       	ldi	r22, 0x05	; 5
    3e42:	49 2f       	mov	r20, r25
    3e44:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN3, GET_BIT(a_data,2));
    3e48:	fe 01       	movw	r30, r28
    3e4a:	ed 59       	subi	r30, 0x9D	; 157
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	80 81       	ld	r24, Z
    3e50:	86 95       	lsr	r24
    3e52:	86 95       	lsr	r24
    3e54:	98 2f       	mov	r25, r24
    3e56:	91 70       	andi	r25, 0x01	; 1
    3e58:	83 e0       	ldi	r24, 0x03	; 3
    3e5a:	66 e0       	ldi	r22, 0x06	; 6
    3e5c:	49 2f       	mov	r20, r25
    3e5e:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(LCD_FOUR_BIT_DATA_PORT_ID, LCD_FOUR_BIT_PIN4, GET_BIT(a_data,3));
    3e62:	fe 01       	movw	r30, r28
    3e64:	ed 59       	subi	r30, 0x9D	; 157
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	80 81       	ld	r24, Z
    3e6a:	86 95       	lsr	r24
    3e6c:	86 95       	lsr	r24
    3e6e:	86 95       	lsr	r24
    3e70:	98 2f       	mov	r25, r24
    3e72:	91 70       	andi	r25, 0x01	; 1
    3e74:	83 e0       	ldi	r24, 0x03	; 3
    3e76:	67 e0       	ldi	r22, 0x07	; 7
    3e78:	49 2f       	mov	r20, r25
    3e7a:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	a0 e8       	ldi	r26, 0x80	; 128
    3e84:	bf e3       	ldi	r27, 0x3F	; 63
    3e86:	89 8f       	std	Y+25, r24	; 0x19
    3e88:	9a 8f       	std	Y+26, r25	; 0x1a
    3e8a:	ab 8f       	std	Y+27, r26	; 0x1b
    3e8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    3e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	4a ef       	ldi	r20, 0xFA	; 250
    3e9c:	54 e4       	ldi	r21, 0x44	; 68
    3e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	8d 8b       	std	Y+21, r24	; 0x15
    3ea8:	9e 8b       	std	Y+22, r25	; 0x16
    3eaa:	af 8b       	std	Y+23, r26	; 0x17
    3eac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3eae:	6d 89       	ldd	r22, Y+21	; 0x15
    3eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    3eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    3eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	40 e8       	ldi	r20, 0x80	; 128
    3ebc:	5f e3       	ldi	r21, 0x3F	; 63
    3ebe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ec2:	88 23       	and	r24, r24
    3ec4:	2c f4       	brge	.+10     	; 0x3ed0 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	9c 8b       	std	Y+20, r25	; 0x14
    3ecc:	8b 8b       	std	Y+19, r24	; 0x13
    3ece:	3f c0       	rjmp	.+126    	; 0x3f4e <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    3ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	3f ef       	ldi	r19, 0xFF	; 255
    3edc:	4f e7       	ldi	r20, 0x7F	; 127
    3ede:	57 e4       	ldi	r21, 0x47	; 71
    3ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ee4:	18 16       	cp	r1, r24
    3ee6:	4c f5       	brge	.+82     	; 0x3f3a <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    3eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e2       	ldi	r20, 0x20	; 32
    3ef6:	51 e4       	ldi	r21, 0x41	; 65
    3ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	bc 01       	movw	r22, r24
    3f02:	cd 01       	movw	r24, r26
    3f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	9c 8b       	std	Y+20, r25	; 0x14
    3f0e:	8b 8b       	std	Y+19, r24	; 0x13
    3f10:	0f c0       	rjmp	.+30     	; 0x3f30 <LCD_displayCharacter+0x76c>
    3f12:	88 ec       	ldi	r24, 0xC8	; 200
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	9a 8b       	std	Y+18, r25	; 0x12
    3f18:	89 8b       	std	Y+17, r24	; 0x11
    3f1a:	89 89       	ldd	r24, Y+17	; 0x11
    3f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f1e:	01 97       	sbiw	r24, 0x01	; 1
    3f20:	f1 f7       	brne	.-4      	; 0x3f1e <LCD_displayCharacter+0x75a>
    3f22:	9a 8b       	std	Y+18, r25	; 0x12
    3f24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f26:	8b 89       	ldd	r24, Y+19	; 0x13
    3f28:	9c 89       	ldd	r25, Y+20	; 0x14
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	9c 8b       	std	Y+20, r25	; 0x14
    3f2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f30:	8b 89       	ldd	r24, Y+19	; 0x13
    3f32:	9c 89       	ldd	r25, Y+20	; 0x14
    3f34:	00 97       	sbiw	r24, 0x00	; 0
    3f36:	69 f7       	brne	.-38     	; 0x3f12 <LCD_displayCharacter+0x74e>
    3f38:	14 c0       	rjmp	.+40     	; 0x3f62 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f40:	98 8d       	ldd	r25, Y+24	; 0x18
    3f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	9c 8b       	std	Y+20, r25	; 0x14
    3f4c:	8b 8b       	std	Y+19, r24	; 0x13
    3f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f50:	9c 89       	ldd	r25, Y+20	; 0x14
    3f52:	98 8b       	std	Y+16, r25	; 0x10
    3f54:	8f 87       	std	Y+15, r24	; 0x0f
    3f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f58:	98 89       	ldd	r25, Y+16	; 0x10
    3f5a:	01 97       	sbiw	r24, 0x01	; 1
    3f5c:	f1 f7       	brne	.-4      	; 0x3f5a <LCD_displayCharacter+0x796>
    3f5e:	98 8b       	std	Y+16, r25	; 0x10
    3f60:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(1); /* delay for processing Tdsw = 100ns */
GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3f62:	83 e0       	ldi	r24, 0x03	; 3
    3f64:	63 e0       	ldi	r22, 0x03	; 3
    3f66:	40 e0       	ldi	r20, 0x00	; 0
    3f68:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	a0 e8       	ldi	r26, 0x80	; 128
    3f72:	bf e3       	ldi	r27, 0x3F	; 63
    3f74:	8b 87       	std	Y+11, r24	; 0x0b
    3f76:	9c 87       	std	Y+12, r25	; 0x0c
    3f78:	ad 87       	std	Y+13, r26	; 0x0d
    3f7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	4a ef       	ldi	r20, 0xFA	; 250
    3f8a:	54 e4       	ldi	r21, 0x44	; 68
    3f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	8f 83       	std	Y+7, r24	; 0x07
    3f96:	98 87       	std	Y+8, r25	; 0x08
    3f98:	a9 87       	std	Y+9, r26	; 0x09
    3f9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f9e:	78 85       	ldd	r23, Y+8	; 0x08
    3fa0:	89 85       	ldd	r24, Y+9	; 0x09
    3fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	40 e8       	ldi	r20, 0x80	; 128
    3faa:	5f e3       	ldi	r21, 0x3F	; 63
    3fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fb0:	88 23       	and	r24, r24
    3fb2:	2c f4       	brge	.+10     	; 0x3fbe <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	9e 83       	std	Y+6, r25	; 0x06
    3fba:	8d 83       	std	Y+5, r24	; 0x05
    3fbc:	3f c0       	rjmp	.+126    	; 0x403c <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    3fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc0:	78 85       	ldd	r23, Y+8	; 0x08
    3fc2:	89 85       	ldd	r24, Y+9	; 0x09
    3fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	3f ef       	ldi	r19, 0xFF	; 255
    3fca:	4f e7       	ldi	r20, 0x7F	; 127
    3fcc:	57 e4       	ldi	r21, 0x47	; 71
    3fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fd2:	18 16       	cp	r1, r24
    3fd4:	4c f5       	brge	.+82     	; 0x4028 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	40 e2       	ldi	r20, 0x20	; 32
    3fe4:	51 e4       	ldi	r21, 0x41	; 65
    3fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	bc 01       	movw	r22, r24
    3ff0:	cd 01       	movw	r24, r26
    3ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	9e 83       	std	Y+6, r25	; 0x06
    3ffc:	8d 83       	std	Y+5, r24	; 0x05
    3ffe:	0f c0       	rjmp	.+30     	; 0x401e <LCD_displayCharacter+0x85a>
    4000:	88 ec       	ldi	r24, 0xC8	; 200
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	9c 83       	std	Y+4, r25	; 0x04
    4006:	8b 83       	std	Y+3, r24	; 0x03
    4008:	8b 81       	ldd	r24, Y+3	; 0x03
    400a:	9c 81       	ldd	r25, Y+4	; 0x04
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	f1 f7       	brne	.-4      	; 0x400c <LCD_displayCharacter+0x848>
    4010:	9c 83       	std	Y+4, r25	; 0x04
    4012:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4014:	8d 81       	ldd	r24, Y+5	; 0x05
    4016:	9e 81       	ldd	r25, Y+6	; 0x06
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	9e 83       	std	Y+6, r25	; 0x06
    401c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    401e:	8d 81       	ldd	r24, Y+5	; 0x05
    4020:	9e 81       	ldd	r25, Y+6	; 0x06
    4022:	00 97       	sbiw	r24, 0x00	; 0
    4024:	69 f7       	brne	.-38     	; 0x4000 <LCD_displayCharacter+0x83c>
    4026:	14 c0       	rjmp	.+40     	; 0x4050 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4028:	6f 81       	ldd	r22, Y+7	; 0x07
    402a:	78 85       	ldd	r23, Y+8	; 0x08
    402c:	89 85       	ldd	r24, Y+9	; 0x09
    402e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	8d 83       	std	Y+5, r24	; 0x05
    403c:	8d 81       	ldd	r24, Y+5	; 0x05
    403e:	9e 81       	ldd	r25, Y+6	; 0x06
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	89 83       	std	Y+1, r24	; 0x01
    4044:	89 81       	ldd	r24, Y+1	; 0x01
    4046:	9a 81       	ldd	r25, Y+2	; 0x02
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	f1 f7       	brne	.-4      	; 0x4048 <LCD_displayCharacter+0x884>
    404c:	9a 83       	std	Y+2, r25	; 0x02
    404e:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    4050:	cd 59       	subi	r28, 0x9D	; 157
    4052:	df 4f       	sbci	r29, 0xFF	; 255
    4054:	0f b6       	in	r0, 0x3f	; 63
    4056:	f8 94       	cli
    4058:	de bf       	out	0x3e, r29	; 62
    405a:	0f be       	out	0x3f, r0	; 63
    405c:	cd bf       	out	0x3d, r28	; 61
    405e:	cf 91       	pop	r28
    4060:	df 91       	pop	r29
    4062:	1f 91       	pop	r17
    4064:	0f 91       	pop	r16
    4066:	08 95       	ret

00004068 <LCD_displayString>:
 * @param[in]  string     Type uint8 *
 * @return none
 */

void LCD_displayString(const char * string)
{
    4068:	df 93       	push	r29
    406a:	cf 93       	push	r28
    406c:	00 d0       	rcall	.+0      	; 0x406e <LCD_displayString+0x6>
    406e:	0f 92       	push	r0
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	9b 83       	std	Y+3, r25	; 0x03
    4076:	8a 83       	std	Y+2, r24	; 0x02
uint8 i=0;
    4078:	19 82       	std	Y+1, r1	; 0x01
    407a:	0e c0       	rjmp	.+28     	; 0x4098 <LCD_displayString+0x30>
while(string[i]!='\0')
{
	LCD_displayCharacter(string[i]);
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	28 2f       	mov	r18, r24
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	8a 81       	ldd	r24, Y+2	; 0x02
    4084:	9b 81       	ldd	r25, Y+3	; 0x03
    4086:	fc 01       	movw	r30, r24
    4088:	e2 0f       	add	r30, r18
    408a:	f3 1f       	adc	r31, r19
    408c:	80 81       	ld	r24, Z
    408e:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <LCD_displayCharacter>
	i++;
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	8f 5f       	subi	r24, 0xFF	; 255
    4096:	89 83       	std	Y+1, r24	; 0x01
 */

void LCD_displayString(const char * string)
{
uint8 i=0;
while(string[i]!='\0')
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	28 2f       	mov	r18, r24
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	8a 81       	ldd	r24, Y+2	; 0x02
    40a0:	9b 81       	ldd	r25, Y+3	; 0x03
    40a2:	fc 01       	movw	r30, r24
    40a4:	e2 0f       	add	r30, r18
    40a6:	f3 1f       	adc	r31, r19
    40a8:	80 81       	ld	r24, Z
    40aa:	88 23       	and	r24, r24
    40ac:	39 f7       	brne	.-50     	; 0x407c <LCD_displayString+0x14>
{
	LCD_displayCharacter(string[i]);
	i++;
}
}
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	cf 91       	pop	r28
    40b6:	df 91       	pop	r29
    40b8:	08 95       	ret

000040ba <LCD_moveCursor>:
 * @param[in]  row     Type uint8     Range 0x00:0x0F
 * @param[in]  column  Type uint8     Range 0x00:0x01
 * @return none
 */
void LCD_moveCursor(uint8 row ,uint8 column)
{
    40ba:	df 93       	push	r29
    40bc:	cf 93       	push	r28
    40be:	00 d0       	rcall	.+0      	; 0x40c0 <LCD_moveCursor+0x6>
    40c0:	00 d0       	rcall	.+0      	; 0x40c2 <LCD_moveCursor+0x8>
    40c2:	0f 92       	push	r0
    40c4:	cd b7       	in	r28, 0x3d	; 61
    40c6:	de b7       	in	r29, 0x3e	; 62
    40c8:	8a 83       	std	Y+2, r24	; 0x02
    40ca:	6b 83       	std	Y+3, r22	; 0x03

uint8 Cursor_address=0;
    40cc:	19 82       	std	Y+1, r1	; 0x01
switch(row)
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	28 2f       	mov	r18, r24
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	3d 83       	std	Y+5, r19	; 0x05
    40d6:	2c 83       	std	Y+4, r18	; 0x04
    40d8:	8c 81       	ldd	r24, Y+4	; 0x04
    40da:	9d 81       	ldd	r25, Y+5	; 0x05
    40dc:	81 30       	cpi	r24, 0x01	; 1
    40de:	91 05       	cpc	r25, r1
    40e0:	c1 f0       	breq	.+48     	; 0x4112 <LCD_moveCursor+0x58>
    40e2:	2c 81       	ldd	r18, Y+4	; 0x04
    40e4:	3d 81       	ldd	r19, Y+5	; 0x05
    40e6:	22 30       	cpi	r18, 0x02	; 2
    40e8:	31 05       	cpc	r19, r1
    40ea:	2c f4       	brge	.+10     	; 0x40f6 <LCD_moveCursor+0x3c>
    40ec:	8c 81       	ldd	r24, Y+4	; 0x04
    40ee:	9d 81       	ldd	r25, Y+5	; 0x05
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	61 f0       	breq	.+24     	; 0x410c <LCD_moveCursor+0x52>
    40f4:	19 c0       	rjmp	.+50     	; 0x4128 <LCD_moveCursor+0x6e>
    40f6:	2c 81       	ldd	r18, Y+4	; 0x04
    40f8:	3d 81       	ldd	r19, Y+5	; 0x05
    40fa:	22 30       	cpi	r18, 0x02	; 2
    40fc:	31 05       	cpc	r19, r1
    40fe:	69 f0       	breq	.+26     	; 0x411a <LCD_moveCursor+0x60>
    4100:	8c 81       	ldd	r24, Y+4	; 0x04
    4102:	9d 81       	ldd	r25, Y+5	; 0x05
    4104:	83 30       	cpi	r24, 0x03	; 3
    4106:	91 05       	cpc	r25, r1
    4108:	61 f0       	breq	.+24     	; 0x4122 <LCD_moveCursor+0x68>
    410a:	0e c0       	rjmp	.+28     	; 0x4128 <LCD_moveCursor+0x6e>
{
case 0:
	Cursor_address=column;  		/* Case being in the row 0 address start with 0x00 */
    410c:	8b 81       	ldd	r24, Y+3	; 0x03
    410e:	89 83       	std	Y+1, r24	; 0x01
    4110:	0b c0       	rjmp	.+22     	; 0x4128 <LCD_moveCursor+0x6e>
	break;
case 1:
	Cursor_address=column+0x40;		/* Case being in the row 1 address start with 0x40 */
    4112:	8b 81       	ldd	r24, Y+3	; 0x03
    4114:	80 5c       	subi	r24, 0xC0	; 192
    4116:	89 83       	std	Y+1, r24	; 0x01
    4118:	07 c0       	rjmp	.+14     	; 0x4128 <LCD_moveCursor+0x6e>
	break;
case 2:
	Cursor_address=column+0x10;		/* Case being in the row 2 address start with 0x10 */
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	80 5f       	subi	r24, 0xF0	; 240
    411e:	89 83       	std	Y+1, r24	; 0x01
    4120:	03 c0       	rjmp	.+6      	; 0x4128 <LCD_moveCursor+0x6e>
	break;
case 3:
	Cursor_address=column+0x50;		/* Case being in the row 3 address start with 0x50 */
    4122:	8b 81       	ldd	r24, Y+3	; 0x03
    4124:	80 5b       	subi	r24, 0xB0	; 176
    4126:	89 83       	std	Y+1, r24	; 0x01
default:
	/* Wrong Input*/
	break;
}
/* Move the Cursor to a Specific place */
LCD_sendCommand(Cursor_address | LCD_SET_CURSOR_LOCATION);
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	80 68       	ori	r24, 0x80	; 128
    412c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <LCD_sendCommand>
}
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	cf 91       	pop	r28
    413c:	df 91       	pop	r29
    413e:	08 95       	ret

00004140 <LCD_displayStringRowColumn>:
 * @param[in]  string     Type uint8 *
 * @return none
 */

void LCD_displayStringRowColumn(uint8 row, uint8 column, const char *str)
{
    4140:	df 93       	push	r29
    4142:	cf 93       	push	r28
    4144:	00 d0       	rcall	.+0      	; 0x4146 <LCD_displayStringRowColumn+0x6>
    4146:	00 d0       	rcall	.+0      	; 0x4148 <LCD_displayStringRowColumn+0x8>
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    414c:	89 83       	std	Y+1, r24	; 0x01
    414e:	6a 83       	std	Y+2, r22	; 0x02
    4150:	5c 83       	std	Y+4, r21	; 0x04
    4152:	4b 83       	std	Y+3, r20	; 0x03
	/* Move the Cursor to a Specific place */
	LCD_moveCursor(row,column);
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	6a 81       	ldd	r22, Y+2	; 0x02
    4158:	0e 94 5d 20 	call	0x40ba	; 0x40ba <LCD_moveCursor>
	/* Display the send String */
	LCD_displayString(str);
    415c:	8b 81       	ldd	r24, Y+3	; 0x03
    415e:	9c 81       	ldd	r25, Y+4	; 0x04
    4160:	0e 94 34 20 	call	0x4068	; 0x4068 <LCD_displayString>
}
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	cf 91       	pop	r28
    416e:	df 91       	pop	r29
    4170:	08 95       	ret

00004172 <LCD_clearScreen>:
 * @param[in]  none
 * @return none
 */

void LCD_clearScreen(void)
{
    4172:	df 93       	push	r29
    4174:	cf 93       	push	r28
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <LCD_sendCommand>
}
    4180:	cf 91       	pop	r28
    4182:	df 91       	pop	r29
    4184:	08 95       	ret

00004186 <LCD_intgerToString>:
 *
 * @param[in]  none
 * @return none
 */
void LCD_intgerToString(int data)
{
    4186:	df 93       	push	r29
    4188:	cf 93       	push	r28
    418a:	cd b7       	in	r28, 0x3d	; 61
    418c:	de b7       	in	r29, 0x3e	; 62
    418e:	62 97       	sbiw	r28, 0x12	; 18
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	f8 94       	cli
    4194:	de bf       	out	0x3e, r29	; 62
    4196:	0f be       	out	0x3f, r0	; 63
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	9a 8b       	std	Y+18, r25	; 0x12
    419c:	89 8b       	std	Y+17, r24	; 0x11
char buff[16];
/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
itoa(data,buff,10);
    419e:	89 89       	ldd	r24, Y+17	; 0x11
    41a0:	9a 89       	ldd	r25, Y+18	; 0x12
    41a2:	9e 01       	movw	r18, r28
    41a4:	2f 5f       	subi	r18, 0xFF	; 255
    41a6:	3f 4f       	sbci	r19, 0xFF	; 255
    41a8:	b9 01       	movw	r22, r18
    41aa:	4a e0       	ldi	r20, 0x0A	; 10
    41ac:	50 e0       	ldi	r21, 0x00	; 0
    41ae:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <itoa>
/* Display the String */
LCD_displayString(buff);
    41b2:	ce 01       	movw	r24, r28
    41b4:	01 96       	adiw	r24, 0x01	; 1
    41b6:	0e 94 34 20 	call	0x4068	; 0x4068 <LCD_displayString>
}
    41ba:	62 96       	adiw	r28, 0x12	; 18
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	f8 94       	cli
    41c0:	de bf       	out	0x3e, r29	; 62
    41c2:	0f be       	out	0x3f, r0	; 63
    41c4:	cd bf       	out	0x3d, r28	; 61
    41c6:	cf 91       	pop	r28
    41c8:	df 91       	pop	r29
    41ca:	08 95       	ret

000041cc <KEYPAD_init>:
	 * @param[in]   none
	 * @param[out]  none
	 * @return none
	 */
void KEYPAD_init(void)
{
    41cc:	df 93       	push	r29
    41ce:	cf 93       	push	r28
    41d0:	cd b7       	in	r28, 0x3d	; 61
    41d2:	de b7       	in	r29, 0x3e	; 62
/* Setting up the direction of Row pins as Output */
GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,   PIN_OUTPUT);
    41d4:	80 e0       	ldi	r24, 0x00	; 0
    41d6:	60 e0       	ldi	r22, 0x00	; 0
    41d8:	41 e0       	ldi	r20, 0x01	; 1
    41da:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    41de:	80 e0       	ldi	r24, 0x00	; 0
    41e0:	61 e0       	ldi	r22, 0x01	; 1
    41e2:	41 e0       	ldi	r20, 0x01	; 1
    41e4:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	62 e0       	ldi	r22, 0x02	; 2
    41ec:	41 e0       	ldi	r20, 0x01	; 1
    41ee:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	63 e0       	ldi	r22, 0x03	; 3
    41f6:	41 e0       	ldi	r20, 0x01	; 1
    41f8:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>

/* Setting up the direction of Column pins as Input */
GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	64 e0       	ldi	r22, 0x04	; 4
    4200:	40 e0       	ldi	r20, 0x00	; 0
    4202:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	65 e0       	ldi	r22, 0x05	; 5
    420a:	40 e0       	ldi	r20, 0x00	; 0
    420c:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	66 e0       	ldi	r22, 0x06	; 6
    4214:	40 e0       	ldi	r20, 0x00	; 0
    4216:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
#if(KEYPAD_COL_NUM == 4)
GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	67 e0       	ldi	r22, 0x07	; 7
    421e:	40 e0       	ldi	r20, 0x00	; 0
    4220:	0e 94 a4 13 	call	0x2748	; 0x2748 <GPIO_setupPinDirection>
#endif

GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, LOGIC_HIGH);
    4224:	80 e0       	ldi	r24, 0x00	; 0
    4226:	64 e0       	ldi	r22, 0x04	; 4
    4228:	41 e0       	ldi	r20, 0x01	; 1
    422a:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, LOGIC_HIGH);
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	65 e0       	ldi	r22, 0x05	; 5
    4232:	41 e0       	ldi	r20, 0x01	; 1
    4234:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, LOGIC_HIGH);
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	66 e0       	ldi	r22, 0x06	; 6
    423c:	41 e0       	ldi	r20, 0x01	; 1
    423e:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, LOGIC_HIGH);
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	67 e0       	ldi	r22, 0x07	; 7
    4246:	41 e0       	ldi	r20, 0x01	; 1
    4248:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>

/* Initilailzing the Row with initiale value which indicate no Button is Pressed  */
GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	60 e0       	ldi	r22, 0x00	; 0
    4250:	41 e0       	ldi	r20, 0x01	; 1
    4252:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	61 e0       	ldi	r22, 0x01	; 1
    425a:	41 e0       	ldi	r20, 0x01	; 1
    425c:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	62 e0       	ldi	r22, 0x02	; 2
    4264:	41 e0       	ldi	r20, 0x01	; 1
    4266:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	63 e0       	ldi	r22, 0x03	; 3
    426e:	41 e0       	ldi	r20, 0x01	; 1
    4270:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
}
    4274:	cf 91       	pop	r28
    4276:	df 91       	pop	r29
    4278:	08 95       	ret

0000427a <KEYPAD_getPressedKey>:
  * @param[in]   none
  * @param[out]  none
  * @return uint8
  */
uint8 KEYPAD_getPressedKey(void)
{
    427a:	df 93       	push	r29
    427c:	cf 93       	push	r28
    427e:	cd b7       	in	r28, 0x3d	; 61
    4280:	de b7       	in	r29, 0x3e	; 62
    4282:	61 97       	sbiw	r28, 0x11	; 17
    4284:	0f b6       	in	r0, 0x3f	; 63
    4286:	f8 94       	cli
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	0f be       	out	0x3f, r0	; 63
    428c:	cd bf       	out	0x3d, r28	; 61
uint8 col,row,key=50;
    428e:	82 e3       	ldi	r24, 0x32	; 50
    4290:	8f 87       	std	Y+15, r24	; 0x0f
/* Enable only one Row at atime and loop on the rows*/
for(row=0;row<KEYPAD_ROW_NUM;row++)
    4292:	18 8a       	std	Y+16, r1	; 0x10
    4294:	9f c0       	rjmp	.+318    	; 0x43d4 <KEYPAD_getPressedKey+0x15a>
{
	/* Enabling the Row */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	68 89       	ldd	r22, Y+16	; 0x10
    429a:	40 e0       	ldi	r20, 0x00	; 0
    429c:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
	/* Looping on the columns to see if any of them detect a Button Pressed */
	for(col=0;col<KEYPAD_COL_NUM;col++)
    42a0:	19 8a       	std	Y+17, r1	; 0x11
    42a2:	1b c0       	rjmp	.+54     	; 0x42da <KEYPAD_getPressedKey+0x60>
	{
		if(GPIO_readPin(KEYPAD_COL_PORT_ID, (KEYPAD_FIRST_COL_PIN_ID + col))== KEYPAD_BUTTON_PRESSED)
    42a4:	89 89       	ldd	r24, Y+17	; 0x11
    42a6:	98 2f       	mov	r25, r24
    42a8:	9c 5f       	subi	r25, 0xFC	; 252
    42aa:	80 e0       	ldi	r24, 0x00	; 0
    42ac:	69 2f       	mov	r22, r25
    42ae:	0e 94 89 15 	call	0x2b12	; 0x2b12 <GPIO_readPin>
    42b2:	88 23       	and	r24, r24
    42b4:	79 f4       	brne	.+30     	; 0x42d4 <KEYPAD_getPressedKey+0x5a>
						#endif
#elif (KEYPAD_COL_NUM == 4)
						#ifdef STANDARD_KEYPAD
							key = ((row * KEYPAD_COL_NUM)+col+1);
						#else
							key =  KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_COL_NUM)+col+1);
    42b6:	88 89       	ldd	r24, Y+16	; 0x10
    42b8:	88 2f       	mov	r24, r24
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	88 0f       	add	r24, r24
    42be:	99 1f       	adc	r25, r25
    42c0:	88 0f       	add	r24, r24
    42c2:	99 1f       	adc	r25, r25
    42c4:	98 2f       	mov	r25, r24
    42c6:	89 89       	ldd	r24, Y+17	; 0x11
    42c8:	89 0f       	add	r24, r25
    42ca:	8f 5f       	subi	r24, 0xFF	; 255
    42cc:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <KEYPAD_4x4_adjustKeyNumber>
    42d0:	8f 87       	std	Y+15, r24	; 0x0f
    42d2:	06 c0       	rjmp	.+12     	; 0x42e0 <KEYPAD_getPressedKey+0x66>
for(row=0;row<KEYPAD_ROW_NUM;row++)
{
	/* Enabling the Row */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
	/* Looping on the columns to see if any of them detect a Button Pressed */
	for(col=0;col<KEYPAD_COL_NUM;col++)
    42d4:	89 89       	ldd	r24, Y+17	; 0x11
    42d6:	8f 5f       	subi	r24, 0xFF	; 255
    42d8:	89 8b       	std	Y+17, r24	; 0x11
    42da:	89 89       	ldd	r24, Y+17	; 0x11
    42dc:	84 30       	cpi	r24, 0x04	; 4
    42de:	10 f3       	brcs	.-60     	; 0x42a4 <KEYPAD_getPressedKey+0x2a>
						#endif
#endif
							break;
		}
	}
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	68 89       	ldd	r22, Y+16	; 0x10
    42e4:	41 e0       	ldi	r20, 0x01	; 1
    42e6:	0e 94 9e 14 	call	0x293c	; 0x293c <GPIO_writePin>
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	a0 ea       	ldi	r26, 0xA0	; 160
    42f0:	b0 e4       	ldi	r27, 0x40	; 64
    42f2:	8b 87       	std	Y+11, r24	; 0x0b
    42f4:	9c 87       	std	Y+12, r25	; 0x0c
    42f6:	ad 87       	std	Y+13, r26	; 0x0d
    42f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    42fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    42fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4300:	9e 85       	ldd	r25, Y+14	; 0x0e
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	4a ef       	ldi	r20, 0xFA	; 250
    4308:	54 e4       	ldi	r21, 0x44	; 68
    430a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	8f 83       	std	Y+7, r24	; 0x07
    4314:	98 87       	std	Y+8, r25	; 0x08
    4316:	a9 87       	std	Y+9, r26	; 0x09
    4318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    431a:	6f 81       	ldd	r22, Y+7	; 0x07
    431c:	78 85       	ldd	r23, Y+8	; 0x08
    431e:	89 85       	ldd	r24, Y+9	; 0x09
    4320:	9a 85       	ldd	r25, Y+10	; 0x0a
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	40 e8       	ldi	r20, 0x80	; 128
    4328:	5f e3       	ldi	r21, 0x3F	; 63
    432a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    432e:	88 23       	and	r24, r24
    4330:	2c f4       	brge	.+10     	; 0x433c <KEYPAD_getPressedKey+0xc2>
		__ticks = 1;
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	9e 83       	std	Y+6, r25	; 0x06
    4338:	8d 83       	std	Y+5, r24	; 0x05
    433a:	3f c0       	rjmp	.+126    	; 0x43ba <KEYPAD_getPressedKey+0x140>
	else if (__tmp > 65535)
    433c:	6f 81       	ldd	r22, Y+7	; 0x07
    433e:	78 85       	ldd	r23, Y+8	; 0x08
    4340:	89 85       	ldd	r24, Y+9	; 0x09
    4342:	9a 85       	ldd	r25, Y+10	; 0x0a
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	3f ef       	ldi	r19, 0xFF	; 255
    4348:	4f e7       	ldi	r20, 0x7F	; 127
    434a:	57 e4       	ldi	r21, 0x47	; 71
    434c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4350:	18 16       	cp	r1, r24
    4352:	4c f5       	brge	.+82     	; 0x43a6 <KEYPAD_getPressedKey+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4354:	6b 85       	ldd	r22, Y+11	; 0x0b
    4356:	7c 85       	ldd	r23, Y+12	; 0x0c
    4358:	8d 85       	ldd	r24, Y+13	; 0x0d
    435a:	9e 85       	ldd	r25, Y+14	; 0x0e
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e2       	ldi	r20, 0x20	; 32
    4362:	51 e4       	ldi	r21, 0x41	; 65
    4364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4368:	dc 01       	movw	r26, r24
    436a:	cb 01       	movw	r24, r22
    436c:	bc 01       	movw	r22, r24
    436e:	cd 01       	movw	r24, r26
    4370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	9e 83       	std	Y+6, r25	; 0x06
    437a:	8d 83       	std	Y+5, r24	; 0x05
    437c:	0f c0       	rjmp	.+30     	; 0x439c <KEYPAD_getPressedKey+0x122>
    437e:	88 ec       	ldi	r24, 0xC8	; 200
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	9c 83       	std	Y+4, r25	; 0x04
    4384:	8b 83       	std	Y+3, r24	; 0x03
    4386:	8b 81       	ldd	r24, Y+3	; 0x03
    4388:	9c 81       	ldd	r25, Y+4	; 0x04
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	f1 f7       	brne	.-4      	; 0x438a <KEYPAD_getPressedKey+0x110>
    438e:	9c 83       	std	Y+4, r25	; 0x04
    4390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4392:	8d 81       	ldd	r24, Y+5	; 0x05
    4394:	9e 81       	ldd	r25, Y+6	; 0x06
    4396:	01 97       	sbiw	r24, 0x01	; 1
    4398:	9e 83       	std	Y+6, r25	; 0x06
    439a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439c:	8d 81       	ldd	r24, Y+5	; 0x05
    439e:	9e 81       	ldd	r25, Y+6	; 0x06
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	69 f7       	brne	.-38     	; 0x437e <KEYPAD_getPressedKey+0x104>
    43a4:	14 c0       	rjmp	.+40     	; 0x43ce <KEYPAD_getPressedKey+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a6:	6f 81       	ldd	r22, Y+7	; 0x07
    43a8:	78 85       	ldd	r23, Y+8	; 0x08
    43aa:	89 85       	ldd	r24, Y+9	; 0x09
    43ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	9e 83       	std	Y+6, r25	; 0x06
    43b8:	8d 83       	std	Y+5, r24	; 0x05
    43ba:	8d 81       	ldd	r24, Y+5	; 0x05
    43bc:	9e 81       	ldd	r25, Y+6	; 0x06
    43be:	9a 83       	std	Y+2, r25	; 0x02
    43c0:	89 83       	std	Y+1, r24	; 0x01
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
    43c4:	9a 81       	ldd	r25, Y+2	; 0x02
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <KEYPAD_getPressedKey+0x14c>
    43ca:	9a 83       	std	Y+2, r25	; 0x02
    43cc:	89 83       	std	Y+1, r24	; 0x01
  */
uint8 KEYPAD_getPressedKey(void)
{
uint8 col,row,key=50;
/* Enable only one Row at atime and loop on the rows*/
for(row=0;row<KEYPAD_ROW_NUM;row++)
    43ce:	88 89       	ldd	r24, Y+16	; 0x10
    43d0:	8f 5f       	subi	r24, 0xFF	; 255
    43d2:	88 8b       	std	Y+16, r24	; 0x10
    43d4:	88 89       	ldd	r24, Y+16	; 0x10
    43d6:	84 30       	cpi	r24, 0x04	; 4
    43d8:	08 f4       	brcc	.+2      	; 0x43dc <KEYPAD_getPressedKey+0x162>
    43da:	5d cf       	rjmp	.-326    	; 0x4296 <KEYPAD_getPressedKey+0x1c>
	}
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
	_delay_ms(5);

}
return key;
    43dc:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    43de:	61 96       	adiw	r28, 0x11	; 17
    43e0:	0f b6       	in	r0, 0x3f	; 63
    43e2:	f8 94       	cli
    43e4:	de bf       	out	0x3e, r29	; 62
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	cd bf       	out	0x3d, r28	; 61
    43ea:	cf 91       	pop	r28
    43ec:	df 91       	pop	r29
    43ee:	08 95       	ret

000043f0 <KEYPAD_4x4_adjustKeyNumber>:
		}
	return keypad_button;
}
#elif (KEYPAD_COL_NUM == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 Key_num)
{
    43f0:	df 93       	push	r29
    43f2:	cf 93       	push	r28
    43f4:	00 d0       	rcall	.+0      	; 0x43f6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    43f6:	00 d0       	rcall	.+0      	; 0x43f8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    43fe:	19 82       	std	Y+1, r1	; 0x01
	switch(Key_num)
    4400:	8a 81       	ldd	r24, Y+2	; 0x02
    4402:	28 2f       	mov	r18, r24
    4404:	30 e0       	ldi	r19, 0x00	; 0
    4406:	3c 83       	std	Y+4, r19	; 0x04
    4408:	2b 83       	std	Y+3, r18	; 0x03
    440a:	8b 81       	ldd	r24, Y+3	; 0x03
    440c:	9c 81       	ldd	r25, Y+4	; 0x04
    440e:	88 30       	cpi	r24, 0x08	; 8
    4410:	91 05       	cpc	r25, r1
    4412:	09 f4       	brne	.+2      	; 0x4416 <KEYPAD_4x4_adjustKeyNumber+0x26>
    4414:	70 c0       	rjmp	.+224    	; 0x44f6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    4416:	2b 81       	ldd	r18, Y+3	; 0x03
    4418:	3c 81       	ldd	r19, Y+4	; 0x04
    441a:	29 30       	cpi	r18, 0x09	; 9
    441c:	31 05       	cpc	r19, r1
    441e:	5c f5       	brge	.+86     	; 0x4476 <KEYPAD_4x4_adjustKeyNumber+0x86>
    4420:	8b 81       	ldd	r24, Y+3	; 0x03
    4422:	9c 81       	ldd	r25, Y+4	; 0x04
    4424:	84 30       	cpi	r24, 0x04	; 4
    4426:	91 05       	cpc	r25, r1
    4428:	09 f4       	brne	.+2      	; 0x442c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    442a:	59 c0       	rjmp	.+178    	; 0x44de <KEYPAD_4x4_adjustKeyNumber+0xee>
    442c:	2b 81       	ldd	r18, Y+3	; 0x03
    442e:	3c 81       	ldd	r19, Y+4	; 0x04
    4430:	25 30       	cpi	r18, 0x05	; 5
    4432:	31 05       	cpc	r19, r1
    4434:	9c f4       	brge	.+38     	; 0x445c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	9c 81       	ldd	r25, Y+4	; 0x04
    443a:	82 30       	cpi	r24, 0x02	; 2
    443c:	91 05       	cpc	r25, r1
    443e:	09 f4       	brne	.+2      	; 0x4442 <KEYPAD_4x4_adjustKeyNumber+0x52>
    4440:	48 c0       	rjmp	.+144    	; 0x44d2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    4442:	2b 81       	ldd	r18, Y+3	; 0x03
    4444:	3c 81       	ldd	r19, Y+4	; 0x04
    4446:	23 30       	cpi	r18, 0x03	; 3
    4448:	31 05       	cpc	r19, r1
    444a:	0c f0       	brlt	.+2      	; 0x444e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    444c:	45 c0       	rjmp	.+138    	; 0x44d8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    444e:	8b 81       	ldd	r24, Y+3	; 0x03
    4450:	9c 81       	ldd	r25, Y+4	; 0x04
    4452:	81 30       	cpi	r24, 0x01	; 1
    4454:	91 05       	cpc	r25, r1
    4456:	09 f4       	brne	.+2      	; 0x445a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    4458:	39 c0       	rjmp	.+114    	; 0x44cc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    445a:	67 c0       	rjmp	.+206    	; 0x452a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    445c:	2b 81       	ldd	r18, Y+3	; 0x03
    445e:	3c 81       	ldd	r19, Y+4	; 0x04
    4460:	26 30       	cpi	r18, 0x06	; 6
    4462:	31 05       	cpc	r19, r1
    4464:	09 f4       	brne	.+2      	; 0x4468 <KEYPAD_4x4_adjustKeyNumber+0x78>
    4466:	41 c0       	rjmp	.+130    	; 0x44ea <KEYPAD_4x4_adjustKeyNumber+0xfa>
    4468:	8b 81       	ldd	r24, Y+3	; 0x03
    446a:	9c 81       	ldd	r25, Y+4	; 0x04
    446c:	87 30       	cpi	r24, 0x07	; 7
    446e:	91 05       	cpc	r25, r1
    4470:	0c f0       	brlt	.+2      	; 0x4474 <KEYPAD_4x4_adjustKeyNumber+0x84>
    4472:	3e c0       	rjmp	.+124    	; 0x44f0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    4474:	37 c0       	rjmp	.+110    	; 0x44e4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    4476:	2b 81       	ldd	r18, Y+3	; 0x03
    4478:	3c 81       	ldd	r19, Y+4	; 0x04
    447a:	2c 30       	cpi	r18, 0x0C	; 12
    447c:	31 05       	cpc	r19, r1
    447e:	09 f4       	brne	.+2      	; 0x4482 <KEYPAD_4x4_adjustKeyNumber+0x92>
    4480:	46 c0       	rjmp	.+140    	; 0x450e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    4482:	8b 81       	ldd	r24, Y+3	; 0x03
    4484:	9c 81       	ldd	r25, Y+4	; 0x04
    4486:	8d 30       	cpi	r24, 0x0D	; 13
    4488:	91 05       	cpc	r25, r1
    448a:	5c f4       	brge	.+22     	; 0x44a2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    448c:	2b 81       	ldd	r18, Y+3	; 0x03
    448e:	3c 81       	ldd	r19, Y+4	; 0x04
    4490:	2a 30       	cpi	r18, 0x0A	; 10
    4492:	31 05       	cpc	r19, r1
    4494:	b1 f1       	breq	.+108    	; 0x4502 <KEYPAD_4x4_adjustKeyNumber+0x112>
    4496:	8b 81       	ldd	r24, Y+3	; 0x03
    4498:	9c 81       	ldd	r25, Y+4	; 0x04
    449a:	8b 30       	cpi	r24, 0x0B	; 11
    449c:	91 05       	cpc	r25, r1
    449e:	a4 f5       	brge	.+104    	; 0x4508 <KEYPAD_4x4_adjustKeyNumber+0x118>
    44a0:	2d c0       	rjmp	.+90     	; 0x44fc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    44a2:	2b 81       	ldd	r18, Y+3	; 0x03
    44a4:	3c 81       	ldd	r19, Y+4	; 0x04
    44a6:	2e 30       	cpi	r18, 0x0E	; 14
    44a8:	31 05       	cpc	r19, r1
    44aa:	b9 f1       	breq	.+110    	; 0x451a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    44ac:	8b 81       	ldd	r24, Y+3	; 0x03
    44ae:	9c 81       	ldd	r25, Y+4	; 0x04
    44b0:	8e 30       	cpi	r24, 0x0E	; 14
    44b2:	91 05       	cpc	r25, r1
    44b4:	7c f1       	brlt	.+94     	; 0x4514 <KEYPAD_4x4_adjustKeyNumber+0x124>
    44b6:	2b 81       	ldd	r18, Y+3	; 0x03
    44b8:	3c 81       	ldd	r19, Y+4	; 0x04
    44ba:	2f 30       	cpi	r18, 0x0F	; 15
    44bc:	31 05       	cpc	r19, r1
    44be:	79 f1       	breq	.+94     	; 0x451e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    44c0:	8b 81       	ldd	r24, Y+3	; 0x03
    44c2:	9c 81       	ldd	r25, Y+4	; 0x04
    44c4:	80 31       	cpi	r24, 0x10	; 16
    44c6:	91 05       	cpc	r25, r1
    44c8:	69 f1       	breq	.+90     	; 0x4524 <KEYPAD_4x4_adjustKeyNumber+0x134>
    44ca:	2f c0       	rjmp	.+94     	; 0x452a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    44cc:	87 e0       	ldi	r24, 0x07	; 7
    44ce:	89 83       	std	Y+1, r24	; 0x01
    44d0:	2e c0       	rjmp	.+92     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    44d2:	88 e0       	ldi	r24, 0x08	; 8
    44d4:	89 83       	std	Y+1, r24	; 0x01
    44d6:	2b c0       	rjmp	.+86     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    44d8:	89 e0       	ldi	r24, 0x09	; 9
    44da:	89 83       	std	Y+1, r24	; 0x01
    44dc:	28 c0       	rjmp	.+80     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; /* ASCII Code of '/' */
    44de:	8f e2       	ldi	r24, 0x2F	; 47
    44e0:	89 83       	std	Y+1, r24	; 0x01
    44e2:	25 c0       	rjmp	.+74     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    44e4:	84 e0       	ldi	r24, 0x04	; 4
    44e6:	89 83       	std	Y+1, r24	; 0x01
    44e8:	22 c0       	rjmp	.+68     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    44ea:	85 e0       	ldi	r24, 0x05	; 5
    44ec:	89 83       	std	Y+1, r24	; 0x01
    44ee:	1f c0       	rjmp	.+62     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    44f0:	86 e0       	ldi	r24, 0x06	; 6
    44f2:	89 83       	std	Y+1, r24	; 0x01
    44f4:	1c c0       	rjmp	.+56     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    44f6:	8a e2       	ldi	r24, 0x2A	; 42
    44f8:	89 83       	std	Y+1, r24	; 0x01
    44fa:	19 c0       	rjmp	.+50     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	89 83       	std	Y+1, r24	; 0x01
    4500:	16 c0       	rjmp	.+44     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    4502:	82 e0       	ldi	r24, 0x02	; 2
    4504:	89 83       	std	Y+1, r24	; 0x01
    4506:	13 c0       	rjmp	.+38     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    4508:	83 e0       	ldi	r24, 0x03	; 3
    450a:	89 83       	std	Y+1, r24	; 0x01
    450c:	10 c0       	rjmp	.+32     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    450e:	8d e2       	ldi	r24, 0x2D	; 45
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	0d c0       	rjmp	.+26     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    4514:	8d e0       	ldi	r24, 0x0D	; 13
    4516:	89 83       	std	Y+1, r24	; 0x01
    4518:	0a c0       	rjmp	.+20     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    451a:	19 82       	std	Y+1, r1	; 0x01
    451c:	08 c0       	rjmp	.+16     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    451e:	8d e3       	ldi	r24, 0x3D	; 61
    4520:	89 83       	std	Y+1, r24	; 0x01
    4522:	05 c0       	rjmp	.+10     	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    4524:	8b e2       	ldi	r24, 0x2B	; 43
    4526:	89 83       	std	Y+1, r24	; 0x01
    4528:	02 c0       	rjmp	.+4      	; 0x452e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = Key_num;
    452a:	8a 81       	ldd	r24, Y+2	; 0x02
    452c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    452e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4530:	0f 90       	pop	r0
    4532:	0f 90       	pop	r0
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	cf 91       	pop	r28
    453a:	df 91       	pop	r29
    453c:	08 95       	ret

0000453e <HMI_sysInit>:
 * @param[in]  none
 * @param[out]  none
 * @return none
 */
void HMI_sysInit(void)
{
    453e:	df 93       	push	r29
    4540:	cf 93       	push	r28
    4542:	cd b7       	in	r28, 0x3d	; 61
    4544:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the LCD display module */
	LCD_init();
    4546:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <LCD_init>

	/* Initialize the keypad */
	KEYPAD_init();
    454a:	0e 94 e6 20 	call	0x41cc	; 0x41cc <KEYPAD_init>

	UART_init(&UART_Configuration);
    454e:	89 e9       	ldi	r24, 0x99	; 153
    4550:	92 e0       	ldi	r25, 0x02	; 2
    4552:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>

	/* Set up a callback function for Timer 1 As to HMI_openDoor */
	TIMER_setCallBack(TIMER1, HMI_openDoor);
    4556:	24 e4       	ldi	r18, 0x44	; 68
    4558:	34 e2       	ldi	r19, 0x24	; 36
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	b9 01       	movw	r22, r18
    455e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <TIMER_setCallBack>
}
    4562:	cf 91       	pop	r28
    4564:	df 91       	pop	r29
    4566:	08 95       	ret

00004568 <HMI_setNewPassword>:
 *
 * @param None
 * @return None
 */
void HMI_setNewPassword(void)
{
    4568:	0f 93       	push	r16
    456a:	1f 93       	push	r17
    456c:	df 93       	push	r29
    456e:	cf 93       	push	r28
    4570:	cd b7       	in	r28, 0x3d	; 61
    4572:	de b7       	in	r29, 0x3e	; 62
    4574:	27 97       	sbiw	r28, 0x07	; 7
    4576:	0f b6       	in	r0, 0x3f	; 63
    4578:	f8 94       	cli
    457a:	de bf       	out	0x3e, r29	; 62
    457c:	0f be       	out	0x3f, r0	; 63
    457e:	cd bf       	out	0x3d, r28	; 61
	/* Initialize an array to store the new password */
    uint8 Password[MAX_NUM_OF_DIGITS] = { 0 };
    4580:	86 e0       	ldi	r24, 0x06	; 6
    4582:	fe 01       	movw	r30, r28
    4584:	32 96       	adiw	r30, 0x02	; 2
    4586:	df 01       	movw	r26, r30
    4588:	98 2f       	mov	r25, r24
    458a:	1d 92       	st	X+, r1
    458c:	9a 95       	dec	r25
    458e:	e9 f7       	brne	.-6      	; 0x458a <HMI_setNewPassword+0x22>
    uint8 Pass_digit;

    /* Clear the LCD screen */
    LCD_clearScreen();
    4590:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
    /* Display a message on the LCD to ask for Password */
    LCD_displayStringRowColumn(0, 0, "plz enter pass:");
    4594:	20 e6       	ldi	r18, 0x60	; 96
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	60 e0       	ldi	r22, 0x00	; 0
    459c:	a9 01       	movw	r20, r18
    459e:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_moveCursor(1, 0);
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	60 e0       	ldi	r22, 0x00	; 0
    45a6:	0e 94 5d 20 	call	0x40ba	; 0x40ba <LCD_moveCursor>

    for (Pass_digit = 0; Pass_digit < MAX_NUM_OF_DIGITS - 1; Pass_digit++)
    45aa:	19 82       	std	Y+1, r1	; 0x01
    45ac:	42 c0       	rjmp	.+132    	; 0x4632 <HMI_setNewPassword+0xca>
    {
        /* Get the pressed key from the keypad */
        Password[Pass_digit] = KEYPAD_getPressedKey();
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	08 2f       	mov	r16, r24
    45b2:	10 e0       	ldi	r17, 0x00	; 0
    45b4:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    45b8:	28 2f       	mov	r18, r24
    45ba:	ce 01       	movw	r24, r28
    45bc:	02 96       	adiw	r24, 0x02	; 2
    45be:	fc 01       	movw	r30, r24
    45c0:	e0 0f       	add	r30, r16
    45c2:	f1 1f       	adc	r31, r17
    45c4:	20 83       	st	Z, r18
    45c6:	0c c0       	rjmp	.+24     	; 0x45e0 <HMI_setNewPassword+0x78>

        /* Wait until a key is pressed */
        while (!(Password[Pass_digit]  <= 9 && Password[Pass_digit]  >= 0))
        {
            Password[Pass_digit] = KEYPAD_getPressedKey();
    45c8:	89 81       	ldd	r24, Y+1	; 0x01
    45ca:	08 2f       	mov	r16, r24
    45cc:	10 e0       	ldi	r17, 0x00	; 0
    45ce:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    45d2:	28 2f       	mov	r18, r24
    45d4:	ce 01       	movw	r24, r28
    45d6:	02 96       	adiw	r24, 0x02	; 2
    45d8:	fc 01       	movw	r30, r24
    45da:	e0 0f       	add	r30, r16
    45dc:	f1 1f       	adc	r31, r17
    45de:	20 83       	st	Z, r18
    {
        /* Get the pressed key from the keypad */
        Password[Pass_digit] = KEYPAD_getPressedKey();

        /* Wait until a key is pressed */
        while (!(Password[Pass_digit]  <= 9 && Password[Pass_digit]  >= 0))
    45e0:	89 81       	ldd	r24, Y+1	; 0x01
    45e2:	28 2f       	mov	r18, r24
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	ce 01       	movw	r24, r28
    45e8:	02 96       	adiw	r24, 0x02	; 2
    45ea:	fc 01       	movw	r30, r24
    45ec:	e2 0f       	add	r30, r18
    45ee:	f3 1f       	adc	r31, r19
    45f0:	80 81       	ld	r24, Z
    45f2:	8a 30       	cpi	r24, 0x0A	; 10
    45f4:	48 f7       	brcc	.-46     	; 0x45c8 <HMI_setNewPassword+0x60>
        {
            Password[Pass_digit] = KEYPAD_getPressedKey();
        }

        /* Wait until the key is released */
        while (Password[Pass_digit] == KEYPAD_getPressedKey());
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	28 2f       	mov	r18, r24
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	ce 01       	movw	r24, r28
    45fe:	02 96       	adiw	r24, 0x02	; 2
    4600:	fc 01       	movw	r30, r24
    4602:	e2 0f       	add	r30, r18
    4604:	f3 1f       	adc	r31, r19
    4606:	10 81       	ld	r17, Z
    4608:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    460c:	18 17       	cp	r17, r24
    460e:	99 f3       	breq	.-26     	; 0x45f6 <HMI_setNewPassword+0x8e>

        /* Send the pressed key via UART */
        UART_sendByte(Password[Pass_digit]);
    4610:	89 81       	ldd	r24, Y+1	; 0x01
    4612:	28 2f       	mov	r18, r24
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	ce 01       	movw	r24, r28
    4618:	02 96       	adiw	r24, 0x02	; 2
    461a:	fc 01       	movw	r30, r24
    461c:	e2 0f       	add	r30, r18
    461e:	f3 1f       	adc	r31, r19
    4620:	80 81       	ld	r24, Z
    4622:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

        /* Display '*' on LCD to hide the entered digit */
        LCD_displayCharacter('*');
    4626:	8a e2       	ldi	r24, 0x2A	; 42
    4628:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <LCD_displayCharacter>
    LCD_clearScreen();
    /* Display a message on the LCD to ask for Password */
    LCD_displayStringRowColumn(0, 0, "plz enter pass:");
    LCD_moveCursor(1, 0);

    for (Pass_digit = 0; Pass_digit < MAX_NUM_OF_DIGITS - 1; Pass_digit++)
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	8f 5f       	subi	r24, 0xFF	; 255
    4630:	89 83       	std	Y+1, r24	; 0x01
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	85 30       	cpi	r24, 0x05	; 5
    4636:	08 f4       	brcc	.+2      	; 0x463a <HMI_setNewPassword+0xd2>
    4638:	ba cf       	rjmp	.-140    	; 0x45ae <HMI_setNewPassword+0x46>
        /* Display '*' on LCD to hide the entered digit */
        LCD_displayCharacter('*');
    }

    /* Null terminate the password array */
    Password[Pass_digit] = '\0';
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	28 2f       	mov	r18, r24
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	ce 01       	movw	r24, r28
    4642:	02 96       	adiw	r24, 0x02	; 2
    4644:	fc 01       	movw	r30, r24
    4646:	e2 0f       	add	r30, r18
    4648:	f3 1f       	adc	r31, r19
    464a:	10 82       	st	Z, r1

    /* Wait until the '=' key is pressed to confirm the password */
    while (KEYPAD_getPressedKey() != '=');
    464c:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    4650:	8d 33       	cpi	r24, 0x3D	; 61
    4652:	e1 f7       	brne	.-8      	; 0x464c <HMI_setNewPassword+0xe4>
}
    4654:	27 96       	adiw	r28, 0x07	; 7
    4656:	0f b6       	in	r0, 0x3f	; 63
    4658:	f8 94       	cli
    465a:	de bf       	out	0x3e, r29	; 62
    465c:	0f be       	out	0x3f, r0	; 63
    465e:	cd bf       	out	0x3d, r28	; 61
    4660:	cf 91       	pop	r28
    4662:	df 91       	pop	r29
    4664:	1f 91       	pop	r17
    4666:	0f 91       	pop	r16
    4668:	08 95       	ret

0000466a <HMI_ReenterPassword>:
 *
 * @param None
 * @return None
 */
void HMI_ReenterPassword(void)
{
    466a:	0f 93       	push	r16
    466c:	1f 93       	push	r17
    466e:	df 93       	push	r29
    4670:	cf 93       	push	r28
    4672:	cd b7       	in	r28, 0x3d	; 61
    4674:	de b7       	in	r29, 0x3e	; 62
    4676:	27 97       	sbiw	r28, 0x07	; 7
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	f8 94       	cli
    467c:	de bf       	out	0x3e, r29	; 62
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	cd bf       	out	0x3d, r28	; 61
	/* Initialize an array to store the re-entered password */
    uint8 ReEnterPass[MAX_NUM_OF_DIGITS] = { 0 };
    4682:	86 e0       	ldi	r24, 0x06	; 6
    4684:	fe 01       	movw	r30, r28
    4686:	32 96       	adiw	r30, 0x02	; 2
    4688:	df 01       	movw	r26, r30
    468a:	98 2f       	mov	r25, r24
    468c:	1d 92       	st	X+, r1
    468e:	9a 95       	dec	r25
    4690:	e9 f7       	brne	.-6      	; 0x468c <HMI_ReenterPassword+0x22>
    uint8 Pass_digit;

    /* Clear the LCD screen */
    LCD_clearScreen();
    4692:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
    /* Display a message on the LCD to ask user to re-enter Password */
    LCD_displayStringRowColumn(0, 0, "plz re-enter the");
    4696:	20 e7       	ldi	r18, 0x70	; 112
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	60 e0       	ldi	r22, 0x00	; 0
    469e:	a9 01       	movw	r20, r18
    46a0:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 0, "same pass: ");
    46a4:	21 e8       	ldi	r18, 0x81	; 129
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	60 e0       	ldi	r22, 0x00	; 0
    46ac:	a9 01       	movw	r20, r18
    46ae:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>

    for (Pass_digit = 0; Pass_digit < MAX_NUM_OF_DIGITS - 1; Pass_digit++)
    46b2:	19 82       	std	Y+1, r1	; 0x01
    46b4:	42 c0       	rjmp	.+132    	; 0x473a <HMI_ReenterPassword+0xd0>
    {
        /* Get the pressed key from the keypad */
        ReEnterPass[Pass_digit] = KEYPAD_getPressedKey();
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	08 2f       	mov	r16, r24
    46ba:	10 e0       	ldi	r17, 0x00	; 0
    46bc:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    46c0:	28 2f       	mov	r18, r24
    46c2:	ce 01       	movw	r24, r28
    46c4:	02 96       	adiw	r24, 0x02	; 2
    46c6:	fc 01       	movw	r30, r24
    46c8:	e0 0f       	add	r30, r16
    46ca:	f1 1f       	adc	r31, r17
    46cc:	20 83       	st	Z, r18
    46ce:	0c c0       	rjmp	.+24     	; 0x46e8 <HMI_ReenterPassword+0x7e>

        /* Wait until a key is pressed */
        while (!(ReEnterPass[Pass_digit]  <= 9 && ReEnterPass[Pass_digit]  >= 0))
        {
            ReEnterPass[Pass_digit] = KEYPAD_getPressedKey();
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
    46d2:	08 2f       	mov	r16, r24
    46d4:	10 e0       	ldi	r17, 0x00	; 0
    46d6:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    46da:	28 2f       	mov	r18, r24
    46dc:	ce 01       	movw	r24, r28
    46de:	02 96       	adiw	r24, 0x02	; 2
    46e0:	fc 01       	movw	r30, r24
    46e2:	e0 0f       	add	r30, r16
    46e4:	f1 1f       	adc	r31, r17
    46e6:	20 83       	st	Z, r18
    {
        /* Get the pressed key from the keypad */
        ReEnterPass[Pass_digit] = KEYPAD_getPressedKey();

        /* Wait until a key is pressed */
        while (!(ReEnterPass[Pass_digit]  <= 9 && ReEnterPass[Pass_digit]  >= 0))
    46e8:	89 81       	ldd	r24, Y+1	; 0x01
    46ea:	28 2f       	mov	r18, r24
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	ce 01       	movw	r24, r28
    46f0:	02 96       	adiw	r24, 0x02	; 2
    46f2:	fc 01       	movw	r30, r24
    46f4:	e2 0f       	add	r30, r18
    46f6:	f3 1f       	adc	r31, r19
    46f8:	80 81       	ld	r24, Z
    46fa:	8a 30       	cpi	r24, 0x0A	; 10
    46fc:	48 f7       	brcc	.-46     	; 0x46d0 <HMI_ReenterPassword+0x66>
        {
            ReEnterPass[Pass_digit] = KEYPAD_getPressedKey();
        }

        /* Send the pressed key via UART */
        UART_sendByte(ReEnterPass[Pass_digit]);
    46fe:	89 81       	ldd	r24, Y+1	; 0x01
    4700:	28 2f       	mov	r18, r24
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	ce 01       	movw	r24, r28
    4706:	02 96       	adiw	r24, 0x02	; 2
    4708:	fc 01       	movw	r30, r24
    470a:	e2 0f       	add	r30, r18
    470c:	f3 1f       	adc	r31, r19
    470e:	80 81       	ld	r24, Z
    4710:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

        /* Wait until the key is released */
        while (ReEnterPass[Pass_digit] == KEYPAD_getPressedKey());
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	28 2f       	mov	r18, r24
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	ce 01       	movw	r24, r28
    471c:	02 96       	adiw	r24, 0x02	; 2
    471e:	fc 01       	movw	r30, r24
    4720:	e2 0f       	add	r30, r18
    4722:	f3 1f       	adc	r31, r19
    4724:	10 81       	ld	r17, Z
    4726:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    472a:	18 17       	cp	r17, r24
    472c:	99 f3       	breq	.-26     	; 0x4714 <HMI_ReenterPassword+0xaa>

        /* Display '*' on LCD to hide the entered digit */
        LCD_displayCharacter('*');
    472e:	8a e2       	ldi	r24, 0x2A	; 42
    4730:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <LCD_displayCharacter>
    LCD_clearScreen();
    /* Display a message on the LCD to ask user to re-enter Password */
    LCD_displayStringRowColumn(0, 0, "plz re-enter the");
    LCD_displayStringRowColumn(1, 0, "same pass: ");

    for (Pass_digit = 0; Pass_digit < MAX_NUM_OF_DIGITS - 1; Pass_digit++)
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	8f 5f       	subi	r24, 0xFF	; 255
    4738:	89 83       	std	Y+1, r24	; 0x01
    473a:	89 81       	ldd	r24, Y+1	; 0x01
    473c:	85 30       	cpi	r24, 0x05	; 5
    473e:	08 f4       	brcc	.+2      	; 0x4742 <HMI_ReenterPassword+0xd8>
    4740:	ba cf       	rjmp	.-140    	; 0x46b6 <HMI_ReenterPassword+0x4c>

        /* Display '*' on LCD to hide the entered digit */
        LCD_displayCharacter('*');
    }
    /* Null terminate the re-entered password array */
    ReEnterPass[Pass_digit] = '\0';
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	28 2f       	mov	r18, r24
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	ce 01       	movw	r24, r28
    474a:	02 96       	adiw	r24, 0x02	; 2
    474c:	fc 01       	movw	r30, r24
    474e:	e2 0f       	add	r30, r18
    4750:	f3 1f       	adc	r31, r19
    4752:	10 82       	st	Z, r1

    /* Wait until the '=' key is pressed to confirm the re-entered password */
    while (KEYPAD_getPressedKey() != '=');
    4754:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    4758:	8d 33       	cpi	r24, 0x3D	; 61
    475a:	e1 f7       	brne	.-8      	; 0x4754 <HMI_ReenterPassword+0xea>
}
    475c:	27 96       	adiw	r28, 0x07	; 7
    475e:	0f b6       	in	r0, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	de bf       	out	0x3e, r29	; 62
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	cf 91       	pop	r28
    476a:	df 91       	pop	r29
    476c:	1f 91       	pop	r17
    476e:	0f 91       	pop	r16
    4770:	08 95       	ret

00004772 <HMI_checkPassword>:
 *
 * @param None
 * @return None
 */
void HMI_checkPassword(void)
{
    4772:	0f 93       	push	r16
    4774:	1f 93       	push	r17
    4776:	df 93       	push	r29
    4778:	cf 93       	push	r28
    477a:	cd b7       	in	r28, 0x3d	; 61
    477c:	de b7       	in	r29, 0x3e	; 62
    477e:	27 97       	sbiw	r28, 0x07	; 7
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	f8 94       	cli
    4784:	de bf       	out	0x3e, r29	; 62
    4786:	0f be       	out	0x3f, r0	; 63
    4788:	cd bf       	out	0x3d, r28	; 61
	/* Initialize an array to store the entered password */
    uint8 CheckPass[MAX_NUM_OF_DIGITS] = { 0 };
    478a:	86 e0       	ldi	r24, 0x06	; 6
    478c:	fe 01       	movw	r30, r28
    478e:	32 96       	adiw	r30, 0x02	; 2
    4790:	df 01       	movw	r26, r30
    4792:	98 2f       	mov	r25, r24
    4794:	1d 92       	st	X+, r1
    4796:	9a 95       	dec	r25
    4798:	e9 f7       	brne	.-6      	; 0x4794 <HMI_checkPassword+0x22>
    uint8 Pass_digit;

    /* Send a ready-to-send signal to the Control_ECU */
    UART_sendByte(MCU1_READYTOSEND);
    479a:	8a e0       	ldi	r24, 0x0A	; 10
    479c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
    /* Wait for a ready-to-receive signal from the Control_ECU */
    while(UART_recieveByte() != MCU2_READYTORECIEVE);
    47a0:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    47a4:	8d 30       	cpi	r24, 0x0D	; 13
    47a6:	e1 f7       	brne	.-8      	; 0x47a0 <HMI_checkPassword+0x2e>
    /* Send a signal to indicate password check */
    UART_sendByte(CHECKPASS);
    47a8:	8e e0       	ldi	r24, 0x0E	; 14
    47aa:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

    LCD_clearScreen(); /* Clear the LCD screen */
    47ae:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
    /* Display a message on the LCD to ask for Password */
    LCD_displayStringRowColumn(0, 0, "plz enter pass:");
    47b2:	20 e6       	ldi	r18, 0x60	; 96
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	60 e0       	ldi	r22, 0x00	; 0
    47ba:	a9 01       	movw	r20, r18
    47bc:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    LCD_moveCursor(1, 0);
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	60 e0       	ldi	r22, 0x00	; 0
    47c4:	0e 94 5d 20 	call	0x40ba	; 0x40ba <LCD_moveCursor>

    for (Pass_digit = 0; Pass_digit < MAX_NUM_OF_DIGITS - 1; Pass_digit++)
    47c8:	19 82       	std	Y+1, r1	; 0x01
    47ca:	42 c0       	rjmp	.+132    	; 0x4850 <HMI_checkPassword+0xde>
    {
        /* Get the pressed key from the keypad */
        CheckPass[Pass_digit] = KEYPAD_getPressedKey();
    47cc:	89 81       	ldd	r24, Y+1	; 0x01
    47ce:	08 2f       	mov	r16, r24
    47d0:	10 e0       	ldi	r17, 0x00	; 0
    47d2:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    47d6:	28 2f       	mov	r18, r24
    47d8:	ce 01       	movw	r24, r28
    47da:	02 96       	adiw	r24, 0x02	; 2
    47dc:	fc 01       	movw	r30, r24
    47de:	e0 0f       	add	r30, r16
    47e0:	f1 1f       	adc	r31, r17
    47e2:	20 83       	st	Z, r18
    47e4:	0c c0       	rjmp	.+24     	; 0x47fe <HMI_checkPassword+0x8c>

        /* Wait until a key is pressed */
        while (!(CheckPass[Pass_digit]  <= 9 && CheckPass[Pass_digit]  >= 0))
        {
            CheckPass[Pass_digit] = KEYPAD_getPressedKey();
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	08 2f       	mov	r16, r24
    47ea:	10 e0       	ldi	r17, 0x00	; 0
    47ec:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    47f0:	28 2f       	mov	r18, r24
    47f2:	ce 01       	movw	r24, r28
    47f4:	02 96       	adiw	r24, 0x02	; 2
    47f6:	fc 01       	movw	r30, r24
    47f8:	e0 0f       	add	r30, r16
    47fa:	f1 1f       	adc	r31, r17
    47fc:	20 83       	st	Z, r18
    {
        /* Get the pressed key from the keypad */
        CheckPass[Pass_digit] = KEYPAD_getPressedKey();

        /* Wait until a key is pressed */
        while (!(CheckPass[Pass_digit]  <= 9 && CheckPass[Pass_digit]  >= 0))
    47fe:	89 81       	ldd	r24, Y+1	; 0x01
    4800:	28 2f       	mov	r18, r24
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	ce 01       	movw	r24, r28
    4806:	02 96       	adiw	r24, 0x02	; 2
    4808:	fc 01       	movw	r30, r24
    480a:	e2 0f       	add	r30, r18
    480c:	f3 1f       	adc	r31, r19
    480e:	80 81       	ld	r24, Z
    4810:	8a 30       	cpi	r24, 0x0A	; 10
    4812:	48 f7       	brcc	.-46     	; 0x47e6 <HMI_checkPassword+0x74>
        {
            CheckPass[Pass_digit] = KEYPAD_getPressedKey();
        }

        /* Send the pressed key via UART */
        UART_sendByte(CheckPass[Pass_digit]);
    4814:	89 81       	ldd	r24, Y+1	; 0x01
    4816:	28 2f       	mov	r18, r24
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	ce 01       	movw	r24, r28
    481c:	02 96       	adiw	r24, 0x02	; 2
    481e:	fc 01       	movw	r30, r24
    4820:	e2 0f       	add	r30, r18
    4822:	f3 1f       	adc	r31, r19
    4824:	80 81       	ld	r24, Z
    4826:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

        /* Wait until the key is released */
        while (CheckPass[Pass_digit] == KEYPAD_getPressedKey());
    482a:	89 81       	ldd	r24, Y+1	; 0x01
    482c:	28 2f       	mov	r18, r24
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	ce 01       	movw	r24, r28
    4832:	02 96       	adiw	r24, 0x02	; 2
    4834:	fc 01       	movw	r30, r24
    4836:	e2 0f       	add	r30, r18
    4838:	f3 1f       	adc	r31, r19
    483a:	10 81       	ld	r17, Z
    483c:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    4840:	18 17       	cp	r17, r24
    4842:	99 f3       	breq	.-26     	; 0x482a <HMI_checkPassword+0xb8>

        /* Display '*' on LCD to hide the entered digit */
        LCD_displayCharacter('*');
    4844:	8a e2       	ldi	r24, 0x2A	; 42
    4846:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <LCD_displayCharacter>
    LCD_clearScreen(); /* Clear the LCD screen */
    /* Display a message on the LCD to ask for Password */
    LCD_displayStringRowColumn(0, 0, "plz enter pass:");
    LCD_moveCursor(1, 0);

    for (Pass_digit = 0; Pass_digit < MAX_NUM_OF_DIGITS - 1; Pass_digit++)
    484a:	89 81       	ldd	r24, Y+1	; 0x01
    484c:	8f 5f       	subi	r24, 0xFF	; 255
    484e:	89 83       	std	Y+1, r24	; 0x01
    4850:	89 81       	ldd	r24, Y+1	; 0x01
    4852:	85 30       	cpi	r24, 0x05	; 5
    4854:	08 f4       	brcc	.+2      	; 0x4858 <HMI_checkPassword+0xe6>
    4856:	ba cf       	rjmp	.-140    	; 0x47cc <HMI_checkPassword+0x5a>
        /* Display '*' on LCD to hide the entered digit */
        LCD_displayCharacter('*');
    }

    /* Null terminate the entered password array */
    CheckPass[Pass_digit] = '\0';
    4858:	89 81       	ldd	r24, Y+1	; 0x01
    485a:	28 2f       	mov	r18, r24
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	ce 01       	movw	r24, r28
    4860:	02 96       	adiw	r24, 0x02	; 2
    4862:	fc 01       	movw	r30, r24
    4864:	e2 0f       	add	r30, r18
    4866:	f3 1f       	adc	r31, r19
    4868:	10 82       	st	Z, r1

    /* Wait until the '=' key is pressed to confirm the entered password */
    while (KEYPAD_getPressedKey() != '=');
    486a:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    486e:	8d 33       	cpi	r24, 0x3D	; 61
    4870:	e1 f7       	brne	.-8      	; 0x486a <HMI_checkPassword+0xf8>
}
    4872:	27 96       	adiw	r28, 0x07	; 7
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	f8 94       	cli
    4878:	de bf       	out	0x3e, r29	; 62
    487a:	0f be       	out	0x3f, r0	; 63
    487c:	cd bf       	out	0x3d, r28	; 61
    487e:	cf 91       	pop	r28
    4880:	df 91       	pop	r29
    4882:	1f 91       	pop	r17
    4884:	0f 91       	pop	r16
    4886:	08 95       	ret

00004888 <HMI_openDoor>:
 *
 * @param None
 * @return None
 */
void HMI_openDoor(void)
{
    4888:	df 93       	push	r29
    488a:	cf 93       	push	r28
    488c:	cd b7       	in	r28, 0x3d	; 61
    488e:	de b7       	in	r29, 0x3e	; 62
    if (Error_state == NORMAL)
    4890:	80 91 b5 02 	lds	r24, 0x02B5
    4894:	88 23       	and	r24, r24
    4896:	09 f0       	breq	.+2      	; 0x489a <HMI_openDoor+0x12>
    4898:	53 c0       	rjmp	.+166    	; 0x4940 <HMI_openDoor+0xb8>
    {
    	/* Increment the door open ticks counter as every tick timer counts 7.5 sec */
        opendoor_state++;
    489a:	80 91 b3 02 	lds	r24, 0x02B3
    489e:	8f 5f       	subi	r24, 0xFF	; 255
    48a0:	80 93 b3 02 	sts	0x02B3, r24

        if (opendoor_state == 2)
    48a4:	80 91 b3 02 	lds	r24, 0x02B3
    48a8:	82 30       	cpi	r24, 0x02	; 2
    48aa:	b1 f4       	brne	.+44     	; 0x48d8 <HMI_openDoor+0x50>
        {
        	/* Set the compare match value for timer 1 to count 3 sec */
            TIMER_setCompareMatch(TIMER1, 23437);
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	6d e8       	ldi	r22, 0x8D	; 141
    48b0:	7b e5       	ldi	r23, 0x5B	; 91
    48b2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <TIMER_setCompareMatch>
            LCD_clearScreen();
    48b6:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
            /* Display "Door Will Lock soon" message on the LCD */
            LCD_displayStringRowColumn(0, 1,"Door Will Lock ");
    48ba:	2d e8       	ldi	r18, 0x8D	; 141
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	80 e0       	ldi	r24, 0x00	; 0
    48c0:	61 e0       	ldi	r22, 0x01	; 1
    48c2:	a9 01       	movw	r20, r18
    48c4:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(1, 6,"Soon");
    48c8:	2d e9       	ldi	r18, 0x9D	; 157
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	66 e0       	ldi	r22, 0x06	; 6
    48d0:	a9 01       	movw	r20, r18
    48d2:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    48d6:	51 c0       	rjmp	.+162    	; 0x497a <HMI_openDoor+0xf2>
        }
        else if (opendoor_state == 3)
    48d8:	80 91 b3 02 	lds	r24, 0x02B3
    48dc:	83 30       	cpi	r24, 0x03	; 3
    48de:	b1 f4       	brne	.+44     	; 0x490c <HMI_openDoor+0x84>
        {
        	/* Set the compare match value for timer 1 to count 15 sec */
            TIMER_setCompareMatch(TIMER1, 58594);
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	62 ee       	ldi	r22, 0xE2	; 226
    48e4:	74 ee       	ldi	r23, 0xE4	; 228
    48e6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <TIMER_setCompareMatch>
            /* Clear the LCD screen */
            LCD_clearScreen();
    48ea:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
            /* Display "Door is Locking" message on the LCD */
            LCD_displayStringRowColumn(0, 4,"Door is");
    48ee:	22 ea       	ldi	r18, 0xA2	; 162
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	64 e0       	ldi	r22, 0x04	; 4
    48f6:	a9 01       	movw	r20, r18
    48f8:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
            LCD_displayStringRowColumn(1, 4,"Locking");
    48fc:	2a ea       	ldi	r18, 0xAA	; 170
    48fe:	30 e0       	ldi	r19, 0x00	; 0
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	64 e0       	ldi	r22, 0x04	; 4
    4904:	a9 01       	movw	r20, r18
    4906:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    490a:	37 c0       	rjmp	.+110    	; 0x497a <HMI_openDoor+0xf2>
        }
        else if (opendoor_state == 4)
    490c:	80 91 b3 02 	lds	r24, 0x02B3
    4910:	84 30       	cpi	r24, 0x04	; 4
    4912:	99 f5       	brne	.+102    	; 0x497a <HMI_openDoor+0xf2>
        {
        	/* Deinitialize timer 1 */
            TIMER_deInit(TIMER1);
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <TIMER_deInit>
            /* Reset the door opening state */
            opendoor_state = 0;
    491a:	10 92 b3 02 	sts	0x02B3, r1
		    /* Clear the LCD screen */
		    LCD_clearScreen();
    491e:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		    /* Display options on LCD */
		    LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    4922:	22 eb       	ldi	r18, 0xB2	; 178
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	60 e0       	ldi	r22, 0x00	; 0
    492a:	a9 01       	movw	r20, r18
    492c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		    LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    4930:	20 ec       	ldi	r18, 0xC0	; 192
    4932:	30 e0       	ldi	r19, 0x00	; 0
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	60 e0       	ldi	r22, 0x00	; 0
    4938:	a9 01       	movw	r20, r18
    493a:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    493e:	1d c0       	rjmp	.+58     	; 0x497a <HMI_openDoor+0xf2>
        }
    }
    else if (Error_state_ticks < 8 && Error_state == STATE_ERROR)
    4940:	80 91 b4 02 	lds	r24, 0x02B4
    4944:	88 30       	cpi	r24, 0x08	; 8
    4946:	50 f4       	brcc	.+20     	; 0x495c <HMI_openDoor+0xd4>
    4948:	80 91 b5 02 	lds	r24, 0x02B5
    494c:	81 31       	cpi	r24, 0x11	; 17
    494e:	31 f4       	brne	.+12     	; 0x495c <HMI_openDoor+0xd4>
    {
    	/* Increment the error state ticks counter as evrey tick it counts 7.5 sec*/
        Error_state_ticks++;
    4950:	80 91 b4 02 	lds	r24, 0x02B4
    4954:	8f 5f       	subi	r24, 0xFF	; 255
    4956:	80 93 b4 02 	sts	0x02B4, r24
    495a:	0f c0       	rjmp	.+30     	; 0x497a <HMI_openDoor+0xf2>
    }
    else if (Error_state_ticks >= 8 && Error_state == STATE_ERROR)
    495c:	80 91 b4 02 	lds	r24, 0x02B4
    4960:	88 30       	cpi	r24, 0x08	; 8
    4962:	58 f0       	brcs	.+22     	; 0x497a <HMI_openDoor+0xf2>
    4964:	80 91 b5 02 	lds	r24, 0x02B5
    4968:	81 31       	cpi	r24, 0x11	; 17
    496a:	39 f4       	brne	.+14     	; 0x497a <HMI_openDoor+0xf2>
    {
    	/* When Timer 1 Reaches 1 Min Reset the error state to normal*/
        Error_state = NORMAL;
    496c:	10 92 b5 02 	sts	0x02B5, r1
        /* Reset the error state ticks counter */
        Error_state_ticks = 0;
    4970:	10 92 b4 02 	sts	0x02B4, r1
        /* Deinitialize timer 1 */
        TIMER_deInit(TIMER1);
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <TIMER_deInit>
    }
}
    497a:	cf 91       	pop	r28
    497c:	df 91       	pop	r29
    497e:	08 95       	ret

00004980 <main>:
uint8 try=0;
/* ===================================================================================================
									             Main Project
   ===================================================================================================*/
int main(void)
{
    4980:	0f 93       	push	r16
    4982:	1f 93       	push	r17
    4984:	df 93       	push	r29
    4986:	cf 93       	push	r28
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
    498c:	c2 57       	subi	r28, 0x72	; 114
    498e:	d0 40       	sbci	r29, 0x00	; 0
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	f8 94       	cli
    4994:	de bf       	out	0x3e, r29	; 62
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	cd bf       	out	0x3d, r28	; 61
	ENABLE_INTERRUPTS();
    499a:	78 94       	sei

	uint8 state;

	/* Initialize HMI system */
	HMI_sysInit();
    499c:	0e 94 9f 22 	call	0x453e	; 0x453e <HMI_sysInit>

	uint8 reenter_check = PASS_UNMATCHED;
    49a0:	fe 01       	movw	r30, r28
    49a2:	ef 58       	subi	r30, 0x8F	; 143
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	10 82       	st	Z, r1

	/* Loop until reenter_check is not equal to 0 */
	do {
	    /* Send That HMI ECU ready to send signal */
	    UART_sendByte(MCU1_READYTOSEND);
    49a8:	8a e0       	ldi	r24, 0x0A	; 10
    49aa:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

	    /* Wait until Control ECU is ready to receive */
	    while (UART_recieveByte() != MCU2_READYTORECIEVE);
    49ae:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    49b2:	8d 30       	cpi	r24, 0x0D	; 13
    49b4:	e1 f7       	brne	.-8      	; 0x49ae <main+0x2e>

	    /* Set a new password through HMI ECU */
	    HMI_setNewPassword();
    49b6:	0e 94 b4 22 	call	0x4568	; 0x4568 <HMI_setNewPassword>

	    /* Reenter the password through HMI ECU */
	    HMI_ReenterPassword();
    49ba:	0e 94 35 23 	call	0x466a	; 0x466a <HMI_ReenterPassword>

	    /* Send Control ECU ready to send signal */
	    while (UART_recieveByte() != MCU2_READYTOSEND);
    49be:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    49c2:	8c 30       	cpi	r24, 0x0C	; 12
    49c4:	e1 f7       	brne	.-8      	; 0x49be <main+0x3e>
	    UART_sendByte(MCU1_READYTORECIEVE);
    49c6:	8b e0       	ldi	r24, 0x0B	; 11
    49c8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

	    /* Receive reenter_check value */
	    reenter_check = UART_recieveByte();
    49cc:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    49d0:	fe 01       	movw	r30, r28
    49d2:	ef 58       	subi	r30, 0x8F	; 143
    49d4:	ff 4f       	sbci	r31, 0xFF	; 255
    49d6:	80 83       	st	Z, r24
	    if(reenter_check == PASS_UNMATCHED)
    49d8:	fe 01       	movw	r30, r28
    49da:	ef 58       	subi	r30, 0x8F	; 143
    49dc:	ff 4f       	sbci	r31, 0xFF	; 255
    49de:	80 81       	ld	r24, Z
    49e0:	88 23       	and	r24, r24
    49e2:	09 f0       	breq	.+2      	; 0x49e6 <main+0x66>
    49e4:	bb c0       	rjmp	.+374    	; 0x4b5c <main+0x1dc>
			{
	    		LCD_clearScreen();
    49e6:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
				LCD_displayString(" PASS UNMATCHED  ");
    49ea:	80 ed       	ldi	r24, 0xD0	; 208
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	0e 94 34 20 	call	0x4068	; 0x4068 <LCD_displayString>
    49f2:	fe 01       	movw	r30, r28
    49f4:	e3 59       	subi	r30, 0x93	; 147
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	aa e7       	ldi	r26, 0x7A	; 122
    49fe:	b4 e4       	ldi	r27, 0x44	; 68
    4a00:	80 83       	st	Z, r24
    4a02:	91 83       	std	Z+1, r25	; 0x01
    4a04:	a2 83       	std	Z+2, r26	; 0x02
    4a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a08:	8e 01       	movw	r16, r28
    4a0a:	07 59       	subi	r16, 0x97	; 151
    4a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a0e:	fe 01       	movw	r30, r28
    4a10:	e3 59       	subi	r30, 0x93	; 147
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	60 81       	ld	r22, Z
    4a16:	71 81       	ldd	r23, Z+1	; 0x01
    4a18:	82 81       	ldd	r24, Z+2	; 0x02
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	4a ef       	ldi	r20, 0xFA	; 250
    4a22:	54 e4       	ldi	r21, 0x44	; 68
    4a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	f8 01       	movw	r30, r16
    4a2e:	80 83       	st	Z, r24
    4a30:	91 83       	std	Z+1, r25	; 0x01
    4a32:	a2 83       	std	Z+2, r26	; 0x02
    4a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a36:	fe 01       	movw	r30, r28
    4a38:	e7 59       	subi	r30, 0x97	; 151
    4a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3c:	60 81       	ld	r22, Z
    4a3e:	71 81       	ldd	r23, Z+1	; 0x01
    4a40:	82 81       	ldd	r24, Z+2	; 0x02
    4a42:	93 81       	ldd	r25, Z+3	; 0x03
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	40 e8       	ldi	r20, 0x80	; 128
    4a4a:	5f e3       	ldi	r21, 0x3F	; 63
    4a4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a50:	88 23       	and	r24, r24
    4a52:	44 f4       	brge	.+16     	; 0x4a64 <main+0xe4>
		__ticks = 1;
    4a54:	fe 01       	movw	r30, r28
    4a56:	e9 59       	subi	r30, 0x99	; 153
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	91 83       	std	Z+1, r25	; 0x01
    4a60:	80 83       	st	Z, r24
    4a62:	64 c0       	rjmp	.+200    	; 0x4b2c <main+0x1ac>
	else if (__tmp > 65535)
    4a64:	fe 01       	movw	r30, r28
    4a66:	e7 59       	subi	r30, 0x97	; 151
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	60 81       	ld	r22, Z
    4a6c:	71 81       	ldd	r23, Z+1	; 0x01
    4a6e:	82 81       	ldd	r24, Z+2	; 0x02
    4a70:	93 81       	ldd	r25, Z+3	; 0x03
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	3f ef       	ldi	r19, 0xFF	; 255
    4a76:	4f e7       	ldi	r20, 0x7F	; 127
    4a78:	57 e4       	ldi	r21, 0x47	; 71
    4a7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a7e:	18 16       	cp	r1, r24
    4a80:	0c f0       	brlt	.+2      	; 0x4a84 <main+0x104>
    4a82:	43 c0       	rjmp	.+134    	; 0x4b0a <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a84:	fe 01       	movw	r30, r28
    4a86:	e3 59       	subi	r30, 0x93	; 147
    4a88:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8a:	60 81       	ld	r22, Z
    4a8c:	71 81       	ldd	r23, Z+1	; 0x01
    4a8e:	82 81       	ldd	r24, Z+2	; 0x02
    4a90:	93 81       	ldd	r25, Z+3	; 0x03
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e2       	ldi	r20, 0x20	; 32
    4a98:	51 e4       	ldi	r21, 0x41	; 65
    4a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	8e 01       	movw	r16, r28
    4aa4:	09 59       	subi	r16, 0x99	; 153
    4aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa8:	bc 01       	movw	r22, r24
    4aaa:	cd 01       	movw	r24, r26
    4aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab0:	dc 01       	movw	r26, r24
    4ab2:	cb 01       	movw	r24, r22
    4ab4:	f8 01       	movw	r30, r16
    4ab6:	91 83       	std	Z+1, r25	; 0x01
    4ab8:	80 83       	st	Z, r24
    4aba:	1f c0       	rjmp	.+62     	; 0x4afa <main+0x17a>
    4abc:	fe 01       	movw	r30, r28
    4abe:	eb 59       	subi	r30, 0x9B	; 155
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	88 ec       	ldi	r24, 0xC8	; 200
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	91 83       	std	Z+1, r25	; 0x01
    4ac8:	80 83       	st	Z, r24
    4aca:	fe 01       	movw	r30, r28
    4acc:	eb 59       	subi	r30, 0x9B	; 155
    4ace:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad0:	80 81       	ld	r24, Z
    4ad2:	91 81       	ldd	r25, Z+1	; 0x01
    4ad4:	01 97       	sbiw	r24, 0x01	; 1
    4ad6:	f1 f7       	brne	.-4      	; 0x4ad4 <main+0x154>
    4ad8:	fe 01       	movw	r30, r28
    4ada:	eb 59       	subi	r30, 0x9B	; 155
    4adc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ade:	91 83       	std	Z+1, r25	; 0x01
    4ae0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae2:	de 01       	movw	r26, r28
    4ae4:	a9 59       	subi	r26, 0x99	; 153
    4ae6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ae8:	fe 01       	movw	r30, r28
    4aea:	e9 59       	subi	r30, 0x99	; 153
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	80 81       	ld	r24, Z
    4af0:	91 81       	ldd	r25, Z+1	; 0x01
    4af2:	01 97       	sbiw	r24, 0x01	; 1
    4af4:	11 96       	adiw	r26, 0x01	; 1
    4af6:	9c 93       	st	X, r25
    4af8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4afa:	fe 01       	movw	r30, r28
    4afc:	e9 59       	subi	r30, 0x99	; 153
    4afe:	ff 4f       	sbci	r31, 0xFF	; 255
    4b00:	80 81       	ld	r24, Z
    4b02:	91 81       	ldd	r25, Z+1	; 0x01
    4b04:	00 97       	sbiw	r24, 0x00	; 0
    4b06:	d1 f6       	brne	.-76     	; 0x4abc <main+0x13c>
    4b08:	ea c0       	rjmp	.+468    	; 0x4cde <main+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b0a:	8e 01       	movw	r16, r28
    4b0c:	09 59       	subi	r16, 0x99	; 153
    4b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b10:	fe 01       	movw	r30, r28
    4b12:	e7 59       	subi	r30, 0x97	; 151
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	60 81       	ld	r22, Z
    4b18:	71 81       	ldd	r23, Z+1	; 0x01
    4b1a:	82 81       	ldd	r24, Z+2	; 0x02
    4b1c:	93 81       	ldd	r25, Z+3	; 0x03
    4b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b22:	dc 01       	movw	r26, r24
    4b24:	cb 01       	movw	r24, r22
    4b26:	f8 01       	movw	r30, r16
    4b28:	91 83       	std	Z+1, r25	; 0x01
    4b2a:	80 83       	st	Z, r24
    4b2c:	de 01       	movw	r26, r28
    4b2e:	ad 59       	subi	r26, 0x9D	; 157
    4b30:	bf 4f       	sbci	r27, 0xFF	; 255
    4b32:	fe 01       	movw	r30, r28
    4b34:	e9 59       	subi	r30, 0x99	; 153
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	80 81       	ld	r24, Z
    4b3a:	91 81       	ldd	r25, Z+1	; 0x01
    4b3c:	11 96       	adiw	r26, 0x01	; 1
    4b3e:	9c 93       	st	X, r25
    4b40:	8e 93       	st	-X, r24
    4b42:	fe 01       	movw	r30, r28
    4b44:	ed 59       	subi	r30, 0x9D	; 157
    4b46:	ff 4f       	sbci	r31, 0xFF	; 255
    4b48:	80 81       	ld	r24, Z
    4b4a:	91 81       	ldd	r25, Z+1	; 0x01
    4b4c:	01 97       	sbiw	r24, 0x01	; 1
    4b4e:	f1 f7       	brne	.-4      	; 0x4b4c <main+0x1cc>
    4b50:	fe 01       	movw	r30, r28
    4b52:	ed 59       	subi	r30, 0x9D	; 157
    4b54:	ff 4f       	sbci	r31, 0xFF	; 255
    4b56:	91 83       	std	Z+1, r25	; 0x01
    4b58:	80 83       	st	Z, r24
    4b5a:	c1 c0       	rjmp	.+386    	; 0x4cde <main+0x35e>
				_delay_ms(1000);
			}
			else if(reenter_check == PASS_MATCHED)
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	ef 58       	subi	r30, 0x8F	; 143
    4b60:	ff 4f       	sbci	r31, 0xFF	; 255
    4b62:	80 81       	ld	r24, Z
    4b64:	81 30       	cpi	r24, 0x01	; 1
    4b66:	09 f0       	breq	.+2      	; 0x4b6a <main+0x1ea>
    4b68:	ba c0       	rjmp	.+372    	; 0x4cde <main+0x35e>
			{
				LCD_clearScreen();
    4b6a:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
				LCD_displayString("  PASS MATCHED  ");
    4b6e:	82 ee       	ldi	r24, 0xE2	; 226
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	0e 94 34 20 	call	0x4068	; 0x4068 <LCD_displayString>
    4b76:	fe 01       	movw	r30, r28
    4b78:	e1 5a       	subi	r30, 0xA1	; 161
    4b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	aa e7       	ldi	r26, 0x7A	; 122
    4b82:	b4 e4       	ldi	r27, 0x44	; 68
    4b84:	80 83       	st	Z, r24
    4b86:	91 83       	std	Z+1, r25	; 0x01
    4b88:	a2 83       	std	Z+2, r26	; 0x02
    4b8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b8c:	8e 01       	movw	r16, r28
    4b8e:	05 5a       	subi	r16, 0xA5	; 165
    4b90:	1f 4f       	sbci	r17, 0xFF	; 255
    4b92:	fe 01       	movw	r30, r28
    4b94:	e1 5a       	subi	r30, 0xA1	; 161
    4b96:	ff 4f       	sbci	r31, 0xFF	; 255
    4b98:	60 81       	ld	r22, Z
    4b9a:	71 81       	ldd	r23, Z+1	; 0x01
    4b9c:	82 81       	ldd	r24, Z+2	; 0x02
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	4a ef       	ldi	r20, 0xFA	; 250
    4ba6:	54 e4       	ldi	r21, 0x44	; 68
    4ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	f8 01       	movw	r30, r16
    4bb2:	80 83       	st	Z, r24
    4bb4:	91 83       	std	Z+1, r25	; 0x01
    4bb6:	a2 83       	std	Z+2, r26	; 0x02
    4bb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bba:	fe 01       	movw	r30, r28
    4bbc:	e5 5a       	subi	r30, 0xA5	; 165
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	60 81       	ld	r22, Z
    4bc2:	71 81       	ldd	r23, Z+1	; 0x01
    4bc4:	82 81       	ldd	r24, Z+2	; 0x02
    4bc6:	93 81       	ldd	r25, Z+3	; 0x03
    4bc8:	20 e0       	ldi	r18, 0x00	; 0
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	40 e8       	ldi	r20, 0x80	; 128
    4bce:	5f e3       	ldi	r21, 0x3F	; 63
    4bd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bd4:	88 23       	and	r24, r24
    4bd6:	44 f4       	brge	.+16     	; 0x4be8 <main+0x268>
		__ticks = 1;
    4bd8:	fe 01       	movw	r30, r28
    4bda:	e7 5a       	subi	r30, 0xA7	; 167
    4bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	91 83       	std	Z+1, r25	; 0x01
    4be4:	80 83       	st	Z, r24
    4be6:	64 c0       	rjmp	.+200    	; 0x4cb0 <main+0x330>
	else if (__tmp > 65535)
    4be8:	fe 01       	movw	r30, r28
    4bea:	e5 5a       	subi	r30, 0xA5	; 165
    4bec:	ff 4f       	sbci	r31, 0xFF	; 255
    4bee:	60 81       	ld	r22, Z
    4bf0:	71 81       	ldd	r23, Z+1	; 0x01
    4bf2:	82 81       	ldd	r24, Z+2	; 0x02
    4bf4:	93 81       	ldd	r25, Z+3	; 0x03
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	3f ef       	ldi	r19, 0xFF	; 255
    4bfa:	4f e7       	ldi	r20, 0x7F	; 127
    4bfc:	57 e4       	ldi	r21, 0x47	; 71
    4bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c02:	18 16       	cp	r1, r24
    4c04:	0c f0       	brlt	.+2      	; 0x4c08 <main+0x288>
    4c06:	43 c0       	rjmp	.+134    	; 0x4c8e <main+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e1 5a       	subi	r30, 0xA1	; 161
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	60 81       	ld	r22, Z
    4c10:	71 81       	ldd	r23, Z+1	; 0x01
    4c12:	82 81       	ldd	r24, Z+2	; 0x02
    4c14:	93 81       	ldd	r25, Z+3	; 0x03
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	40 e2       	ldi	r20, 0x20	; 32
    4c1c:	51 e4       	ldi	r21, 0x41	; 65
    4c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	8e 01       	movw	r16, r28
    4c28:	07 5a       	subi	r16, 0xA7	; 167
    4c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c2c:	bc 01       	movw	r22, r24
    4c2e:	cd 01       	movw	r24, r26
    4c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c34:	dc 01       	movw	r26, r24
    4c36:	cb 01       	movw	r24, r22
    4c38:	f8 01       	movw	r30, r16
    4c3a:	91 83       	std	Z+1, r25	; 0x01
    4c3c:	80 83       	st	Z, r24
    4c3e:	1f c0       	rjmp	.+62     	; 0x4c7e <main+0x2fe>
    4c40:	fe 01       	movw	r30, r28
    4c42:	e9 5a       	subi	r30, 0xA9	; 169
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	88 ec       	ldi	r24, 0xC8	; 200
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	91 83       	std	Z+1, r25	; 0x01
    4c4c:	80 83       	st	Z, r24
    4c4e:	fe 01       	movw	r30, r28
    4c50:	e9 5a       	subi	r30, 0xA9	; 169
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	80 81       	ld	r24, Z
    4c56:	91 81       	ldd	r25, Z+1	; 0x01
    4c58:	01 97       	sbiw	r24, 0x01	; 1
    4c5a:	f1 f7       	brne	.-4      	; 0x4c58 <main+0x2d8>
    4c5c:	fe 01       	movw	r30, r28
    4c5e:	e9 5a       	subi	r30, 0xA9	; 169
    4c60:	ff 4f       	sbci	r31, 0xFF	; 255
    4c62:	91 83       	std	Z+1, r25	; 0x01
    4c64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c66:	de 01       	movw	r26, r28
    4c68:	a7 5a       	subi	r26, 0xA7	; 167
    4c6a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c6c:	fe 01       	movw	r30, r28
    4c6e:	e7 5a       	subi	r30, 0xA7	; 167
    4c70:	ff 4f       	sbci	r31, 0xFF	; 255
    4c72:	80 81       	ld	r24, Z
    4c74:	91 81       	ldd	r25, Z+1	; 0x01
    4c76:	01 97       	sbiw	r24, 0x01	; 1
    4c78:	11 96       	adiw	r26, 0x01	; 1
    4c7a:	9c 93       	st	X, r25
    4c7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c7e:	fe 01       	movw	r30, r28
    4c80:	e7 5a       	subi	r30, 0xA7	; 167
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	80 81       	ld	r24, Z
    4c86:	91 81       	ldd	r25, Z+1	; 0x01
    4c88:	00 97       	sbiw	r24, 0x00	; 0
    4c8a:	d1 f6       	brne	.-76     	; 0x4c40 <main+0x2c0>
    4c8c:	28 c0       	rjmp	.+80     	; 0x4cde <main+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c8e:	8e 01       	movw	r16, r28
    4c90:	07 5a       	subi	r16, 0xA7	; 167
    4c92:	1f 4f       	sbci	r17, 0xFF	; 255
    4c94:	fe 01       	movw	r30, r28
    4c96:	e5 5a       	subi	r30, 0xA5	; 165
    4c98:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9a:	60 81       	ld	r22, Z
    4c9c:	71 81       	ldd	r23, Z+1	; 0x01
    4c9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ca0:	93 81       	ldd	r25, Z+3	; 0x03
    4ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	f8 01       	movw	r30, r16
    4cac:	91 83       	std	Z+1, r25	; 0x01
    4cae:	80 83       	st	Z, r24
    4cb0:	de 01       	movw	r26, r28
    4cb2:	ab 5a       	subi	r26, 0xAB	; 171
    4cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e7 5a       	subi	r30, 0xA7	; 167
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	80 81       	ld	r24, Z
    4cbe:	91 81       	ldd	r25, Z+1	; 0x01
    4cc0:	11 96       	adiw	r26, 0x01	; 1
    4cc2:	9c 93       	st	X, r25
    4cc4:	8e 93       	st	-X, r24
    4cc6:	fe 01       	movw	r30, r28
    4cc8:	eb 5a       	subi	r30, 0xAB	; 171
    4cca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ccc:	80 81       	ld	r24, Z
    4cce:	91 81       	ldd	r25, Z+1	; 0x01
    4cd0:	01 97       	sbiw	r24, 0x01	; 1
    4cd2:	f1 f7       	brne	.-4      	; 0x4cd0 <main+0x350>
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	eb 5a       	subi	r30, 0xAB	; 171
    4cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cda:	91 83       	std	Z+1, r25	; 0x01
    4cdc:	80 83       	st	Z, r24
				_delay_ms(1000);
			}
	} while (reenter_check == PASS_UNMATCHED);
    4cde:	fe 01       	movw	r30, r28
    4ce0:	ef 58       	subi	r30, 0x8F	; 143
    4ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce4:	80 81       	ld	r24, Z
    4ce6:	88 23       	and	r24, r24
    4ce8:	09 f4       	brne	.+2      	; 0x4cec <main+0x36c>
    4cea:	5e ce       	rjmp	.-836    	; 0x49a8 <main+0x28>

	/* Reset reenter_check */
	reenter_check = 0;
    4cec:	fe 01       	movw	r30, r28
    4cee:	ef 58       	subi	r30, 0x8F	; 143
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	10 82       	st	Z, r1

	/* Clear LCD screen */
	LCD_clearScreen();
    4cf4:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>

	/* Display options on LCD */
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    4cf8:	23 ef       	ldi	r18, 0xF3	; 243
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	60 e0       	ldi	r22, 0x00	; 0
    4d00:	a9 01       	movw	r20, r18
    4d02:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    4d06:	21 e0       	ldi	r18, 0x01	; 1
    4d08:	31 e0       	ldi	r19, 0x01	; 1
    4d0a:	81 e0       	ldi	r24, 0x01	; 1
    4d0c:	60 e0       	ldi	r22, 0x00	; 0
    4d0e:	a9 01       	movw	r20, r18
    4d10:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
	for(;;)
	{
		/* Get the pressed key from the keypad */
		state = KEYPAD_getPressedKey();
    4d14:	0e 94 3d 21 	call	0x427a	; 0x427a <KEYPAD_getPressedKey>
    4d18:	fe 01       	movw	r30, r28
    4d1a:	ee 58       	subi	r30, 0x8E	; 142
    4d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1e:	80 83       	st	Z, r24

		/* Check if the pressed key is '+' */
		if (state == '+') {
    4d20:	fe 01       	movw	r30, r28
    4d22:	ee 58       	subi	r30, 0x8E	; 142
    4d24:	ff 4f       	sbci	r31, 0xFF	; 255
    4d26:	80 81       	ld	r24, Z
    4d28:	8b 32       	cpi	r24, 0x2B	; 43
    4d2a:	09 f0       	breq	.+2      	; 0x4d2e <main+0x3ae>
    4d2c:	ba c1       	rjmp	.+884    	; 0x50a2 <main+0x722>
		    /* Continuously check the password through HMI */
		    do {
		    	  try++;
    4d2e:	80 91 b6 02 	lds	r24, 0x02B6
    4d32:	8f 5f       	subi	r24, 0xFF	; 255
    4d34:	80 93 b6 02 	sts	0x02B6, r24
				  if(try == MAX_PASS_TRIES)
    4d38:	80 91 b6 02 	lds	r24, 0x02B6
    4d3c:	84 30       	cpi	r24, 0x04	; 4
    4d3e:	41 f4       	brne	.+16     	; 0x4d50 <main+0x3d0>
				  {
					  Error_state = STATE_ERROR;
    4d40:	81 e1       	ldi	r24, 0x11	; 17
    4d42:	80 93 b5 02 	sts	0x02B5, r24
					  TIMER_init(&TIMER_Configuration);
    4d46:	89 ea       	ldi	r24, 0xA9	; 169
    4d48:	92 e0       	ldi	r25, 0x02	; 2
    4d4a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <TIMER_init>
    4d4e:	77 c1       	rjmp	.+750    	; 0x503e <main+0x6be>
					  break;
				  }
		        HMI_checkPassword();
    4d50:	0e 94 b9 23 	call	0x4772	; 0x4772 <HMI_checkPassword>
		        /* Wait until Control_ECU is ready to send */
		        while (UART_recieveByte() != MCU2_READYTOSEND);
    4d54:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    4d58:	8c 30       	cpi	r24, 0x0C	; 12
    4d5a:	e1 f7       	brne	.-8      	; 0x4d54 <main+0x3d4>
		        /* Send HMI_ECU ready to receive */
		        UART_sendByte(MCU1_READYTORECIEVE);
    4d5c:	8b e0       	ldi	r24, 0x0B	; 11
    4d5e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
		        /* Receive reenter_check value */
		        reenter_check = UART_recieveByte();
    4d62:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    4d66:	fe 01       	movw	r30, r28
    4d68:	ef 58       	subi	r30, 0x8F	; 143
    4d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6c:	80 83       	st	Z, r24
			    if(reenter_check == PASS_INCORRECT)
    4d6e:	fe 01       	movw	r30, r28
    4d70:	ef 58       	subi	r30, 0x8F	; 143
    4d72:	ff 4f       	sbci	r31, 0xFF	; 255
    4d74:	80 81       	ld	r24, Z
    4d76:	88 23       	and	r24, r24
    4d78:	09 f0       	breq	.+2      	; 0x4d7c <main+0x3fc>
    4d7a:	be c0       	rjmp	.+380    	; 0x4ef8 <main+0x578>
					{
			    		LCD_clearScreen();
    4d7c:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		  			    LCD_displayStringRowColumn(0, 1, "INCORRECT PASS");
    4d80:	21 e1       	ldi	r18, 0x11	; 17
    4d82:	31 e0       	ldi	r19, 0x01	; 1
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	61 e0       	ldi	r22, 0x01	; 1
    4d88:	a9 01       	movw	r20, r18
    4d8a:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    4d8e:	fe 01       	movw	r30, r28
    4d90:	ef 5a       	subi	r30, 0xAF	; 175
    4d92:	ff 4f       	sbci	r31, 0xFF	; 255
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	aa e7       	ldi	r26, 0x7A	; 122
    4d9a:	b4 e4       	ldi	r27, 0x44	; 68
    4d9c:	80 83       	st	Z, r24
    4d9e:	91 83       	std	Z+1, r25	; 0x01
    4da0:	a2 83       	std	Z+2, r26	; 0x02
    4da2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4da4:	8e 01       	movw	r16, r28
    4da6:	03 5b       	subi	r16, 0xB3	; 179
    4da8:	1f 4f       	sbci	r17, 0xFF	; 255
    4daa:	fe 01       	movw	r30, r28
    4dac:	ef 5a       	subi	r30, 0xAF	; 175
    4dae:	ff 4f       	sbci	r31, 0xFF	; 255
    4db0:	60 81       	ld	r22, Z
    4db2:	71 81       	ldd	r23, Z+1	; 0x01
    4db4:	82 81       	ldd	r24, Z+2	; 0x02
    4db6:	93 81       	ldd	r25, Z+3	; 0x03
    4db8:	20 e0       	ldi	r18, 0x00	; 0
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	4a ef       	ldi	r20, 0xFA	; 250
    4dbe:	54 e4       	ldi	r21, 0x44	; 68
    4dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	cb 01       	movw	r24, r22
    4dc8:	f8 01       	movw	r30, r16
    4dca:	80 83       	st	Z, r24
    4dcc:	91 83       	std	Z+1, r25	; 0x01
    4dce:	a2 83       	std	Z+2, r26	; 0x02
    4dd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	e3 5b       	subi	r30, 0xB3	; 179
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	60 81       	ld	r22, Z
    4dda:	71 81       	ldd	r23, Z+1	; 0x01
    4ddc:	82 81       	ldd	r24, Z+2	; 0x02
    4dde:	93 81       	ldd	r25, Z+3	; 0x03
    4de0:	20 e0       	ldi	r18, 0x00	; 0
    4de2:	30 e0       	ldi	r19, 0x00	; 0
    4de4:	40 e8       	ldi	r20, 0x80	; 128
    4de6:	5f e3       	ldi	r21, 0x3F	; 63
    4de8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dec:	88 23       	and	r24, r24
    4dee:	44 f4       	brge	.+16     	; 0x4e00 <main+0x480>
		__ticks = 1;
    4df0:	fe 01       	movw	r30, r28
    4df2:	e5 5b       	subi	r30, 0xB5	; 181
    4df4:	ff 4f       	sbci	r31, 0xFF	; 255
    4df6:	81 e0       	ldi	r24, 0x01	; 1
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	91 83       	std	Z+1, r25	; 0x01
    4dfc:	80 83       	st	Z, r24
    4dfe:	64 c0       	rjmp	.+200    	; 0x4ec8 <main+0x548>
	else if (__tmp > 65535)
    4e00:	fe 01       	movw	r30, r28
    4e02:	e3 5b       	subi	r30, 0xB3	; 179
    4e04:	ff 4f       	sbci	r31, 0xFF	; 255
    4e06:	60 81       	ld	r22, Z
    4e08:	71 81       	ldd	r23, Z+1	; 0x01
    4e0a:	82 81       	ldd	r24, Z+2	; 0x02
    4e0c:	93 81       	ldd	r25, Z+3	; 0x03
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	3f ef       	ldi	r19, 0xFF	; 255
    4e12:	4f e7       	ldi	r20, 0x7F	; 127
    4e14:	57 e4       	ldi	r21, 0x47	; 71
    4e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e1a:	18 16       	cp	r1, r24
    4e1c:	0c f0       	brlt	.+2      	; 0x4e20 <main+0x4a0>
    4e1e:	43 c0       	rjmp	.+134    	; 0x4ea6 <main+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e20:	fe 01       	movw	r30, r28
    4e22:	ef 5a       	subi	r30, 0xAF	; 175
    4e24:	ff 4f       	sbci	r31, 0xFF	; 255
    4e26:	60 81       	ld	r22, Z
    4e28:	71 81       	ldd	r23, Z+1	; 0x01
    4e2a:	82 81       	ldd	r24, Z+2	; 0x02
    4e2c:	93 81       	ldd	r25, Z+3	; 0x03
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	30 e0       	ldi	r19, 0x00	; 0
    4e32:	40 e2       	ldi	r20, 0x20	; 32
    4e34:	51 e4       	ldi	r21, 0x41	; 65
    4e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e3a:	dc 01       	movw	r26, r24
    4e3c:	cb 01       	movw	r24, r22
    4e3e:	8e 01       	movw	r16, r28
    4e40:	05 5b       	subi	r16, 0xB5	; 181
    4e42:	1f 4f       	sbci	r17, 0xFF	; 255
    4e44:	bc 01       	movw	r22, r24
    4e46:	cd 01       	movw	r24, r26
    4e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	f8 01       	movw	r30, r16
    4e52:	91 83       	std	Z+1, r25	; 0x01
    4e54:	80 83       	st	Z, r24
    4e56:	1f c0       	rjmp	.+62     	; 0x4e96 <main+0x516>
    4e58:	fe 01       	movw	r30, r28
    4e5a:	e7 5b       	subi	r30, 0xB7	; 183
    4e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5e:	88 ec       	ldi	r24, 0xC8	; 200
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	91 83       	std	Z+1, r25	; 0x01
    4e64:	80 83       	st	Z, r24
    4e66:	fe 01       	movw	r30, r28
    4e68:	e7 5b       	subi	r30, 0xB7	; 183
    4e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6c:	80 81       	ld	r24, Z
    4e6e:	91 81       	ldd	r25, Z+1	; 0x01
    4e70:	01 97       	sbiw	r24, 0x01	; 1
    4e72:	f1 f7       	brne	.-4      	; 0x4e70 <main+0x4f0>
    4e74:	fe 01       	movw	r30, r28
    4e76:	e7 5b       	subi	r30, 0xB7	; 183
    4e78:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7a:	91 83       	std	Z+1, r25	; 0x01
    4e7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e7e:	de 01       	movw	r26, r28
    4e80:	a5 5b       	subi	r26, 0xB5	; 181
    4e82:	bf 4f       	sbci	r27, 0xFF	; 255
    4e84:	fe 01       	movw	r30, r28
    4e86:	e5 5b       	subi	r30, 0xB5	; 181
    4e88:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8a:	80 81       	ld	r24, Z
    4e8c:	91 81       	ldd	r25, Z+1	; 0x01
    4e8e:	01 97       	sbiw	r24, 0x01	; 1
    4e90:	11 96       	adiw	r26, 0x01	; 1
    4e92:	9c 93       	st	X, r25
    4e94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e96:	fe 01       	movw	r30, r28
    4e98:	e5 5b       	subi	r30, 0xB5	; 181
    4e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9c:	80 81       	ld	r24, Z
    4e9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ea0:	00 97       	sbiw	r24, 0x00	; 0
    4ea2:	d1 f6       	brne	.-76     	; 0x4e58 <main+0x4d8>
    4ea4:	c5 c0       	rjmp	.+394    	; 0x5030 <main+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea6:	8e 01       	movw	r16, r28
    4ea8:	05 5b       	subi	r16, 0xB5	; 181
    4eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    4eac:	fe 01       	movw	r30, r28
    4eae:	e3 5b       	subi	r30, 0xB3	; 179
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	60 81       	ld	r22, Z
    4eb4:	71 81       	ldd	r23, Z+1	; 0x01
    4eb6:	82 81       	ldd	r24, Z+2	; 0x02
    4eb8:	93 81       	ldd	r25, Z+3	; 0x03
    4eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	f8 01       	movw	r30, r16
    4ec4:	91 83       	std	Z+1, r25	; 0x01
    4ec6:	80 83       	st	Z, r24
    4ec8:	de 01       	movw	r26, r28
    4eca:	a9 5b       	subi	r26, 0xB9	; 185
    4ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    4ece:	fe 01       	movw	r30, r28
    4ed0:	e5 5b       	subi	r30, 0xB5	; 181
    4ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed4:	80 81       	ld	r24, Z
    4ed6:	91 81       	ldd	r25, Z+1	; 0x01
    4ed8:	11 96       	adiw	r26, 0x01	; 1
    4eda:	9c 93       	st	X, r25
    4edc:	8e 93       	st	-X, r24
    4ede:	fe 01       	movw	r30, r28
    4ee0:	e9 5b       	subi	r30, 0xB9	; 185
    4ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee4:	80 81       	ld	r24, Z
    4ee6:	91 81       	ldd	r25, Z+1	; 0x01
    4ee8:	01 97       	sbiw	r24, 0x01	; 1
    4eea:	f1 f7       	brne	.-4      	; 0x4ee8 <main+0x568>
    4eec:	fe 01       	movw	r30, r28
    4eee:	e9 5b       	subi	r30, 0xB9	; 185
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	91 83       	std	Z+1, r25	; 0x01
    4ef4:	80 83       	st	Z, r24
    4ef6:	9c c0       	rjmp	.+312    	; 0x5030 <main+0x6b0>
						_delay_ms(1000);
					}
					else if(reenter_check == PASS_CORRECT)
    4ef8:	fe 01       	movw	r30, r28
    4efa:	ef 58       	subi	r30, 0x8F	; 143
    4efc:	ff 4f       	sbci	r31, 0xFF	; 255
    4efe:	80 81       	ld	r24, Z
    4f00:	81 30       	cpi	r24, 0x01	; 1
    4f02:	09 f0       	breq	.+2      	; 0x4f06 <main+0x586>
    4f04:	95 c0       	rjmp	.+298    	; 0x5030 <main+0x6b0>
					{
			    		LCD_clearScreen();
    4f06:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		  			    LCD_displayStringRowColumn(0, 2, "CORRECT PASS");
    4f0a:	20 e2       	ldi	r18, 0x20	; 32
    4f0c:	31 e0       	ldi	r19, 0x01	; 1
    4f0e:	80 e0       	ldi	r24, 0x00	; 0
    4f10:	62 e0       	ldi	r22, 0x02	; 2
    4f12:	a9 01       	movw	r20, r18
    4f14:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		  			    LCD_displayStringRowColumn(1, 2, "SYSETEM OPEN");
    4f18:	2d e2       	ldi	r18, 0x2D	; 45
    4f1a:	31 e0       	ldi	r19, 0x01	; 1
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	62 e0       	ldi	r22, 0x02	; 2
    4f20:	a9 01       	movw	r20, r18
    4f22:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    4f26:	fe 01       	movw	r30, r28
    4f28:	ed 5b       	subi	r30, 0xBD	; 189
    4f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	aa e7       	ldi	r26, 0x7A	; 122
    4f32:	b4 e4       	ldi	r27, 0x44	; 68
    4f34:	80 83       	st	Z, r24
    4f36:	91 83       	std	Z+1, r25	; 0x01
    4f38:	a2 83       	std	Z+2, r26	; 0x02
    4f3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f3c:	8e 01       	movw	r16, r28
    4f3e:	01 5c       	subi	r16, 0xC1	; 193
    4f40:	1f 4f       	sbci	r17, 0xFF	; 255
    4f42:	fe 01       	movw	r30, r28
    4f44:	ed 5b       	subi	r30, 0xBD	; 189
    4f46:	ff 4f       	sbci	r31, 0xFF	; 255
    4f48:	60 81       	ld	r22, Z
    4f4a:	71 81       	ldd	r23, Z+1	; 0x01
    4f4c:	82 81       	ldd	r24, Z+2	; 0x02
    4f4e:	93 81       	ldd	r25, Z+3	; 0x03
    4f50:	20 e0       	ldi	r18, 0x00	; 0
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	4a ef       	ldi	r20, 0xFA	; 250
    4f56:	54 e4       	ldi	r21, 0x44	; 68
    4f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f5c:	dc 01       	movw	r26, r24
    4f5e:	cb 01       	movw	r24, r22
    4f60:	f8 01       	movw	r30, r16
    4f62:	80 83       	st	Z, r24
    4f64:	91 83       	std	Z+1, r25	; 0x01
    4f66:	a2 83       	std	Z+2, r26	; 0x02
    4f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f6a:	fe 01       	movw	r30, r28
    4f6c:	ff 96       	adiw	r30, 0x3f	; 63
    4f6e:	60 81       	ld	r22, Z
    4f70:	71 81       	ldd	r23, Z+1	; 0x01
    4f72:	82 81       	ldd	r24, Z+2	; 0x02
    4f74:	93 81       	ldd	r25, Z+3	; 0x03
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	40 e8       	ldi	r20, 0x80	; 128
    4f7c:	5f e3       	ldi	r21, 0x3F	; 63
    4f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f82:	88 23       	and	r24, r24
    4f84:	2c f4       	brge	.+10     	; 0x4f90 <main+0x610>
		__ticks = 1;
    4f86:	81 e0       	ldi	r24, 0x01	; 1
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	9e af       	std	Y+62, r25	; 0x3e
    4f8c:	8d af       	std	Y+61, r24	; 0x3d
    4f8e:	46 c0       	rjmp	.+140    	; 0x501c <main+0x69c>
	else if (__tmp > 65535)
    4f90:	fe 01       	movw	r30, r28
    4f92:	ff 96       	adiw	r30, 0x3f	; 63
    4f94:	60 81       	ld	r22, Z
    4f96:	71 81       	ldd	r23, Z+1	; 0x01
    4f98:	82 81       	ldd	r24, Z+2	; 0x02
    4f9a:	93 81       	ldd	r25, Z+3	; 0x03
    4f9c:	20 e0       	ldi	r18, 0x00	; 0
    4f9e:	3f ef       	ldi	r19, 0xFF	; 255
    4fa0:	4f e7       	ldi	r20, 0x7F	; 127
    4fa2:	57 e4       	ldi	r21, 0x47	; 71
    4fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fa8:	18 16       	cp	r1, r24
    4faa:	64 f5       	brge	.+88     	; 0x5004 <main+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fac:	fe 01       	movw	r30, r28
    4fae:	ed 5b       	subi	r30, 0xBD	; 189
    4fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb2:	60 81       	ld	r22, Z
    4fb4:	71 81       	ldd	r23, Z+1	; 0x01
    4fb6:	82 81       	ldd	r24, Z+2	; 0x02
    4fb8:	93 81       	ldd	r25, Z+3	; 0x03
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	40 e2       	ldi	r20, 0x20	; 32
    4fc0:	51 e4       	ldi	r21, 0x41	; 65
    4fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc6:	dc 01       	movw	r26, r24
    4fc8:	cb 01       	movw	r24, r22
    4fca:	bc 01       	movw	r22, r24
    4fcc:	cd 01       	movw	r24, r26
    4fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd2:	dc 01       	movw	r26, r24
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	9e af       	std	Y+62, r25	; 0x3e
    4fd8:	8d af       	std	Y+61, r24	; 0x3d
    4fda:	0f c0       	rjmp	.+30     	; 0x4ffa <main+0x67a>
    4fdc:	88 ec       	ldi	r24, 0xC8	; 200
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	9c af       	std	Y+60, r25	; 0x3c
    4fe2:	8b af       	std	Y+59, r24	; 0x3b
    4fe4:	8b ad       	ldd	r24, Y+59	; 0x3b
    4fe6:	9c ad       	ldd	r25, Y+60	; 0x3c
    4fe8:	01 97       	sbiw	r24, 0x01	; 1
    4fea:	f1 f7       	brne	.-4      	; 0x4fe8 <main+0x668>
    4fec:	9c af       	std	Y+60, r25	; 0x3c
    4fee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ff2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ff4:	01 97       	sbiw	r24, 0x01	; 1
    4ff6:	9e af       	std	Y+62, r25	; 0x3e
    4ff8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ffa:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ffc:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	69 f7       	brne	.-38     	; 0x4fdc <main+0x65c>
    5002:	16 c0       	rjmp	.+44     	; 0x5030 <main+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5004:	fe 01       	movw	r30, r28
    5006:	ff 96       	adiw	r30, 0x3f	; 63
    5008:	60 81       	ld	r22, Z
    500a:	71 81       	ldd	r23, Z+1	; 0x01
    500c:	82 81       	ldd	r24, Z+2	; 0x02
    500e:	93 81       	ldd	r25, Z+3	; 0x03
    5010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5014:	dc 01       	movw	r26, r24
    5016:	cb 01       	movw	r24, r22
    5018:	9e af       	std	Y+62, r25	; 0x3e
    501a:	8d af       	std	Y+61, r24	; 0x3d
    501c:	8d ad       	ldd	r24, Y+61	; 0x3d
    501e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5020:	9a af       	std	Y+58, r25	; 0x3a
    5022:	89 af       	std	Y+57, r24	; 0x39
    5024:	89 ad       	ldd	r24, Y+57	; 0x39
    5026:	9a ad       	ldd	r25, Y+58	; 0x3a
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	f1 f7       	brne	.-4      	; 0x5028 <main+0x6a8>
    502c:	9a af       	std	Y+58, r25	; 0x3a
    502e:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(1000);
					}
		    } while (reenter_check == PASS_INCORRECT);
    5030:	fe 01       	movw	r30, r28
    5032:	ef 58       	subi	r30, 0x8F	; 143
    5034:	ff 4f       	sbci	r31, 0xFF	; 255
    5036:	80 81       	ld	r24, Z
    5038:	88 23       	and	r24, r24
    503a:	09 f4       	brne	.+2      	; 0x503e <main+0x6be>
    503c:	78 ce       	rjmp	.-784    	; 0x4d2e <main+0x3ae>

		    if(Error_state == STATE_ERROR)
    503e:	80 91 b5 02 	lds	r24, 0x02B5
    5042:	81 31       	cpi	r24, 0x11	; 17
    5044:	69 f4       	brne	.+26     	; 0x5060 <main+0x6e0>
		    {
				LCD_clearScreen();
    5046:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
				LCD_displayString("      Error ");
    504a:	8a e3       	ldi	r24, 0x3A	; 58
    504c:	91 e0       	ldi	r25, 0x01	; 1
    504e:	0e 94 34 20 	call	0x4068	; 0x4068 <LCD_displayString>
  			    while(Error_state == STATE_ERROR);
    5052:	80 91 b5 02 	lds	r24, 0x02B5
    5056:	81 31       	cpi	r24, 0x11	; 17
    5058:	e1 f3       	breq	.-8      	; 0x5052 <main+0x6d2>
  			    try=0;
    505a:	10 92 b6 02 	sts	0x02B6, r1
    505e:	5a ce       	rjmp	.-844    	; 0x4d14 <main+0x394>
		    }
		    else
		    {
		    try=0;
    5060:	10 92 b6 02 	sts	0x02B6, r1
		    /* Send a ready-to-send signal to the Control_ECU */
		    UART_sendByte(MCU1_READYTOSEND);
    5064:	8a e0       	ldi	r24, 0x0A	; 10
    5066:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
		    /* Wait for a ready-to-receive signal from the Control_ECU */
		    while(UART_recieveByte() != MCU2_READYTORECIEVE);
    506a:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    506e:	8d 30       	cpi	r24, 0x0D	; 13
    5070:	e1 f7       	brne	.-8      	; 0x506a <main+0x6ea>
		    /* Send a signal to indicate password check */
		    UART_sendByte(OPEN_DOOR);
    5072:	80 e1       	ldi	r24, 0x10	; 16
    5074:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

		    TIMER_init(&TIMER_Configuration);
    5078:	89 ea       	ldi	r24, 0xA9	; 169
    507a:	92 e0       	ldi	r25, 0x02	; 2
    507c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <TIMER_init>
		    /* Clear the LCD screen */
		    LCD_clearScreen();
    5080:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		    /* Display "Door is UnLocking" message on the LCD */
		    LCD_displayStringRowColumn(0, 4,"Door is");
    5084:	27 e4       	ldi	r18, 0x47	; 71
    5086:	31 e0       	ldi	r19, 0x01	; 1
    5088:	80 e0       	ldi	r24, 0x00	; 0
    508a:	64 e0       	ldi	r22, 0x04	; 4
    508c:	a9 01       	movw	r20, r18
    508e:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		    LCD_displayStringRowColumn(1, 3,"UnLocking");
    5092:	2f e4       	ldi	r18, 0x4F	; 79
    5094:	31 e0       	ldi	r19, 0x01	; 1
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	63 e0       	ldi	r22, 0x03	; 3
    509a:	a9 01       	movw	r20, r18
    509c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    50a0:	39 ce       	rjmp	.-910    	; 0x4d14 <main+0x394>
		    }
			}
		/* Check if the pressed key is '-' */
		else if (state == '-') {
    50a2:	fe 01       	movw	r30, r28
    50a4:	ee 58       	subi	r30, 0x8E	; 142
    50a6:	ff 4f       	sbci	r31, 0xFF	; 255
    50a8:	80 81       	ld	r24, Z
    50aa:	8d 32       	cpi	r24, 0x2D	; 45
    50ac:	09 f0       	breq	.+2      	; 0x50b0 <main+0x730>
    50ae:	32 ce       	rjmp	.-924    	; 0x4d14 <main+0x394>
		    /* Continuously check the password through HMI */
		    do {
		    	  try++;
    50b0:	80 91 b6 02 	lds	r24, 0x02B6
    50b4:	8f 5f       	subi	r24, 0xFF	; 255
    50b6:	80 93 b6 02 	sts	0x02B6, r24
		    	  if(try == MAX_PASS_TRIES)
    50ba:	80 91 b6 02 	lds	r24, 0x02B6
    50be:	84 30       	cpi	r24, 0x04	; 4
    50c0:	41 f4       	brne	.+16     	; 0x50d2 <main+0x752>
		    	  {
		    		  Error_state = STATE_ERROR;
    50c2:	81 e1       	ldi	r24, 0x11	; 17
    50c4:	80 93 b5 02 	sts	0x02B5, r24
					  TIMER_init(&TIMER_Configuration);
    50c8:	89 ea       	ldi	r24, 0xA9	; 169
    50ca:	92 e0       	ldi	r25, 0x02	; 2
    50cc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <TIMER_init>
    50d0:	22 c1       	rjmp	.+580    	; 0x5316 <main+0x996>
		    		  break;
		    	  }
		        HMI_checkPassword();
    50d2:	0e 94 b9 23 	call	0x4772	; 0x4772 <HMI_checkPassword>
		        /* Wait until Control_ECU is ready to send */
		        while (UART_recieveByte() != MCU2_READYTOSEND);
    50d6:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    50da:	8c 30       	cpi	r24, 0x0C	; 12
    50dc:	e1 f7       	brne	.-8      	; 0x50d6 <main+0x756>
		        /* Send MCU1 ready to receive */
		        UART_sendByte(MCU1_READYTORECIEVE);
    50de:	8b e0       	ldi	r24, 0x0B	; 11
    50e0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
		        /* Receive reenter_check value */
		        reenter_check = UART_recieveByte();
    50e4:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    50e8:	fe 01       	movw	r30, r28
    50ea:	ef 58       	subi	r30, 0x8F	; 143
    50ec:	ff 4f       	sbci	r31, 0xFF	; 255
    50ee:	80 83       	st	Z, r24
			    if(reenter_check == PASS_INCORRECT)
    50f0:	fe 01       	movw	r30, r28
    50f2:	ef 58       	subi	r30, 0x8F	; 143
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	80 81       	ld	r24, Z
    50f8:	88 23       	and	r24, r24
    50fa:	09 f0       	breq	.+2      	; 0x50fe <main+0x77e>
    50fc:	7c c0       	rjmp	.+248    	; 0x51f6 <main+0x876>
					{
						LCD_clearScreen();
    50fe:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		  			    LCD_displayStringRowColumn(0, 1, "INCORRECT PASS");
    5102:	21 e1       	ldi	r18, 0x11	; 17
    5104:	31 e0       	ldi	r19, 0x01	; 1
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	61 e0       	ldi	r22, 0x01	; 1
    510a:	a9 01       	movw	r20, r18
    510c:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    5110:	80 e0       	ldi	r24, 0x00	; 0
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	aa e7       	ldi	r26, 0x7A	; 122
    5116:	b4 e4       	ldi	r27, 0x44	; 68
    5118:	8d ab       	std	Y+53, r24	; 0x35
    511a:	9e ab       	std	Y+54, r25	; 0x36
    511c:	af ab       	std	Y+55, r26	; 0x37
    511e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5120:	6d a9       	ldd	r22, Y+53	; 0x35
    5122:	7e a9       	ldd	r23, Y+54	; 0x36
    5124:	8f a9       	ldd	r24, Y+55	; 0x37
    5126:	98 ad       	ldd	r25, Y+56	; 0x38
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	4a ef       	ldi	r20, 0xFA	; 250
    512e:	54 e4       	ldi	r21, 0x44	; 68
    5130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5134:	dc 01       	movw	r26, r24
    5136:	cb 01       	movw	r24, r22
    5138:	89 ab       	std	Y+49, r24	; 0x31
    513a:	9a ab       	std	Y+50, r25	; 0x32
    513c:	ab ab       	std	Y+51, r26	; 0x33
    513e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5140:	69 a9       	ldd	r22, Y+49	; 0x31
    5142:	7a a9       	ldd	r23, Y+50	; 0x32
    5144:	8b a9       	ldd	r24, Y+51	; 0x33
    5146:	9c a9       	ldd	r25, Y+52	; 0x34
    5148:	20 e0       	ldi	r18, 0x00	; 0
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	40 e8       	ldi	r20, 0x80	; 128
    514e:	5f e3       	ldi	r21, 0x3F	; 63
    5150:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5154:	88 23       	and	r24, r24
    5156:	2c f4       	brge	.+10     	; 0x5162 <main+0x7e2>
		__ticks = 1;
    5158:	81 e0       	ldi	r24, 0x01	; 1
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	98 ab       	std	Y+48, r25	; 0x30
    515e:	8f a7       	std	Y+47, r24	; 0x2f
    5160:	3f c0       	rjmp	.+126    	; 0x51e0 <main+0x860>
	else if (__tmp > 65535)
    5162:	69 a9       	ldd	r22, Y+49	; 0x31
    5164:	7a a9       	ldd	r23, Y+50	; 0x32
    5166:	8b a9       	ldd	r24, Y+51	; 0x33
    5168:	9c a9       	ldd	r25, Y+52	; 0x34
    516a:	20 e0       	ldi	r18, 0x00	; 0
    516c:	3f ef       	ldi	r19, 0xFF	; 255
    516e:	4f e7       	ldi	r20, 0x7F	; 127
    5170:	57 e4       	ldi	r21, 0x47	; 71
    5172:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5176:	18 16       	cp	r1, r24
    5178:	4c f5       	brge	.+82     	; 0x51cc <main+0x84c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    517a:	6d a9       	ldd	r22, Y+53	; 0x35
    517c:	7e a9       	ldd	r23, Y+54	; 0x36
    517e:	8f a9       	ldd	r24, Y+55	; 0x37
    5180:	98 ad       	ldd	r25, Y+56	; 0x38
    5182:	20 e0       	ldi	r18, 0x00	; 0
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	40 e2       	ldi	r20, 0x20	; 32
    5188:	51 e4       	ldi	r21, 0x41	; 65
    518a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    518e:	dc 01       	movw	r26, r24
    5190:	cb 01       	movw	r24, r22
    5192:	bc 01       	movw	r22, r24
    5194:	cd 01       	movw	r24, r26
    5196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	98 ab       	std	Y+48, r25	; 0x30
    51a0:	8f a7       	std	Y+47, r24	; 0x2f
    51a2:	0f c0       	rjmp	.+30     	; 0x51c2 <main+0x842>
    51a4:	88 ec       	ldi	r24, 0xC8	; 200
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	9e a7       	std	Y+46, r25	; 0x2e
    51aa:	8d a7       	std	Y+45, r24	; 0x2d
    51ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    51ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    51b0:	01 97       	sbiw	r24, 0x01	; 1
    51b2:	f1 f7       	brne	.-4      	; 0x51b0 <main+0x830>
    51b4:	9e a7       	std	Y+46, r25	; 0x2e
    51b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    51ba:	98 a9       	ldd	r25, Y+48	; 0x30
    51bc:	01 97       	sbiw	r24, 0x01	; 1
    51be:	98 ab       	std	Y+48, r25	; 0x30
    51c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    51c4:	98 a9       	ldd	r25, Y+48	; 0x30
    51c6:	00 97       	sbiw	r24, 0x00	; 0
    51c8:	69 f7       	brne	.-38     	; 0x51a4 <main+0x824>
    51ca:	9e c0       	rjmp	.+316    	; 0x5308 <main+0x988>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51cc:	69 a9       	ldd	r22, Y+49	; 0x31
    51ce:	7a a9       	ldd	r23, Y+50	; 0x32
    51d0:	8b a9       	ldd	r24, Y+51	; 0x33
    51d2:	9c a9       	ldd	r25, Y+52	; 0x34
    51d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d8:	dc 01       	movw	r26, r24
    51da:	cb 01       	movw	r24, r22
    51dc:	98 ab       	std	Y+48, r25	; 0x30
    51de:	8f a7       	std	Y+47, r24	; 0x2f
    51e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    51e2:	98 a9       	ldd	r25, Y+48	; 0x30
    51e4:	9c a7       	std	Y+44, r25	; 0x2c
    51e6:	8b a7       	std	Y+43, r24	; 0x2b
    51e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    51ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    51ec:	01 97       	sbiw	r24, 0x01	; 1
    51ee:	f1 f7       	brne	.-4      	; 0x51ec <main+0x86c>
    51f0:	9c a7       	std	Y+44, r25	; 0x2c
    51f2:	8b a7       	std	Y+43, r24	; 0x2b
    51f4:	89 c0       	rjmp	.+274    	; 0x5308 <main+0x988>
						_delay_ms(1000);
					}
					else if(reenter_check == PASS_CORRECT)
    51f6:	fe 01       	movw	r30, r28
    51f8:	ef 58       	subi	r30, 0x8F	; 143
    51fa:	ff 4f       	sbci	r31, 0xFF	; 255
    51fc:	80 81       	ld	r24, Z
    51fe:	81 30       	cpi	r24, 0x01	; 1
    5200:	09 f0       	breq	.+2      	; 0x5204 <main+0x884>
    5202:	82 c0       	rjmp	.+260    	; 0x5308 <main+0x988>
					{
						LCD_clearScreen();
    5204:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		  			    LCD_displayStringRowColumn(0, 2, "CORRECT PASS");
    5208:	20 e2       	ldi	r18, 0x20	; 32
    520a:	31 e0       	ldi	r19, 0x01	; 1
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	62 e0       	ldi	r22, 0x02	; 2
    5210:	a9 01       	movw	r20, r18
    5212:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		  			    LCD_displayStringRowColumn(1, 3, "CHANGE PASS");
    5216:	29 e5       	ldi	r18, 0x59	; 89
    5218:	31 e0       	ldi	r19, 0x01	; 1
    521a:	81 e0       	ldi	r24, 0x01	; 1
    521c:	63 e0       	ldi	r22, 0x03	; 3
    521e:	a9 01       	movw	r20, r18
    5220:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	aa e7       	ldi	r26, 0x7A	; 122
    522a:	b4 e4       	ldi	r27, 0x44	; 68
    522c:	8f a3       	std	Y+39, r24	; 0x27
    522e:	98 a7       	std	Y+40, r25	; 0x28
    5230:	a9 a7       	std	Y+41, r26	; 0x29
    5232:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5234:	6f a1       	ldd	r22, Y+39	; 0x27
    5236:	78 a5       	ldd	r23, Y+40	; 0x28
    5238:	89 a5       	ldd	r24, Y+41	; 0x29
    523a:	9a a5       	ldd	r25, Y+42	; 0x2a
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	4a ef       	ldi	r20, 0xFA	; 250
    5242:	54 e4       	ldi	r21, 0x44	; 68
    5244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	8b a3       	std	Y+35, r24	; 0x23
    524e:	9c a3       	std	Y+36, r25	; 0x24
    5250:	ad a3       	std	Y+37, r26	; 0x25
    5252:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5254:	6b a1       	ldd	r22, Y+35	; 0x23
    5256:	7c a1       	ldd	r23, Y+36	; 0x24
    5258:	8d a1       	ldd	r24, Y+37	; 0x25
    525a:	9e a1       	ldd	r25, Y+38	; 0x26
    525c:	20 e0       	ldi	r18, 0x00	; 0
    525e:	30 e0       	ldi	r19, 0x00	; 0
    5260:	40 e8       	ldi	r20, 0x80	; 128
    5262:	5f e3       	ldi	r21, 0x3F	; 63
    5264:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5268:	88 23       	and	r24, r24
    526a:	2c f4       	brge	.+10     	; 0x5276 <main+0x8f6>
		__ticks = 1;
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	9a a3       	std	Y+34, r25	; 0x22
    5272:	89 a3       	std	Y+33, r24	; 0x21
    5274:	3f c0       	rjmp	.+126    	; 0x52f4 <main+0x974>
	else if (__tmp > 65535)
    5276:	6b a1       	ldd	r22, Y+35	; 0x23
    5278:	7c a1       	ldd	r23, Y+36	; 0x24
    527a:	8d a1       	ldd	r24, Y+37	; 0x25
    527c:	9e a1       	ldd	r25, Y+38	; 0x26
    527e:	20 e0       	ldi	r18, 0x00	; 0
    5280:	3f ef       	ldi	r19, 0xFF	; 255
    5282:	4f e7       	ldi	r20, 0x7F	; 127
    5284:	57 e4       	ldi	r21, 0x47	; 71
    5286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    528a:	18 16       	cp	r1, r24
    528c:	4c f5       	brge	.+82     	; 0x52e0 <main+0x960>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    528e:	6f a1       	ldd	r22, Y+39	; 0x27
    5290:	78 a5       	ldd	r23, Y+40	; 0x28
    5292:	89 a5       	ldd	r24, Y+41	; 0x29
    5294:	9a a5       	ldd	r25, Y+42	; 0x2a
    5296:	20 e0       	ldi	r18, 0x00	; 0
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	40 e2       	ldi	r20, 0x20	; 32
    529c:	51 e4       	ldi	r21, 0x41	; 65
    529e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	bc 01       	movw	r22, r24
    52a8:	cd 01       	movw	r24, r26
    52aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ae:	dc 01       	movw	r26, r24
    52b0:	cb 01       	movw	r24, r22
    52b2:	9a a3       	std	Y+34, r25	; 0x22
    52b4:	89 a3       	std	Y+33, r24	; 0x21
    52b6:	0f c0       	rjmp	.+30     	; 0x52d6 <main+0x956>
    52b8:	88 ec       	ldi	r24, 0xC8	; 200
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	98 a3       	std	Y+32, r25	; 0x20
    52be:	8f 8f       	std	Y+31, r24	; 0x1f
    52c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52c2:	98 a1       	ldd	r25, Y+32	; 0x20
    52c4:	01 97       	sbiw	r24, 0x01	; 1
    52c6:	f1 f7       	brne	.-4      	; 0x52c4 <main+0x944>
    52c8:	98 a3       	std	Y+32, r25	; 0x20
    52ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52cc:	89 a1       	ldd	r24, Y+33	; 0x21
    52ce:	9a a1       	ldd	r25, Y+34	; 0x22
    52d0:	01 97       	sbiw	r24, 0x01	; 1
    52d2:	9a a3       	std	Y+34, r25	; 0x22
    52d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d6:	89 a1       	ldd	r24, Y+33	; 0x21
    52d8:	9a a1       	ldd	r25, Y+34	; 0x22
    52da:	00 97       	sbiw	r24, 0x00	; 0
    52dc:	69 f7       	brne	.-38     	; 0x52b8 <main+0x938>
    52de:	14 c0       	rjmp	.+40     	; 0x5308 <main+0x988>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e0:	6b a1       	ldd	r22, Y+35	; 0x23
    52e2:	7c a1       	ldd	r23, Y+36	; 0x24
    52e4:	8d a1       	ldd	r24, Y+37	; 0x25
    52e6:	9e a1       	ldd	r25, Y+38	; 0x26
    52e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ec:	dc 01       	movw	r26, r24
    52ee:	cb 01       	movw	r24, r22
    52f0:	9a a3       	std	Y+34, r25	; 0x22
    52f2:	89 a3       	std	Y+33, r24	; 0x21
    52f4:	89 a1       	ldd	r24, Y+33	; 0x21
    52f6:	9a a1       	ldd	r25, Y+34	; 0x22
    52f8:	9e 8f       	std	Y+30, r25	; 0x1e
    52fa:	8d 8f       	std	Y+29, r24	; 0x1d
    52fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5300:	01 97       	sbiw	r24, 0x01	; 1
    5302:	f1 f7       	brne	.-4      	; 0x5300 <main+0x980>
    5304:	9e 8f       	std	Y+30, r25	; 0x1e
    5306:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
					}
		    } while (reenter_check == PASS_INCORRECT);
    5308:	fe 01       	movw	r30, r28
    530a:	ef 58       	subi	r30, 0x8F	; 143
    530c:	ff 4f       	sbci	r31, 0xFF	; 255
    530e:	80 81       	ld	r24, Z
    5310:	88 23       	and	r24, r24
    5312:	09 f4       	brne	.+2      	; 0x5316 <main+0x996>
    5314:	cd ce       	rjmp	.-614    	; 0x50b0 <main+0x730>
		    		if(Error_state == STATE_ERROR)
    5316:	80 91 b5 02 	lds	r24, 0x02B5
    531a:	81 31       	cpi	r24, 0x11	; 17
    531c:	f9 f4       	brne	.+62     	; 0x535c <main+0x9dc>
		  		    {
		    			LCD_clearScreen();
    531e:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		  		    	LCD_displayString("      Error ");
    5322:	8a e3       	ldi	r24, 0x3A	; 58
    5324:	91 e0       	ldi	r25, 0x01	; 1
    5326:	0e 94 34 20 	call	0x4068	; 0x4068 <LCD_displayString>
		  			    while(Error_state == STATE_ERROR);
    532a:	80 91 b5 02 	lds	r24, 0x02B5
    532e:	81 31       	cpi	r24, 0x11	; 17
    5330:	e1 f3       	breq	.-8      	; 0x532a <main+0x9aa>
		  		    	Error_state=NORMAL;
    5332:	10 92 b5 02 	sts	0x02B5, r1
		    			LCD_clearScreen();
    5336:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		  			    LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    533a:	23 ef       	ldi	r18, 0xF3	; 243
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	80 e0       	ldi	r24, 0x00	; 0
    5340:	60 e0       	ldi	r22, 0x00	; 0
    5342:	a9 01       	movw	r20, r18
    5344:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		  			    LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    5348:	21 e0       	ldi	r18, 0x01	; 1
    534a:	31 e0       	ldi	r19, 0x01	; 1
    534c:	81 e0       	ldi	r24, 0x01	; 1
    534e:	60 e0       	ldi	r22, 0x00	; 0
    5350:	a9 01       	movw	r20, r18
    5352:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		  			    try=0;
    5356:	10 92 b6 02 	sts	0x02B6, r1
    535a:	3b c1       	rjmp	.+630    	; 0x55d2 <main+0xc52>
		  		    }
		  		    else
		  		    {
		  		try=0;
    535c:	10 92 b6 02 	sts	0x02B6, r1
		    	/* Reset reenter_check */
		    	reenter_check = PASS_UNMATCHED;
    5360:	fe 01       	movw	r30, r28
    5362:	ef 58       	subi	r30, 0x8F	; 143
    5364:	ff 4f       	sbci	r31, 0xFF	; 255
    5366:	10 82       	st	Z, r1
		        /* Send MCU1 ready to send signal */
		        UART_sendByte(MCU1_READYTOSEND);
    5368:	8a e0       	ldi	r24, 0x0A	; 10
    536a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
		        /* Wait until Control_ECU is ready to receive */
		        while (UART_recieveByte() != MCU2_READYTORECIEVE);
    536e:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    5372:	8d 30       	cpi	r24, 0x0D	; 13
    5374:	e1 f7       	brne	.-8      	; 0x536e <main+0x9ee>
		        /* Send CHANGEPASS signal to initiate password change */
		        UART_sendByte(CHANGEPASS);
    5376:	8f e0       	ldi	r24, 0x0F	; 15
    5378:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>

		    /* Continuously perform password change process */
		    do {
		        /* Send MCU1 ready to send signal */
		        UART_sendByte(MCU1_READYTOSEND);
    537c:	8a e0       	ldi	r24, 0x0A	; 10
    537e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
		        /* Wait until Control_ECU is ready to receive */
		        while (UART_recieveByte() != MCU2_READYTORECIEVE);
    5382:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    5386:	8d 30       	cpi	r24, 0x0D	; 13
    5388:	e1 f7       	brne	.-8      	; 0x5382 <main+0xa02>
		        /* Set a new password through HMI */
		        HMI_setNewPassword();
    538a:	0e 94 b4 22 	call	0x4568	; 0x4568 <HMI_setNewPassword>
		        /* Reenter the new password through HMI */
		        HMI_ReenterPassword();
    538e:	0e 94 35 23 	call	0x466a	; 0x466a <HMI_ReenterPassword>
		        /* Wait until Control_ECU is ready to send */
		        while (UART_recieveByte() != MCU2_READYTOSEND);
    5392:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    5396:	8c 30       	cpi	r24, 0x0C	; 12
    5398:	e1 f7       	brne	.-8      	; 0x5392 <main+0xa12>
		        /* Send MCU1 ready to receive */
		        UART_sendByte(MCU1_READYTORECIEVE);
    539a:	8b e0       	ldi	r24, 0x0B	; 11
    539c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_sendByte>
		        /* Receive reenter_check value */
		        reenter_check = UART_recieveByte();
    53a0:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_recieveByte>
    53a4:	fe 01       	movw	r30, r28
    53a6:	ef 58       	subi	r30, 0x8F	; 143
    53a8:	ff 4f       	sbci	r31, 0xFF	; 255
    53aa:	80 83       	st	Z, r24
		        if(reenter_check == PASS_UNMATCHED)
    53ac:	fe 01       	movw	r30, r28
    53ae:	ef 58       	subi	r30, 0x8F	; 143
    53b0:	ff 4f       	sbci	r31, 0xFF	; 255
    53b2:	80 81       	ld	r24, Z
    53b4:	88 23       	and	r24, r24
    53b6:	09 f0       	breq	.+2      	; 0x53ba <main+0xa3a>
    53b8:	7c c0       	rjmp	.+248    	; 0x54b2 <main+0xb32>
					{
						LCD_clearScreen();
    53ba:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		  			    LCD_displayStringRowColumn(0, 1, "PASS UNMATCHED");
    53be:	25 e6       	ldi	r18, 0x65	; 101
    53c0:	31 e0       	ldi	r19, 0x01	; 1
    53c2:	80 e0       	ldi	r24, 0x00	; 0
    53c4:	61 e0       	ldi	r22, 0x01	; 1
    53c6:	a9 01       	movw	r20, r18
    53c8:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	aa e7       	ldi	r26, 0x7A	; 122
    53d2:	b4 e4       	ldi	r27, 0x44	; 68
    53d4:	89 8f       	std	Y+25, r24	; 0x19
    53d6:	9a 8f       	std	Y+26, r25	; 0x1a
    53d8:	ab 8f       	std	Y+27, r26	; 0x1b
    53da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53dc:	69 8d       	ldd	r22, Y+25	; 0x19
    53de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53e4:	20 e0       	ldi	r18, 0x00	; 0
    53e6:	30 e0       	ldi	r19, 0x00	; 0
    53e8:	4a ef       	ldi	r20, 0xFA	; 250
    53ea:	54 e4       	ldi	r21, 0x44	; 68
    53ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f0:	dc 01       	movw	r26, r24
    53f2:	cb 01       	movw	r24, r22
    53f4:	8d 8b       	std	Y+21, r24	; 0x15
    53f6:	9e 8b       	std	Y+22, r25	; 0x16
    53f8:	af 8b       	std	Y+23, r26	; 0x17
    53fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    53fc:	6d 89       	ldd	r22, Y+21	; 0x15
    53fe:	7e 89       	ldd	r23, Y+22	; 0x16
    5400:	8f 89       	ldd	r24, Y+23	; 0x17
    5402:	98 8d       	ldd	r25, Y+24	; 0x18
    5404:	20 e0       	ldi	r18, 0x00	; 0
    5406:	30 e0       	ldi	r19, 0x00	; 0
    5408:	40 e8       	ldi	r20, 0x80	; 128
    540a:	5f e3       	ldi	r21, 0x3F	; 63
    540c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5410:	88 23       	and	r24, r24
    5412:	2c f4       	brge	.+10     	; 0x541e <main+0xa9e>
		__ticks = 1;
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	9c 8b       	std	Y+20, r25	; 0x14
    541a:	8b 8b       	std	Y+19, r24	; 0x13
    541c:	3f c0       	rjmp	.+126    	; 0x549c <main+0xb1c>
	else if (__tmp > 65535)
    541e:	6d 89       	ldd	r22, Y+21	; 0x15
    5420:	7e 89       	ldd	r23, Y+22	; 0x16
    5422:	8f 89       	ldd	r24, Y+23	; 0x17
    5424:	98 8d       	ldd	r25, Y+24	; 0x18
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	3f ef       	ldi	r19, 0xFF	; 255
    542a:	4f e7       	ldi	r20, 0x7F	; 127
    542c:	57 e4       	ldi	r21, 0x47	; 71
    542e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5432:	18 16       	cp	r1, r24
    5434:	4c f5       	brge	.+82     	; 0x5488 <main+0xb08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5436:	69 8d       	ldd	r22, Y+25	; 0x19
    5438:	7a 8d       	ldd	r23, Y+26	; 0x1a
    543a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    543c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    543e:	20 e0       	ldi	r18, 0x00	; 0
    5440:	30 e0       	ldi	r19, 0x00	; 0
    5442:	40 e2       	ldi	r20, 0x20	; 32
    5444:	51 e4       	ldi	r21, 0x41	; 65
    5446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22
    544e:	bc 01       	movw	r22, r24
    5450:	cd 01       	movw	r24, r26
    5452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5456:	dc 01       	movw	r26, r24
    5458:	cb 01       	movw	r24, r22
    545a:	9c 8b       	std	Y+20, r25	; 0x14
    545c:	8b 8b       	std	Y+19, r24	; 0x13
    545e:	0f c0       	rjmp	.+30     	; 0x547e <main+0xafe>
    5460:	88 ec       	ldi	r24, 0xC8	; 200
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	9a 8b       	std	Y+18, r25	; 0x12
    5466:	89 8b       	std	Y+17, r24	; 0x11
    5468:	89 89       	ldd	r24, Y+17	; 0x11
    546a:	9a 89       	ldd	r25, Y+18	; 0x12
    546c:	01 97       	sbiw	r24, 0x01	; 1
    546e:	f1 f7       	brne	.-4      	; 0x546c <main+0xaec>
    5470:	9a 8b       	std	Y+18, r25	; 0x12
    5472:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5474:	8b 89       	ldd	r24, Y+19	; 0x13
    5476:	9c 89       	ldd	r25, Y+20	; 0x14
    5478:	01 97       	sbiw	r24, 0x01	; 1
    547a:	9c 8b       	std	Y+20, r25	; 0x14
    547c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    547e:	8b 89       	ldd	r24, Y+19	; 0x13
    5480:	9c 89       	ldd	r25, Y+20	; 0x14
    5482:	00 97       	sbiw	r24, 0x00	; 0
    5484:	69 f7       	brne	.-38     	; 0x5460 <main+0xae0>
    5486:	9e c0       	rjmp	.+316    	; 0x55c4 <main+0xc44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5488:	6d 89       	ldd	r22, Y+21	; 0x15
    548a:	7e 89       	ldd	r23, Y+22	; 0x16
    548c:	8f 89       	ldd	r24, Y+23	; 0x17
    548e:	98 8d       	ldd	r25, Y+24	; 0x18
    5490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	9c 8b       	std	Y+20, r25	; 0x14
    549a:	8b 8b       	std	Y+19, r24	; 0x13
    549c:	8b 89       	ldd	r24, Y+19	; 0x13
    549e:	9c 89       	ldd	r25, Y+20	; 0x14
    54a0:	98 8b       	std	Y+16, r25	; 0x10
    54a2:	8f 87       	std	Y+15, r24	; 0x0f
    54a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    54a6:	98 89       	ldd	r25, Y+16	; 0x10
    54a8:	01 97       	sbiw	r24, 0x01	; 1
    54aa:	f1 f7       	brne	.-4      	; 0x54a8 <main+0xb28>
    54ac:	98 8b       	std	Y+16, r25	; 0x10
    54ae:	8f 87       	std	Y+15, r24	; 0x0f
    54b0:	89 c0       	rjmp	.+274    	; 0x55c4 <main+0xc44>
						_delay_ms(1000);
					}
					else if(reenter_check == PASS_MATCHED)
    54b2:	fe 01       	movw	r30, r28
    54b4:	ef 58       	subi	r30, 0x8F	; 143
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	80 81       	ld	r24, Z
    54ba:	81 30       	cpi	r24, 0x01	; 1
    54bc:	09 f0       	breq	.+2      	; 0x54c0 <main+0xb40>
    54be:	82 c0       	rjmp	.+260    	; 0x55c4 <main+0xc44>
					{
						LCD_clearScreen();
    54c0:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		  			    LCD_displayStringRowColumn(0, 2, "PASS MATCHED");
    54c4:	24 e7       	ldi	r18, 0x74	; 116
    54c6:	31 e0       	ldi	r19, 0x01	; 1
    54c8:	80 e0       	ldi	r24, 0x00	; 0
    54ca:	62 e0       	ldi	r22, 0x02	; 2
    54cc:	a9 01       	movw	r20, r18
    54ce:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		  			    LCD_displayStringRowColumn(1, 0, "CHANGE COMPLETE");
    54d2:	21 e8       	ldi	r18, 0x81	; 129
    54d4:	31 e0       	ldi	r19, 0x01	; 1
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	60 e0       	ldi	r22, 0x00	; 0
    54da:	a9 01       	movw	r20, r18
    54dc:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    54e0:	80 e0       	ldi	r24, 0x00	; 0
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	aa e7       	ldi	r26, 0x7A	; 122
    54e6:	b4 e4       	ldi	r27, 0x44	; 68
    54e8:	8b 87       	std	Y+11, r24	; 0x0b
    54ea:	9c 87       	std	Y+12, r25	; 0x0c
    54ec:	ad 87       	std	Y+13, r26	; 0x0d
    54ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    54f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    54f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54f8:	20 e0       	ldi	r18, 0x00	; 0
    54fa:	30 e0       	ldi	r19, 0x00	; 0
    54fc:	4a ef       	ldi	r20, 0xFA	; 250
    54fe:	54 e4       	ldi	r21, 0x44	; 68
    5500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5504:	dc 01       	movw	r26, r24
    5506:	cb 01       	movw	r24, r22
    5508:	8f 83       	std	Y+7, r24	; 0x07
    550a:	98 87       	std	Y+8, r25	; 0x08
    550c:	a9 87       	std	Y+9, r26	; 0x09
    550e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5510:	6f 81       	ldd	r22, Y+7	; 0x07
    5512:	78 85       	ldd	r23, Y+8	; 0x08
    5514:	89 85       	ldd	r24, Y+9	; 0x09
    5516:	9a 85       	ldd	r25, Y+10	; 0x0a
    5518:	20 e0       	ldi	r18, 0x00	; 0
    551a:	30 e0       	ldi	r19, 0x00	; 0
    551c:	40 e8       	ldi	r20, 0x80	; 128
    551e:	5f e3       	ldi	r21, 0x3F	; 63
    5520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5524:	88 23       	and	r24, r24
    5526:	2c f4       	brge	.+10     	; 0x5532 <main+0xbb2>
		__ticks = 1;
    5528:	81 e0       	ldi	r24, 0x01	; 1
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	9e 83       	std	Y+6, r25	; 0x06
    552e:	8d 83       	std	Y+5, r24	; 0x05
    5530:	3f c0       	rjmp	.+126    	; 0x55b0 <main+0xc30>
	else if (__tmp > 65535)
    5532:	6f 81       	ldd	r22, Y+7	; 0x07
    5534:	78 85       	ldd	r23, Y+8	; 0x08
    5536:	89 85       	ldd	r24, Y+9	; 0x09
    5538:	9a 85       	ldd	r25, Y+10	; 0x0a
    553a:	20 e0       	ldi	r18, 0x00	; 0
    553c:	3f ef       	ldi	r19, 0xFF	; 255
    553e:	4f e7       	ldi	r20, 0x7F	; 127
    5540:	57 e4       	ldi	r21, 0x47	; 71
    5542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5546:	18 16       	cp	r1, r24
    5548:	4c f5       	brge	.+82     	; 0x559c <main+0xc1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    554a:	6b 85       	ldd	r22, Y+11	; 0x0b
    554c:	7c 85       	ldd	r23, Y+12	; 0x0c
    554e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5550:	9e 85       	ldd	r25, Y+14	; 0x0e
    5552:	20 e0       	ldi	r18, 0x00	; 0
    5554:	30 e0       	ldi	r19, 0x00	; 0
    5556:	40 e2       	ldi	r20, 0x20	; 32
    5558:	51 e4       	ldi	r21, 0x41	; 65
    555a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    555e:	dc 01       	movw	r26, r24
    5560:	cb 01       	movw	r24, r22
    5562:	bc 01       	movw	r22, r24
    5564:	cd 01       	movw	r24, r26
    5566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    556a:	dc 01       	movw	r26, r24
    556c:	cb 01       	movw	r24, r22
    556e:	9e 83       	std	Y+6, r25	; 0x06
    5570:	8d 83       	std	Y+5, r24	; 0x05
    5572:	0f c0       	rjmp	.+30     	; 0x5592 <main+0xc12>
    5574:	88 ec       	ldi	r24, 0xC8	; 200
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	9c 83       	std	Y+4, r25	; 0x04
    557a:	8b 83       	std	Y+3, r24	; 0x03
    557c:	8b 81       	ldd	r24, Y+3	; 0x03
    557e:	9c 81       	ldd	r25, Y+4	; 0x04
    5580:	01 97       	sbiw	r24, 0x01	; 1
    5582:	f1 f7       	brne	.-4      	; 0x5580 <main+0xc00>
    5584:	9c 83       	std	Y+4, r25	; 0x04
    5586:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5588:	8d 81       	ldd	r24, Y+5	; 0x05
    558a:	9e 81       	ldd	r25, Y+6	; 0x06
    558c:	01 97       	sbiw	r24, 0x01	; 1
    558e:	9e 83       	std	Y+6, r25	; 0x06
    5590:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5592:	8d 81       	ldd	r24, Y+5	; 0x05
    5594:	9e 81       	ldd	r25, Y+6	; 0x06
    5596:	00 97       	sbiw	r24, 0x00	; 0
    5598:	69 f7       	brne	.-38     	; 0x5574 <main+0xbf4>
    559a:	14 c0       	rjmp	.+40     	; 0x55c4 <main+0xc44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    559c:	6f 81       	ldd	r22, Y+7	; 0x07
    559e:	78 85       	ldd	r23, Y+8	; 0x08
    55a0:	89 85       	ldd	r24, Y+9	; 0x09
    55a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    55a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55a8:	dc 01       	movw	r26, r24
    55aa:	cb 01       	movw	r24, r22
    55ac:	9e 83       	std	Y+6, r25	; 0x06
    55ae:	8d 83       	std	Y+5, r24	; 0x05
    55b0:	8d 81       	ldd	r24, Y+5	; 0x05
    55b2:	9e 81       	ldd	r25, Y+6	; 0x06
    55b4:	9a 83       	std	Y+2, r25	; 0x02
    55b6:	89 83       	std	Y+1, r24	; 0x01
    55b8:	89 81       	ldd	r24, Y+1	; 0x01
    55ba:	9a 81       	ldd	r25, Y+2	; 0x02
    55bc:	01 97       	sbiw	r24, 0x01	; 1
    55be:	f1 f7       	brne	.-4      	; 0x55bc <main+0xc3c>
    55c0:	9a 83       	std	Y+2, r25	; 0x02
    55c2:	89 83       	std	Y+1, r24	; 0x01
		  			    _delay_ms(1000);
					}
		    } while (reenter_check == PASS_UNMATCHED);
    55c4:	fe 01       	movw	r30, r28
    55c6:	ef 58       	subi	r30, 0x8F	; 143
    55c8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ca:	80 81       	ld	r24, Z
    55cc:	88 23       	and	r24, r24
    55ce:	09 f4       	brne	.+2      	; 0x55d2 <main+0xc52>
    55d0:	d5 ce       	rjmp	.-598    	; 0x537c <main+0x9fc>
		  		    }
		    /* Clear the LCD screen */
		    LCD_clearScreen();
    55d2:	0e 94 b9 20 	call	0x4172	; 0x4172 <LCD_clearScreen>
		    /* Display options on LCD */
		    LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    55d6:	23 ef       	ldi	r18, 0xF3	; 243
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	80 e0       	ldi	r24, 0x00	; 0
    55dc:	60 e0       	ldi	r22, 0x00	; 0
    55de:	a9 01       	movw	r20, r18
    55e0:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
		    LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    55e4:	21 e0       	ldi	r18, 0x01	; 1
    55e6:	31 e0       	ldi	r19, 0x01	; 1
    55e8:	81 e0       	ldi	r24, 0x01	; 1
    55ea:	60 e0       	ldi	r22, 0x00	; 0
    55ec:	a9 01       	movw	r20, r18
    55ee:	0e 94 a0 20 	call	0x4140	; 0x4140 <LCD_displayStringRowColumn>
    55f2:	90 cb       	rjmp	.-2272   	; 0x4d14 <main+0x394>

000055f4 <__mulsi3>:
    55f4:	62 9f       	mul	r22, r18
    55f6:	d0 01       	movw	r26, r0
    55f8:	73 9f       	mul	r23, r19
    55fa:	f0 01       	movw	r30, r0
    55fc:	82 9f       	mul	r24, r18
    55fe:	e0 0d       	add	r30, r0
    5600:	f1 1d       	adc	r31, r1
    5602:	64 9f       	mul	r22, r20
    5604:	e0 0d       	add	r30, r0
    5606:	f1 1d       	adc	r31, r1
    5608:	92 9f       	mul	r25, r18
    560a:	f0 0d       	add	r31, r0
    560c:	83 9f       	mul	r24, r19
    560e:	f0 0d       	add	r31, r0
    5610:	74 9f       	mul	r23, r20
    5612:	f0 0d       	add	r31, r0
    5614:	65 9f       	mul	r22, r21
    5616:	f0 0d       	add	r31, r0
    5618:	99 27       	eor	r25, r25
    561a:	72 9f       	mul	r23, r18
    561c:	b0 0d       	add	r27, r0
    561e:	e1 1d       	adc	r30, r1
    5620:	f9 1f       	adc	r31, r25
    5622:	63 9f       	mul	r22, r19
    5624:	b0 0d       	add	r27, r0
    5626:	e1 1d       	adc	r30, r1
    5628:	f9 1f       	adc	r31, r25
    562a:	bd 01       	movw	r22, r26
    562c:	cf 01       	movw	r24, r30
    562e:	11 24       	eor	r1, r1
    5630:	08 95       	ret

00005632 <__udivmodsi4>:
    5632:	a1 e2       	ldi	r26, 0x21	; 33
    5634:	1a 2e       	mov	r1, r26
    5636:	aa 1b       	sub	r26, r26
    5638:	bb 1b       	sub	r27, r27
    563a:	fd 01       	movw	r30, r26
    563c:	0d c0       	rjmp	.+26     	; 0x5658 <__udivmodsi4_ep>

0000563e <__udivmodsi4_loop>:
    563e:	aa 1f       	adc	r26, r26
    5640:	bb 1f       	adc	r27, r27
    5642:	ee 1f       	adc	r30, r30
    5644:	ff 1f       	adc	r31, r31
    5646:	a2 17       	cp	r26, r18
    5648:	b3 07       	cpc	r27, r19
    564a:	e4 07       	cpc	r30, r20
    564c:	f5 07       	cpc	r31, r21
    564e:	20 f0       	brcs	.+8      	; 0x5658 <__udivmodsi4_ep>
    5650:	a2 1b       	sub	r26, r18
    5652:	b3 0b       	sbc	r27, r19
    5654:	e4 0b       	sbc	r30, r20
    5656:	f5 0b       	sbc	r31, r21

00005658 <__udivmodsi4_ep>:
    5658:	66 1f       	adc	r22, r22
    565a:	77 1f       	adc	r23, r23
    565c:	88 1f       	adc	r24, r24
    565e:	99 1f       	adc	r25, r25
    5660:	1a 94       	dec	r1
    5662:	69 f7       	brne	.-38     	; 0x563e <__udivmodsi4_loop>
    5664:	60 95       	com	r22
    5666:	70 95       	com	r23
    5668:	80 95       	com	r24
    566a:	90 95       	com	r25
    566c:	9b 01       	movw	r18, r22
    566e:	ac 01       	movw	r20, r24
    5670:	bd 01       	movw	r22, r26
    5672:	cf 01       	movw	r24, r30
    5674:	08 95       	ret

00005676 <__prologue_saves__>:
    5676:	2f 92       	push	r2
    5678:	3f 92       	push	r3
    567a:	4f 92       	push	r4
    567c:	5f 92       	push	r5
    567e:	6f 92       	push	r6
    5680:	7f 92       	push	r7
    5682:	8f 92       	push	r8
    5684:	9f 92       	push	r9
    5686:	af 92       	push	r10
    5688:	bf 92       	push	r11
    568a:	cf 92       	push	r12
    568c:	df 92       	push	r13
    568e:	ef 92       	push	r14
    5690:	ff 92       	push	r15
    5692:	0f 93       	push	r16
    5694:	1f 93       	push	r17
    5696:	cf 93       	push	r28
    5698:	df 93       	push	r29
    569a:	cd b7       	in	r28, 0x3d	; 61
    569c:	de b7       	in	r29, 0x3e	; 62
    569e:	ca 1b       	sub	r28, r26
    56a0:	db 0b       	sbc	r29, r27
    56a2:	0f b6       	in	r0, 0x3f	; 63
    56a4:	f8 94       	cli
    56a6:	de bf       	out	0x3e, r29	; 62
    56a8:	0f be       	out	0x3f, r0	; 63
    56aa:	cd bf       	out	0x3d, r28	; 61
    56ac:	09 94       	ijmp

000056ae <__epilogue_restores__>:
    56ae:	2a 88       	ldd	r2, Y+18	; 0x12
    56b0:	39 88       	ldd	r3, Y+17	; 0x11
    56b2:	48 88       	ldd	r4, Y+16	; 0x10
    56b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    56b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    56b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    56ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    56bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    56be:	aa 84       	ldd	r10, Y+10	; 0x0a
    56c0:	b9 84       	ldd	r11, Y+9	; 0x09
    56c2:	c8 84       	ldd	r12, Y+8	; 0x08
    56c4:	df 80       	ldd	r13, Y+7	; 0x07
    56c6:	ee 80       	ldd	r14, Y+6	; 0x06
    56c8:	fd 80       	ldd	r15, Y+5	; 0x05
    56ca:	0c 81       	ldd	r16, Y+4	; 0x04
    56cc:	1b 81       	ldd	r17, Y+3	; 0x03
    56ce:	aa 81       	ldd	r26, Y+2	; 0x02
    56d0:	b9 81       	ldd	r27, Y+1	; 0x01
    56d2:	ce 0f       	add	r28, r30
    56d4:	d1 1d       	adc	r29, r1
    56d6:	0f b6       	in	r0, 0x3f	; 63
    56d8:	f8 94       	cli
    56da:	de bf       	out	0x3e, r29	; 62
    56dc:	0f be       	out	0x3f, r0	; 63
    56de:	cd bf       	out	0x3d, r28	; 61
    56e0:	ed 01       	movw	r28, r26
    56e2:	08 95       	ret

000056e4 <itoa>:
    56e4:	fb 01       	movw	r30, r22
    56e6:	9f 01       	movw	r18, r30
    56e8:	e8 94       	clt
    56ea:	42 30       	cpi	r20, 0x02	; 2
    56ec:	c4 f0       	brlt	.+48     	; 0x571e <itoa+0x3a>
    56ee:	45 32       	cpi	r20, 0x25	; 37
    56f0:	b4 f4       	brge	.+44     	; 0x571e <itoa+0x3a>
    56f2:	4a 30       	cpi	r20, 0x0A	; 10
    56f4:	29 f4       	brne	.+10     	; 0x5700 <itoa+0x1c>
    56f6:	97 fb       	bst	r25, 7
    56f8:	1e f4       	brtc	.+6      	; 0x5700 <itoa+0x1c>
    56fa:	90 95       	com	r25
    56fc:	81 95       	neg	r24
    56fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5700:	64 2f       	mov	r22, r20
    5702:	77 27       	eor	r23, r23
    5704:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__udivmodhi4>
    5708:	80 5d       	subi	r24, 0xD0	; 208
    570a:	8a 33       	cpi	r24, 0x3A	; 58
    570c:	0c f0       	brlt	.+2      	; 0x5710 <itoa+0x2c>
    570e:	89 5d       	subi	r24, 0xD9	; 217
    5710:	81 93       	st	Z+, r24
    5712:	cb 01       	movw	r24, r22
    5714:	00 97       	sbiw	r24, 0x00	; 0
    5716:	a1 f7       	brne	.-24     	; 0x5700 <itoa+0x1c>
    5718:	16 f4       	brtc	.+4      	; 0x571e <itoa+0x3a>
    571a:	5d e2       	ldi	r21, 0x2D	; 45
    571c:	51 93       	st	Z+, r21
    571e:	10 82       	st	Z, r1
    5720:	c9 01       	movw	r24, r18
    5722:	0c 94 93 2b 	jmp	0x5726	; 0x5726 <strrev>

00005726 <strrev>:
    5726:	dc 01       	movw	r26, r24
    5728:	fc 01       	movw	r30, r24
    572a:	67 2f       	mov	r22, r23
    572c:	71 91       	ld	r23, Z+
    572e:	77 23       	and	r23, r23
    5730:	e1 f7       	brne	.-8      	; 0x572a <strrev+0x4>
    5732:	32 97       	sbiw	r30, 0x02	; 2
    5734:	04 c0       	rjmp	.+8      	; 0x573e <strrev+0x18>
    5736:	7c 91       	ld	r23, X
    5738:	6d 93       	st	X+, r22
    573a:	70 83       	st	Z, r23
    573c:	62 91       	ld	r22, -Z
    573e:	ae 17       	cp	r26, r30
    5740:	bf 07       	cpc	r27, r31
    5742:	c8 f3       	brcs	.-14     	; 0x5736 <strrev+0x10>
    5744:	08 95       	ret

00005746 <__udivmodhi4>:
    5746:	aa 1b       	sub	r26, r26
    5748:	bb 1b       	sub	r27, r27
    574a:	51 e1       	ldi	r21, 0x11	; 17
    574c:	07 c0       	rjmp	.+14     	; 0x575c <__udivmodhi4_ep>

0000574e <__udivmodhi4_loop>:
    574e:	aa 1f       	adc	r26, r26
    5750:	bb 1f       	adc	r27, r27
    5752:	a6 17       	cp	r26, r22
    5754:	b7 07       	cpc	r27, r23
    5756:	10 f0       	brcs	.+4      	; 0x575c <__udivmodhi4_ep>
    5758:	a6 1b       	sub	r26, r22
    575a:	b7 0b       	sbc	r27, r23

0000575c <__udivmodhi4_ep>:
    575c:	88 1f       	adc	r24, r24
    575e:	99 1f       	adc	r25, r25
    5760:	5a 95       	dec	r21
    5762:	a9 f7       	brne	.-22     	; 0x574e <__udivmodhi4_loop>
    5764:	80 95       	com	r24
    5766:	90 95       	com	r25
    5768:	bc 01       	movw	r22, r24
    576a:	cd 01       	movw	r24, r26
    576c:	08 95       	ret

0000576e <_exit>:
    576e:	f8 94       	cli

00005770 <__stop_program>:
    5770:	ff cf       	rjmp	.-2      	; 0x5770 <__stop_program>
